//
// PowerAnimationView.swift
// Generated by Core Animator version 1.5.2 on 2/13/18.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

private class _PowerAnimationPassthroughView: UIView {
    override func point(inside point: CGPoint, with event: UIEvent?) -> Bool {
        for subview in subviews as [UIView] {
            if subview.point(inside: convert(point, to: subview), with: event) { return true }
        }
        return false
    }
}

@IBDesignable
class PowerAnimationView : UIView, CAAnimationDelegate {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 2047, height: 1535))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .scaleToFill:
				break
			case .scaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransform(scaleX: xScale, y: yScale)
			scalingView.center = CGPoint(x:self.bounds.midX, y:self.bounds.midY)
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = Bundle(for:type(of: self))
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:2047, height:1535)
		__scaling__.center = CGPoint(x:1023.9, y:768.0)
		__scaling__.clipsToBounds = true
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let powerBeforeAnimation14__root = _PowerAnimationPassthroughView()
		let powerBeforeAnimation14__xScale = _PowerAnimationPassthroughView()
		let powerBeforeAnimation14__yScale = _PowerAnimationPassthroughView()
		let powerBeforeAnimation14 = UIImageView()
		let imgPowerBeforeAnimation14 = UIImage(named:"Power_beforeAnimation-14.png", in: bundle, compatibleWith: nil)
		if imgPowerBeforeAnimation14 == nil {
			print("** Warning: Could not create image from 'Power_beforeAnimation-14.png'")
		}
		powerBeforeAnimation14.image = imgPowerBeforeAnimation14
		powerBeforeAnimation14.contentMode = .center
		powerBeforeAnimation14.bounds = CGRect(x:0, y:0, width:2049.0, height:1537.0)
		powerBeforeAnimation14__root.layer.position = CGPoint(x:1024.500, y:768.500)
		powerBeforeAnimation14__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		powerBeforeAnimation14__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		powerBeforeAnimation14__root.transform = CGAffineTransform(rotationAngle: 0.000)
		powerBeforeAnimation14__root.addSubview(powerBeforeAnimation14__xScale)
		powerBeforeAnimation14__xScale.addSubview(powerBeforeAnimation14__yScale)
		powerBeforeAnimation14__yScale.addSubview(powerBeforeAnimation14)
		__scaling__.addSubview(powerBeforeAnimation14__root)
		viewsByName["Power_beforeAnimation-14__root"] = powerBeforeAnimation14__root
		viewsByName["Power_beforeAnimation-14__xScale"] = powerBeforeAnimation14__xScale
		viewsByName["Power_beforeAnimation-14__yScale"] = powerBeforeAnimation14__yScale
		viewsByName["Power_beforeAnimation-14"] = powerBeforeAnimation14

		let powerL14__root = _PowerAnimationPassthroughView()
		let powerL14__xScale = _PowerAnimationPassthroughView()
		let powerL14__yScale = _PowerAnimationPassthroughView()
		let powerL14 = UIImageView()
		let imgPowerL14 = UIImage(named:"power_l-14.png", in: bundle, compatibleWith: nil)
		if imgPowerL14 == nil {
			print("** Warning: Could not create image from 'power_l-14.png'")
		}
		powerL14.image = imgPowerL14
		powerL14.contentMode = .center
		powerL14.bounds = CGRect(x:0, y:0, width:1146.0, height:1179.0)
		powerL14__root.layer.position = CGPoint(x:792.231, y:730.971)
		powerL14__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		powerL14__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		powerL14__root.transform = CGAffineTransform(rotationAngle: 0.000)
		powerL14__root.addSubview(powerL14__xScale)
		powerL14__xScale.addSubview(powerL14__yScale)
		powerL14__yScale.addSubview(powerL14)
		__scaling__.addSubview(powerL14__root)
		viewsByName["power_l-14__root"] = powerL14__root
		viewsByName["power_l-14__xScale"] = powerL14__xScale
		viewsByName["power_l-14__yScale"] = powerL14__yScale
		viewsByName["power_l-14"] = powerL14

		let powerL14Mask__root = _PowerAnimationPassthroughView()
		let powerL14Mask__xScale = _PowerAnimationPassthroughView()
		let powerL14Mask__yScale = _PowerAnimationPassthroughView()
		let powerL14Mask = UIImageView()
		let imgSquare = UIImage(named:"square.png", in: bundle, compatibleWith: nil)
		if imgSquare == nil {
			print("** Warning: Could not create image from 'square.png'")
		}
		powerL14Mask.image = imgSquare
		powerL14Mask.contentMode = .center
		powerL14Mask.layer.anchorPoint = CGPoint(x:0.505, y:0.559)
		powerL14Mask.bounds = CGRect(x:0, y:0, width:185.0, height:184.5)
		powerL14Mask__root.layer.position = CGPoint(x:-0.216, y:1177.841)
		powerL14Mask__xScale.transform = CGAffineTransform(scaleX: 0.34, y: 1.00)
		powerL14Mask__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.10)
		powerL14Mask__root.transform = CGAffineTransform(rotationAngle: 0.949)
		powerL14Mask__root.addSubview(powerL14Mask__xScale)
		powerL14Mask__xScale.addSubview(powerL14Mask__yScale)
		powerL14Mask__yScale.addSubview(powerL14Mask)
		powerL14.mask = powerL14Mask__root
		viewsByName["power_l-14_mask__root"] = powerL14Mask__root
		viewsByName["power_l-14_mask__xScale"] = powerL14Mask__xScale
		viewsByName["power_l-14_mask__yScale"] = powerL14Mask__yScale
		viewsByName["power_l-14_mask"] = powerL14Mask

		let leftOff01__root = _PowerAnimationPassthroughView()
		let leftOff01__xScale = _PowerAnimationPassthroughView()
		let leftOff01__yScale = _PowerAnimationPassthroughView()
		let leftOff01 = UIImageView()
		let imgLeftOff01 = UIImage(named:"LeftOff-01.png", in: bundle, compatibleWith: nil)
		if imgLeftOff01 == nil {
			print("** Warning: Could not create image from 'LeftOff-01.png'")
		}
		leftOff01.image = imgLeftOff01
		leftOff01.contentMode = .center
		leftOff01.bounds = CGRect(x:0, y:0, width:227.0, height:226.0)
		leftOff01__root.layer.position = CGPoint(x:863.495, y:823.732)
		leftOff01__root.alpha = 0.00
		leftOff01__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		leftOff01__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		leftOff01__root.transform = CGAffineTransform(rotationAngle: 0.000)
		leftOff01__root.addSubview(leftOff01__xScale)
		leftOff01__xScale.addSubview(leftOff01__yScale)
		leftOff01__yScale.addSubview(leftOff01)
		__scaling__.addSubview(leftOff01__root)
		viewsByName["LeftOff-01__root"] = leftOff01__root
		viewsByName["LeftOff-01__xScale"] = leftOff01__xScale
		viewsByName["LeftOff-01__yScale"] = leftOff01__yScale
		viewsByName["LeftOff-01"] = leftOff01

		let rightOff01__root = _PowerAnimationPassthroughView()
		let rightOff01__xScale = _PowerAnimationPassthroughView()
		let rightOff01__yScale = _PowerAnimationPassthroughView()
		let rightOff01 = UIImageView()
		let imgRightOff01 = UIImage(named:"RightOff-01.png", in: bundle, compatibleWith: nil)
		if imgRightOff01 == nil {
			print("** Warning: Could not create image from 'RightOff-01.png'")
		}
		rightOff01.image = imgRightOff01
		rightOff01.contentMode = .center
		rightOff01.bounds = CGRect(x:0, y:0, width:227.0, height:226.0)
		rightOff01__root.layer.position = CGPoint(x:1382.641, y:838.779)
		rightOff01__root.alpha = 0.00
		rightOff01__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		rightOff01__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		rightOff01__root.transform = CGAffineTransform(rotationAngle: 0.000)
		rightOff01__root.addSubview(rightOff01__xScale)
		rightOff01__xScale.addSubview(rightOff01__yScale)
		rightOff01__yScale.addSubview(rightOff01)
		__scaling__.addSubview(rightOff01__root)
		viewsByName["RightOff-01__root"] = rightOff01__root
		viewsByName["RightOff-01__xScale"] = rightOff01__xScale
		viewsByName["RightOff-01__yScale"] = rightOff01__yScale
		viewsByName["RightOff-01"] = rightOff01

		let systemOff01__root = _PowerAnimationPassthroughView()
		let systemOff01__xScale = _PowerAnimationPassthroughView()
		let systemOff01__yScale = _PowerAnimationPassthroughView()
		let systemOff01 = UIImageView()
		let imgSystemOff01 = UIImage(named:"SystemOff-01.png", in: bundle, compatibleWith: nil)
		if imgSystemOff01 == nil {
			print("** Warning: Could not create image from 'SystemOff-01.png'")
		}
		systemOff01.image = imgSystemOff01
		systemOff01.contentMode = .center
		systemOff01.bounds = CGRect(x:0, y:0, width:227.0, height:226.0)
		systemOff01__root.layer.position = CGPoint(x:1137.381, y:479.174)
		systemOff01__root.alpha = 0.00
		systemOff01__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		systemOff01__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		systemOff01__root.transform = CGAffineTransform(rotationAngle: 0.000)
		systemOff01__root.addSubview(systemOff01__xScale)
		systemOff01__xScale.addSubview(systemOff01__yScale)
		systemOff01__yScale.addSubview(systemOff01)
		__scaling__.addSubview(systemOff01__root)
		viewsByName["SystemOff-01__root"] = systemOff01__root
		viewsByName["SystemOff-01__xScale"] = systemOff01__xScale
		viewsByName["SystemOff-01__yScale"] = systemOff01__yScale
		viewsByName["SystemOff-01"] = systemOff01

		self.viewsByName = viewsByName
	}

	// - MARK: PowerAnimation

	func addPowerAnimation() {
		addPowerAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addPowerAnimation(completion: ((Bool) -> Void)?) {
		addPowerAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addPowerAnimation(removedOnCompletion: Bool) {
		addPowerAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addPowerAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addPowerAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addPowerAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let instantTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionDefault)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 1.000
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "PowerAnimation")
			self.animationCompletions[layer.animation(forKey: "PowerAnimation")!] = complete
		}

		let leftOff01OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		leftOff01OpacityAnimation.duration = 1.000
		leftOff01OpacityAnimation.values = [0.000, 0.000, 1.000, 1.000] as [Float]
		leftOff01OpacityAnimation.keyTimes = [0.000, 0.375, 0.450, 1.000] as [NSNumber]
		leftOff01OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		leftOff01OpacityAnimation.beginTime = beginTime
		leftOff01OpacityAnimation.fillMode = fillMode
		leftOff01OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["LeftOff-01__root"]?.layer.add(leftOff01OpacityAnimation, forKey:"PowerAnimation_Opacity")

		let powerL14MaskRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		powerL14MaskRotationAnimation.duration = 1.000
		powerL14MaskRotationAnimation.values = [0.949, 0.949, -0.798, -1.116, -0.816, -0.482] as [Float]
		powerL14MaskRotationAnimation.keyTimes = [0.000, 0.424, 0.425, 0.725, 0.875, 1.000] as [NSNumber]
		powerL14MaskRotationAnimation.timingFunctions = [instantTiming, instantTiming, linearTiming, linearTiming, linearTiming]
		powerL14MaskRotationAnimation.beginTime = beginTime
		powerL14MaskRotationAnimation.fillMode = fillMode
		powerL14MaskRotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["power_l-14_mask__root"]?.layer.add(powerL14MaskRotationAnimation, forKey:"PowerAnimation_Rotation")

		let powerL14MaskScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		powerL14MaskScaleXAnimation.duration = 1.000
		powerL14MaskScaleXAnimation.values = [0.341, 0.759, 0.759, 0.203, 0.203] as [Float]
		powerL14MaskScaleXAnimation.keyTimes = [0.000, 0.675, 0.825, 0.825, 1.000] as [NSNumber]
		powerL14MaskScaleXAnimation.timingFunctions = [linearTiming, instantTiming, instantTiming, linearTiming]
		powerL14MaskScaleXAnimation.beginTime = beginTime
		powerL14MaskScaleXAnimation.fillMode = fillMode
		powerL14MaskScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["power_l-14_mask__xScale"]?.layer.add(powerL14MaskScaleXAnimation, forKey:"PowerAnimation_ScaleX")

		let powerL14MaskScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		powerL14MaskScaleYAnimation.duration = 1.000
		powerL14MaskScaleYAnimation.values = [0.101, 0.727, 0.217, 0.661, 0.661] as [Float]
		powerL14MaskScaleYAnimation.keyTimes = [0.000, 0.275, 0.675, 0.875, 1.000] as [NSNumber]
		powerL14MaskScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		powerL14MaskScaleYAnimation.beginTime = beginTime
		powerL14MaskScaleYAnimation.fillMode = fillMode
		powerL14MaskScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["power_l-14_mask__yScale"]?.layer.add(powerL14MaskScaleYAnimation, forKey:"PowerAnimation_ScaleY")

		let powerL14MaskTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		powerL14MaskTranslationXAnimation.duration = 1.000
		powerL14MaskTranslationXAnimation.values = [0.000, 192.805, 612.289, 612.289, 623.047, 495.211, 360.953, 350.573, 433.448, 539.338, 539.338, 516.499, 907.117, 1172.641] as [Float]
		powerL14MaskTranslationXAnimation.keyTimes = [0.000, 0.275, 0.400, 0.424, 0.425, 0.525, 0.600, 0.675, 0.725, 0.775, 0.825, 0.825, 0.875, 1.000] as [NSNumber]
		powerL14MaskTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, instantTiming, instantTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, instantTiming, instantTiming, linearTiming, linearTiming]
		powerL14MaskTranslationXAnimation.beginTime = beginTime
		powerL14MaskTranslationXAnimation.fillMode = fillMode
		powerL14MaskTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["power_l-14_mask__root"]?.layer.add(powerL14MaskTranslationXAnimation, forKey:"PowerAnimation_TranslationX")

		let powerL14MaskTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		powerL14MaskTranslationYAnimation.duration = 1.000
		powerL14MaskTranslationYAnimation.values = [0.000, -142.444, -459.812, -459.812, -530.484, -638.922, -750.969, -815.699, -974.144, -1218.074, -1218.074, -1171.413, -888.158, -517.151] as [Float]
		powerL14MaskTranslationYAnimation.keyTimes = [0.000, 0.275, 0.400, 0.424, 0.425, 0.525, 0.600, 0.675, 0.725, 0.775, 0.825, 0.825, 0.875, 1.000] as [NSNumber]
		powerL14MaskTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, instantTiming, instantTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, instantTiming, instantTiming, linearTiming, linearTiming]
		powerL14MaskTranslationYAnimation.beginTime = beginTime
		powerL14MaskTranslationYAnimation.fillMode = fillMode
		powerL14MaskTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["power_l-14_mask__root"]?.layer.add(powerL14MaskTranslationYAnimation, forKey:"PowerAnimation_TranslationY")

		let systemOff01OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		systemOff01OpacityAnimation.duration = 1.000
		systemOff01OpacityAnimation.values = [0.000, 0.000, 1.000, 1.000] as [Float]
		systemOff01OpacityAnimation.keyTimes = [0.000, 0.850, 0.925, 1.000] as [NSNumber]
		systemOff01OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		systemOff01OpacityAnimation.beginTime = beginTime
		systemOff01OpacityAnimation.fillMode = fillMode
		systemOff01OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["SystemOff-01__root"]?.layer.add(systemOff01OpacityAnimation, forKey:"PowerAnimation_Opacity")

		let rightOff01OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		rightOff01OpacityAnimation.duration = 1.000
		rightOff01OpacityAnimation.values = [0.000, 0.000, 1.000] as [Float]
		rightOff01OpacityAnimation.keyTimes = [0.000, 0.925, 1.000] as [NSNumber]
		rightOff01OpacityAnimation.timingFunctions = [linearTiming, linearTiming]
		rightOff01OpacityAnimation.beginTime = beginTime
		rightOff01OpacityAnimation.fillMode = fillMode
		rightOff01OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["RightOff-01__root"]?.layer.add(rightOff01OpacityAnimation, forKey:"PowerAnimation_Opacity")
	}

	func removePowerAnimation() {
		self.layer.removeAnimation(forKey: "PowerAnimation")
		self.viewsByName["LeftOff-01__root"]?.layer.removeAnimation(forKey: "PowerAnimation_Opacity")
		self.viewsByName["power_l-14_mask__root"]?.layer.removeAnimation(forKey: "PowerAnimation_Rotation")
		self.viewsByName["power_l-14_mask__xScale"]?.layer.removeAnimation(forKey: "PowerAnimation_ScaleX")
		self.viewsByName["power_l-14_mask__yScale"]?.layer.removeAnimation(forKey: "PowerAnimation_ScaleY")
		self.viewsByName["power_l-14_mask__root"]?.layer.removeAnimation(forKey: "PowerAnimation_TranslationX")
		self.viewsByName["power_l-14_mask__root"]?.layer.removeAnimation(forKey: "PowerAnimation_TranslationY")
		self.viewsByName["SystemOff-01__root"]?.layer.removeAnimation(forKey: "PowerAnimation_Opacity")
		self.viewsByName["RightOff-01__root"]?.layer.removeAnimation(forKey: "PowerAnimation_Opacity")
	}

	// - MARK: PowerAnimation_reversed

	func addPowerAnimationReversedAnimation() {
		addPowerAnimationReversedAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addPowerAnimationReversedAnimation(completion: ((Bool) -> Void)?) {
		addPowerAnimationReversedAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addPowerAnimationReversedAnimation(removedOnCompletion: Bool) {
		addPowerAnimationReversedAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addPowerAnimationReversedAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addPowerAnimationReversedAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addPowerAnimationReversedAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let instantTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionDefault)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 1.000
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "PowerAnimationReversed")
			self.animationCompletions[layer.animation(forKey: "PowerAnimationReversed")!] = complete
		}

		let leftOff01OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		leftOff01OpacityAnimation.duration = 1.000
		leftOff01OpacityAnimation.values = [1.000, 1.000, 0.000, 0.000] as [Float]
		leftOff01OpacityAnimation.keyTimes = [0.000, 0.550, 0.625, 1.000] as [NSNumber]
		leftOff01OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		leftOff01OpacityAnimation.beginTime = beginTime
		leftOff01OpacityAnimation.fillMode = fillMode
		leftOff01OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["LeftOff-01__root"]?.layer.add(leftOff01OpacityAnimation, forKey:"PowerAnimation_reversed_Opacity")

		let powerL14MaskRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		powerL14MaskRotationAnimation.duration = 1.000
		powerL14MaskRotationAnimation.values = [-0.482, -0.816, -1.116, -0.798, -0.798, 0.949, 0.949, 0.949] as [Float]
		powerL14MaskRotationAnimation.keyTimes = [0.000, 0.125, 0.275, 0.575, 0.576, 0.576, 0.999, 1.000] as [NSNumber]
		powerL14MaskRotationAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, instantTiming, instantTiming, instantTiming, instantTiming]
		powerL14MaskRotationAnimation.beginTime = beginTime
		powerL14MaskRotationAnimation.fillMode = fillMode
		powerL14MaskRotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["power_l-14_mask__root"]?.layer.add(powerL14MaskRotationAnimation, forKey:"PowerAnimation_reversed_Rotation")

		let powerL14MaskScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		powerL14MaskScaleXAnimation.duration = 1.000
		powerL14MaskScaleXAnimation.values = [0.203, 0.203, 0.203, 2.228, 0.759, 0.341] as [Float]
		powerL14MaskScaleXAnimation.keyTimes = [0.000, 0.175, 0.176, 0.176, 0.325, 1.000] as [NSNumber]
		powerL14MaskScaleXAnimation.timingFunctions = [linearTiming, instantTiming, instantTiming, linearTiming, linearTiming]
		powerL14MaskScaleXAnimation.beginTime = beginTime
		powerL14MaskScaleXAnimation.fillMode = fillMode
		powerL14MaskScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["power_l-14_mask__xScale"]?.layer.add(powerL14MaskScaleXAnimation, forKey:"PowerAnimation_reversed_ScaleX")

		let powerL14MaskScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		powerL14MaskScaleYAnimation.duration = 1.000
		powerL14MaskScaleYAnimation.values = [0.661, 0.661, 0.217, 0.727, 0.101] as [Float]
		powerL14MaskScaleYAnimation.keyTimes = [0.000, 0.125, 0.325, 0.725, 1.000] as [NSNumber]
		powerL14MaskScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		powerL14MaskScaleYAnimation.beginTime = beginTime
		powerL14MaskScaleYAnimation.fillMode = fillMode
		powerL14MaskScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["power_l-14_mask__yScale"]?.layer.add(powerL14MaskScaleYAnimation, forKey:"PowerAnimation_reversed_ScaleY")

		let powerL14MaskTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		powerL14MaskTranslationXAnimation.duration = 1.000
		powerL14MaskTranslationXAnimation.values = [1172.641, 907.117, 516.499, 516.499, 539.338, 539.338, 433.448, 350.573, 360.953, 495.211, 623.047, 623.047, 612.289, 612.289, 192.805, 0.000] as [Float]
		powerL14MaskTranslationXAnimation.keyTimes = [0.000, 0.125, 0.175, 0.176, 0.176, 0.225, 0.275, 0.325, 0.400, 0.475, 0.575, 0.576, 0.576, 0.600, 0.725, 1.000] as [NSNumber]
		powerL14MaskTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, instantTiming, instantTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, instantTiming, instantTiming, linearTiming, linearTiming, linearTiming]
		powerL14MaskTranslationXAnimation.beginTime = beginTime
		powerL14MaskTranslationXAnimation.fillMode = fillMode
		powerL14MaskTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["power_l-14_mask__root"]?.layer.add(powerL14MaskTranslationXAnimation, forKey:"PowerAnimation_reversed_TranslationX")

		let powerL14MaskTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		powerL14MaskTranslationYAnimation.duration = 1.000
		powerL14MaskTranslationYAnimation.values = [-517.151, -888.158, -1171.413, -1171.413, -1218.074, -1218.074, -974.144, -815.699, -750.969, -638.922, -530.484, -530.484, -459.812, -459.812, -142.444, 0.000] as [Float]
		powerL14MaskTranslationYAnimation.keyTimes = [0.000, 0.125, 0.175, 0.176, 0.176, 0.225, 0.275, 0.325, 0.400, 0.475, 0.575, 0.576, 0.576, 0.600, 0.725, 1.000] as [NSNumber]
		powerL14MaskTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, instantTiming, instantTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, instantTiming, instantTiming, linearTiming, linearTiming, linearTiming]
		powerL14MaskTranslationYAnimation.beginTime = beginTime
		powerL14MaskTranslationYAnimation.fillMode = fillMode
		powerL14MaskTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["power_l-14_mask__root"]?.layer.add(powerL14MaskTranslationYAnimation, forKey:"PowerAnimation_reversed_TranslationY")

		let systemOff01OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		systemOff01OpacityAnimation.duration = 1.000
		systemOff01OpacityAnimation.values = [1.000, 1.000, 0.000, 0.000] as [Float]
		systemOff01OpacityAnimation.keyTimes = [0.000, 0.075, 0.150, 1.000] as [NSNumber]
		systemOff01OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		systemOff01OpacityAnimation.beginTime = beginTime
		systemOff01OpacityAnimation.fillMode = fillMode
		systemOff01OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["SystemOff-01__root"]?.layer.add(systemOff01OpacityAnimation, forKey:"PowerAnimation_reversed_Opacity")

		let rightOff01OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		rightOff01OpacityAnimation.duration = 1.000
		rightOff01OpacityAnimation.values = [1.000, 0.000, 0.000] as [Float]
		rightOff01OpacityAnimation.keyTimes = [0.000, 0.075, 1.000] as [NSNumber]
		rightOff01OpacityAnimation.timingFunctions = [linearTiming, linearTiming]
		rightOff01OpacityAnimation.beginTime = beginTime
		rightOff01OpacityAnimation.fillMode = fillMode
		rightOff01OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["RightOff-01__root"]?.layer.add(rightOff01OpacityAnimation, forKey:"PowerAnimation_reversed_Opacity")
	}

	func removePowerAnimationReversedAnimation() {
		self.layer.removeAnimation(forKey: "PowerAnimationReversed")
		self.viewsByName["LeftOff-01__root"]?.layer.removeAnimation(forKey: "PowerAnimation_reversed_Opacity")
		self.viewsByName["power_l-14_mask__root"]?.layer.removeAnimation(forKey: "PowerAnimation_reversed_Rotation")
		self.viewsByName["power_l-14_mask__xScale"]?.layer.removeAnimation(forKey: "PowerAnimation_reversed_ScaleX")
		self.viewsByName["power_l-14_mask__yScale"]?.layer.removeAnimation(forKey: "PowerAnimation_reversed_ScaleY")
		self.viewsByName["power_l-14_mask__root"]?.layer.removeAnimation(forKey: "PowerAnimation_reversed_TranslationX")
		self.viewsByName["power_l-14_mask__root"]?.layer.removeAnimation(forKey: "PowerAnimation_reversed_TranslationY")
		self.viewsByName["SystemOff-01__root"]?.layer.removeAnimation(forKey: "PowerAnimation_reversed_Opacity")
		self.viewsByName["RightOff-01__root"]?.layer.removeAnimation(forKey: "PowerAnimation_reversed_Opacity")
	}

	// MARK: CAAnimationDelegate
	func animationDidStop(_ anim: CAAnimation, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValue(forKey: anim)
			completion(flag)
		}
	}

	func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimation(forKey: "PowerAnimationReversed")
		self.layer.removeAnimation(forKey: "PowerAnimation")
	}
}