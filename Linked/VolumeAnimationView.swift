//
// VolumeAnimationView.swift
// Generated by Core Animator version 1.5.2 on 2/5/18.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

private class _VolumeAnimationPassthroughView: UIView {
    override func point(inside point: CGPoint, with event: UIEvent?) -> Bool {
        for subview in subviews as [UIView] {
            if subview.point(inside: convert(point, to: subview), with: event) { return true }
        }
        return false
    }
}

@IBDesignable
class VolumeAnimationView : UIView, CAAnimationDelegate {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 2048, height: 1537))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .scaleToFill:
				break
			case .scaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransform(scaleX: xScale, y: yScale)
			scalingView.center = CGPoint(x:self.bounds.midX, y:self.bounds.midY)
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = Bundle(for:type(of: self))
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:2048, height:1537)
		__scaling__.center = CGPoint(x:1024.1, y:768.8)
		__scaling__.clipsToBounds = true
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let volumeWhileAnim3Artboard11__root = _VolumeAnimationPassthroughView()
		let volumeWhileAnim3Artboard11__xScale = _VolumeAnimationPassthroughView()
		let volumeWhileAnim3Artboard11__yScale = _VolumeAnimationPassthroughView()
		let volumeWhileAnim3Artboard11 = UIImageView()
		let imgVolumeWhileAnim3Artboard11 = UIImage(named:"volume_whileAnim3_Artboard 11.png", in: bundle, compatibleWith: nil)
		if imgVolumeWhileAnim3Artboard11 == nil {
			print("** Warning: Could not create image from 'volume_whileAnim3_Artboard 11.png'")
		}
		volumeWhileAnim3Artboard11.image = imgVolumeWhileAnim3Artboard11
		volumeWhileAnim3Artboard11.contentMode = .center
		volumeWhileAnim3Artboard11.bounds = CGRect(x:0, y:0, width:2049.0, height:1537.0)
		volumeWhileAnim3Artboard11__root.layer.position = CGPoint(x:1024.070, y:768.812)
		volumeWhileAnim3Artboard11__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		volumeWhileAnim3Artboard11__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		volumeWhileAnim3Artboard11__root.transform = CGAffineTransform(rotationAngle: 0.000)
		volumeWhileAnim3Artboard11__root.addSubview(volumeWhileAnim3Artboard11__xScale)
		volumeWhileAnim3Artboard11__xScale.addSubview(volumeWhileAnim3Artboard11__yScale)
		volumeWhileAnim3Artboard11__yScale.addSubview(volumeWhileAnim3Artboard11)
		__scaling__.addSubview(volumeWhileAnim3Artboard11__root)
		viewsByName["volume_whileAnim3_Artboard 11__root"] = volumeWhileAnim3Artboard11__root
		viewsByName["volume_whileAnim3_Artboard 11__xScale"] = volumeWhileAnim3Artboard11__xScale
		viewsByName["volume_whileAnim3_Artboard 11__yScale"] = volumeWhileAnim3Artboard11__yScale
		viewsByName["volume_whileAnim3_Artboard 11"] = volumeWhileAnim3Artboard11

		let volumeBeforeAnimation2Artboard11__root = _VolumeAnimationPassthroughView()
		let volumeBeforeAnimation2Artboard11__xScale = _VolumeAnimationPassthroughView()
		let volumeBeforeAnimation2Artboard11__yScale = _VolumeAnimationPassthroughView()
		let volumeBeforeAnimation2Artboard11 = UIImageView()
		let imgVolumeBeforeAnimation2Artboard11 = UIImage(named:"Volume_beforeAnimation2_Artboard 11.png", in: bundle, compatibleWith: nil)
		if imgVolumeBeforeAnimation2Artboard11 == nil {
			print("** Warning: Could not create image from 'Volume_beforeAnimation2_Artboard 11.png'")
		}
		volumeBeforeAnimation2Artboard11.image = imgVolumeBeforeAnimation2Artboard11
		volumeBeforeAnimation2Artboard11.contentMode = .center
		volumeBeforeAnimation2Artboard11.bounds = CGRect(x:0, y:0, width:2049.0, height:1537.0)
		volumeBeforeAnimation2Artboard11__root.layer.position = CGPoint(x:1024.070, y:768.812)
		volumeBeforeAnimation2Artboard11__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		volumeBeforeAnimation2Artboard11__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		volumeBeforeAnimation2Artboard11__root.transform = CGAffineTransform(rotationAngle: 0.000)
		volumeBeforeAnimation2Artboard11__root.addSubview(volumeBeforeAnimation2Artboard11__xScale)
		volumeBeforeAnimation2Artboard11__xScale.addSubview(volumeBeforeAnimation2Artboard11__yScale)
		volumeBeforeAnimation2Artboard11__yScale.addSubview(volumeBeforeAnimation2Artboard11)
		__scaling__.addSubview(volumeBeforeAnimation2Artboard11__root)
		viewsByName["Volume_beforeAnimation2_Artboard 11__root"] = volumeBeforeAnimation2Artboard11__root
		viewsByName["Volume_beforeAnimation2_Artboard 11__xScale"] = volumeBeforeAnimation2Artboard11__xScale
		viewsByName["Volume_beforeAnimation2_Artboard 11__yScale"] = volumeBeforeAnimation2Artboard11__yScale
		viewsByName["Volume_beforeAnimation2_Artboard 11"] = volumeBeforeAnimation2Artboard11

		let circle01__root = _VolumeAnimationPassthroughView()
		let circle01__xScale = _VolumeAnimationPassthroughView()
		let circle01__yScale = _VolumeAnimationPassthroughView()
		let circle01 = UIImageView()
		let imgCircle01 = UIImage(named:"Circle-01.png", in: bundle, compatibleWith: nil)
		if imgCircle01 == nil {
			print("** Warning: Could not create image from 'Circle-01.png'")
		}
		circle01.image = imgCircle01
		circle01.contentMode = .center
		circle01.bounds = CGRect(x:0, y:0, width:413.0, height:413.0)
		circle01__root.layer.position = CGPoint(x:554.820, y:1391.464)
		circle01__xScale.transform = CGAffineTransform(scaleX: 0.45, y: 1.00)
		circle01__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.45)
		circle01__root.transform = CGAffineTransform(rotationAngle: 0.000)
		circle01__root.addSubview(circle01__xScale)
		circle01__xScale.addSubview(circle01__yScale)
		circle01__yScale.addSubview(circle01)
		__scaling__.addSubview(circle01__root)
		viewsByName["Circle-01__root"] = circle01__root
		viewsByName["Circle-01__xScale"] = circle01__xScale
		viewsByName["Circle-01__yScale"] = circle01__yScale
		viewsByName["Circle-01"] = circle01

		let circle01Mask__root = _VolumeAnimationPassthroughView()
		let circle01Mask__xScale = _VolumeAnimationPassthroughView()
		let circle01Mask__yScale = _VolumeAnimationPassthroughView()
		let circle01Mask = UIImageView()
		let imgSquare = UIImage(named:"square.png", in: bundle, compatibleWith: nil)
		if imgSquare == nil {
			print("** Warning: Could not create image from 'square.png'")
		}
		circle01Mask.image = imgSquare
		circle01Mask.contentMode = .center
		circle01Mask.bounds = CGRect(x:0, y:0, width:185.0, height:184.5)
		circle01Mask__root.layer.position = CGPoint(x:-43.986, y:247.885)
		circle01Mask__xScale.transform = CGAffineTransform(scaleX: 0.49, y: 1.00)
		circle01Mask__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 2.39)
		circle01Mask__root.transform = CGAffineTransform(rotationAngle: 6.177)
		circle01Mask__root.addSubview(circle01Mask__xScale)
		circle01Mask__xScale.addSubview(circle01Mask__yScale)
		circle01Mask__yScale.addSubview(circle01Mask)
		circle01.mask = circle01Mask__root
		viewsByName["Circle-01_mask__root"] = circle01Mask__root
		viewsByName["Circle-01_mask__xScale"] = circle01Mask__xScale
		viewsByName["Circle-01_mask__yScale"] = circle01Mask__yScale
		viewsByName["Circle-01_mask"] = circle01Mask

		let frame__root = _VolumeAnimationPassthroughView()
		let frame__xScale = _VolumeAnimationPassthroughView()
		let frame__yScale = _VolumeAnimationPassthroughView()
		let frame = UIImageView()
		let imgFrame = UIImage(named:"frame.png", in: bundle, compatibleWith: nil)
		if imgFrame == nil {
			print("** Warning: Could not create image from 'frame.png'")
		}
		frame.image = imgFrame
		frame.contentMode = .center
		frame.bounds = CGRect(x:0, y:0, width:294.0, height:262.0)
		frame__root.layer.position = CGPoint(x:432.037, y:1406.907)
		frame__xScale.transform = CGAffineTransform(scaleX: 0.97, y: 1.00)
		frame__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.89)
		frame__root.transform = CGAffineTransform(rotationAngle: 0.364)
		frame__root.addSubview(frame__xScale)
		frame__xScale.addSubview(frame__yScale)
		frame__yScale.addSubview(frame)
		__scaling__.addSubview(frame__root)
		viewsByName["frame__root"] = frame__root
		viewsByName["frame__xScale"] = frame__xScale
		viewsByName["frame__yScale"] = frame__yScale
		viewsByName["frame"] = frame

		let frameMask__root = _VolumeAnimationPassthroughView()
		let frameMask__xScale = _VolumeAnimationPassthroughView()
		let frameMask__yScale = _VolumeAnimationPassthroughView()
		let frameMask = UIImageView()
		frameMask.image = imgSquare
		frameMask.contentMode = .center
		frameMask.bounds = CGRect(x:0, y:0, width:185.0, height:184.5)
		frameMask__root.layer.position = CGPoint(x:-8.108, y:230.282)
		frameMask__xScale.transform = CGAffineTransform(scaleX: 0.28, y: 1.00)
		frameMask__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.42)
		frameMask__root.transform = CGAffineTransform(rotationAngle: 5.791)
		frameMask__root.addSubview(frameMask__xScale)
		frameMask__xScale.addSubview(frameMask__yScale)
		frameMask__yScale.addSubview(frameMask)
		frame.mask = frameMask__root
		viewsByName["frame_mask__root"] = frameMask__root
		viewsByName["frame_mask__xScale"] = frameMask__xScale
		viewsByName["frame_mask__yScale"] = frameMask__yScale
		viewsByName["frame_mask"] = frameMask

		let volumeAfterAniArtboard11__root = _VolumeAnimationPassthroughView()
		let volumeAfterAniArtboard11__xScale = _VolumeAnimationPassthroughView()
		let volumeAfterAniArtboard11__yScale = _VolumeAnimationPassthroughView()
		let volumeAfterAniArtboard11 = UIImageView()
		let imgVolumeAfterAniArtboard11 = UIImage(named:"Volume_afterAni_Artboard 11.png", in: bundle, compatibleWith: nil)
		if imgVolumeAfterAniArtboard11 == nil {
			print("** Warning: Could not create image from 'Volume_afterAni_Artboard 11.png'")
		}
		volumeAfterAniArtboard11.image = imgVolumeAfterAniArtboard11
		volumeAfterAniArtboard11.contentMode = .center
		volumeAfterAniArtboard11.bounds = CGRect(x:0, y:0, width:2049.0, height:1537.0)
		volumeAfterAniArtboard11__root.layer.position = CGPoint(x:1024.500, y:768.500)
		volumeAfterAniArtboard11__root.alpha = 0.00
		volumeAfterAniArtboard11__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		volumeAfterAniArtboard11__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		volumeAfterAniArtboard11__root.transform = CGAffineTransform(rotationAngle: 0.000)
		volumeAfterAniArtboard11__root.addSubview(volumeAfterAniArtboard11__xScale)
		volumeAfterAniArtboard11__xScale.addSubview(volumeAfterAniArtboard11__yScale)
		volumeAfterAniArtboard11__yScale.addSubview(volumeAfterAniArtboard11)
		__scaling__.addSubview(volumeAfterAniArtboard11__root)
		viewsByName["Volume_afterAni_Artboard 11__root"] = volumeAfterAniArtboard11__root
		viewsByName["Volume_afterAni_Artboard 11__xScale"] = volumeAfterAniArtboard11__xScale
		viewsByName["Volume_afterAni_Artboard 11__yScale"] = volumeAfterAniArtboard11__yScale
		viewsByName["Volume_afterAni_Artboard 11"] = volumeAfterAniArtboard11

		let volumeLines12__root = _VolumeAnimationPassthroughView()
		let volumeLines12__xScale = _VolumeAnimationPassthroughView()
		let volumeLines12__yScale = _VolumeAnimationPassthroughView()
		let volumeLines12 = UIImageView()
		let imgVolumeLines12 = UIImage(named:"Volume_lines-12.png", in: bundle, compatibleWith: nil)
		if imgVolumeLines12 == nil {
			print("** Warning: Could not create image from 'Volume_lines-12.png'")
		}
		volumeLines12.image = imgVolumeLines12
		volumeLines12.contentMode = .center
		volumeLines12.bounds = CGRect(x:0, y:0, width:1292.0, height:1317.0)
		volumeLines12__root.layer.position = CGPoint(x:1093.070, y:708.812)
		volumeLines12__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		volumeLines12__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		volumeLines12__root.transform = CGAffineTransform(rotationAngle: 0.000)
		volumeLines12__root.addSubview(volumeLines12__xScale)
		volumeLines12__xScale.addSubview(volumeLines12__yScale)
		volumeLines12__yScale.addSubview(volumeLines12)
		__scaling__.addSubview(volumeLines12__root)
		viewsByName["Volume_lines-12__root"] = volumeLines12__root
		viewsByName["Volume_lines-12__xScale"] = volumeLines12__xScale
		viewsByName["Volume_lines-12__yScale"] = volumeLines12__yScale
		viewsByName["Volume_lines-12"] = volumeLines12

		let volumeLines12Mask__root = _VolumeAnimationPassthroughView()
		let volumeLines12Mask__xScale = _VolumeAnimationPassthroughView()
		let volumeLines12Mask__yScale = _VolumeAnimationPassthroughView()
		let volumeLines12Mask = UIImageView()
		volumeLines12Mask.image = imgSquare
		volumeLines12Mask.contentMode = .center
		volumeLines12Mask.bounds = CGRect(x:0, y:0, width:185.0, height:184.5)
		volumeLines12Mask__root.layer.position = CGPoint(x:161.898, y:1325.017)
		volumeLines12Mask__xScale.transform = CGAffineTransform(scaleX: 0.23, y: 1.00)
		volumeLines12Mask__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.37)
		volumeLines12Mask__root.transform = CGAffineTransform(rotationAngle: 1.315)
		volumeLines12Mask__root.addSubview(volumeLines12Mask__xScale)
		volumeLines12Mask__xScale.addSubview(volumeLines12Mask__yScale)
		volumeLines12Mask__yScale.addSubview(volumeLines12Mask)
		volumeLines12.mask = volumeLines12Mask__root
		viewsByName["Volume_lines-12_mask__root"] = volumeLines12Mask__root
		viewsByName["Volume_lines-12_mask__xScale"] = volumeLines12Mask__xScale
		viewsByName["Volume_lines-12_mask__yScale"] = volumeLines12Mask__yScale
		viewsByName["Volume_lines-12_mask"] = volumeLines12Mask

		let volumeLines122__root = _VolumeAnimationPassthroughView()
		let volumeLines122__xScale = _VolumeAnimationPassthroughView()
		let volumeLines122__yScale = _VolumeAnimationPassthroughView()
		let volumeLines122 = UIImageView()
		volumeLines122.image = imgVolumeLines12
		volumeLines122.contentMode = .center
		volumeLines122.bounds = CGRect(x:0, y:0, width:1292.0, height:1317.0)
		volumeLines122__root.layer.position = CGPoint(x:1093.070, y:708.812)
		volumeLines122__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		volumeLines122__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		volumeLines122__root.transform = CGAffineTransform(rotationAngle: 0.000)
		volumeLines122__root.addSubview(volumeLines122__xScale)
		volumeLines122__xScale.addSubview(volumeLines122__yScale)
		volumeLines122__yScale.addSubview(volumeLines122)
		__scaling__.addSubview(volumeLines122__root)
		viewsByName["Volume_lines-12 2__root"] = volumeLines122__root
		viewsByName["Volume_lines-12 2__xScale"] = volumeLines122__xScale
		viewsByName["Volume_lines-12 2__yScale"] = volumeLines122__yScale
		viewsByName["Volume_lines-12 2"] = volumeLines122

		let volumeLines122Mask__root = _VolumeAnimationPassthroughView()
		let volumeLines122Mask__xScale = _VolumeAnimationPassthroughView()
		let volumeLines122Mask__yScale = _VolumeAnimationPassthroughView()
		let volumeLines122Mask = UIImageView()
		volumeLines122Mask.image = imgSquare
		volumeLines122Mask.contentMode = .center
		volumeLines122Mask.bounds = CGRect(x:0, y:0, width:185.0, height:184.5)
		volumeLines122Mask__root.layer.position = CGPoint(x:589.734, y:150.955)
		volumeLines122Mask__root.alpha = 0.00
		volumeLines122Mask__xScale.transform = CGAffineTransform(scaleX: 0.01, y: 1.00)
		volumeLines122Mask__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 2.01)
		volumeLines122Mask__root.transform = CGAffineTransform(rotationAngle: 0.669)
		volumeLines122Mask__root.addSubview(volumeLines122Mask__xScale)
		volumeLines122Mask__xScale.addSubview(volumeLines122Mask__yScale)
		volumeLines122Mask__yScale.addSubview(volumeLines122Mask)
		volumeLines122.mask = volumeLines122Mask__root
		viewsByName["Volume_lines-12 2_mask__root"] = volumeLines122Mask__root
		viewsByName["Volume_lines-12 2_mask__xScale"] = volumeLines122Mask__xScale
		viewsByName["Volume_lines-12 2_mask__yScale"] = volumeLines122Mask__yScale
		viewsByName["Volume_lines-12 2_mask"] = volumeLines122Mask

		let mic01__root = _VolumeAnimationPassthroughView()
		let mic01__xScale = _VolumeAnimationPassthroughView()
		let mic01__yScale = _VolumeAnimationPassthroughView()
		let mic01 = UIImageView()
		let imgMic01 = UIImage(named:"mic-01.png", in: bundle, compatibleWith: nil)
		if imgMic01 == nil {
			print("** Warning: Could not create image from 'mic-01.png'")
		}
		mic01.image = imgMic01
		mic01.contentMode = .center
		mic01.bounds = CGRect(x:0, y:0, width:226.0, height:227.0)
		mic01__root.layer.position = CGPoint(x:1320.508, y:1144.078)
		mic01__root.alpha = 0.10
		mic01__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		mic01__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		mic01__root.transform = CGAffineTransform(rotationAngle: 0.000)
		mic01__root.addSubview(mic01__xScale)
		mic01__xScale.addSubview(mic01__yScale)
		mic01__yScale.addSubview(mic01)
		__scaling__.addSubview(mic01__root)
		viewsByName["mic-01__root"] = mic01__root
		viewsByName["mic-01__xScale"] = mic01__xScale
		viewsByName["mic-01__yScale"] = mic01__yScale
		viewsByName["mic-01"] = mic01

		let volumedown01__root = _VolumeAnimationPassthroughView()
		let volumedown01__xScale = _VolumeAnimationPassthroughView()
		let volumedown01__yScale = _VolumeAnimationPassthroughView()
		let volumedown01 = UIImageView()
		let imgVolumedown01 = UIImage(named:"volumedown-01.png", in: bundle, compatibleWith: nil)
		if imgVolumedown01 == nil {
			print("** Warning: Could not create image from 'volumedown-01.png'")
		}
		volumedown01.image = imgVolumedown01
		volumedown01.contentMode = .center
		volumedown01.bounds = CGRect(x:0, y:0, width:226.0, height:227.0)
		volumedown01__root.layer.position = CGPoint(x:1047.070, y:912.312)
		volumedown01__root.alpha = 0.10
		volumedown01__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		volumedown01__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		volumedown01__root.transform = CGAffineTransform(rotationAngle: 0.000)
		volumedown01__root.addSubview(volumedown01__xScale)
		volumedown01__xScale.addSubview(volumedown01__yScale)
		volumedown01__yScale.addSubview(volumedown01)
		__scaling__.addSubview(volumedown01__root)
		viewsByName["volumedown-01__root"] = volumedown01__root
		viewsByName["volumedown-01__xScale"] = volumedown01__xScale
		viewsByName["volumedown-01__yScale"] = volumedown01__yScale
		viewsByName["volumedown-01"] = volumedown01

		let volumeup01__root = _VolumeAnimationPassthroughView()
		let volumeup01__xScale = _VolumeAnimationPassthroughView()
		let volumeup01__yScale = _VolumeAnimationPassthroughView()
		let volumeup01 = UIImageView()
		let imgVolumeup01 = UIImage(named:"volumeup-01.png", in: bundle, compatibleWith: nil)
		if imgVolumeup01 == nil {
			print("** Warning: Could not create image from 'volumeup-01.png'")
		}
		volumeup01.image = imgVolumeup01
		volumeup01.contentMode = .center
		volumeup01.bounds = CGRect(x:0, y:0, width:226.0, height:227.0)
		volumeup01__root.layer.position = CGPoint(x:1046.070, y:483.938)
		volumeup01__root.alpha = 0.10
		volumeup01__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		volumeup01__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		volumeup01__root.transform = CGAffineTransform(rotationAngle: 0.000)
		volumeup01__root.addSubview(volumeup01__xScale)
		volumeup01__xScale.addSubview(volumeup01__yScale)
		volumeup01__yScale.addSubview(volumeup01)
		__scaling__.addSubview(volumeup01__root)
		viewsByName["volumeup-01__root"] = volumeup01__root
		viewsByName["volumeup-01__xScale"] = volumeup01__xScale
		viewsByName["volumeup-01__yScale"] = volumeup01__yScale
		viewsByName["volumeup-01"] = volumeup01

		let menuIcons03__root = _VolumeAnimationPassthroughView()
		let menuIcons03__xScale = _VolumeAnimationPassthroughView()
		let menuIcons03__yScale = _VolumeAnimationPassthroughView()
		let menuIcons03 = UIImageView()
		let imgMenuIcons03 = UIImage(named:"menu_icons-03.png", in: bundle, compatibleWith: nil)
		if imgMenuIcons03 == nil {
			print("** Warning: Could not create image from 'menu_icons-03.png'")
		}
		menuIcons03.image = imgMenuIcons03
		menuIcons03.contentMode = .center
		menuIcons03.bounds = CGRect(x:0, y:0, width:642.0, height:642.0)
		menuIcons03__root.layer.position = CGPoint(x:479.124, y:1200.610)
		menuIcons03__root.alpha = 0.10
		menuIcons03__xScale.transform = CGAffineTransform(scaleX: 0.24, y: 1.00)
		menuIcons03__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.24)
		menuIcons03__root.transform = CGAffineTransform(rotationAngle: 0.000)
		menuIcons03__root.addSubview(menuIcons03__xScale)
		menuIcons03__xScale.addSubview(menuIcons03__yScale)
		menuIcons03__yScale.addSubview(menuIcons03)
		__scaling__.addSubview(menuIcons03__root)
		viewsByName["menu_icons-03__root"] = menuIcons03__root
		viewsByName["menu_icons-03__xScale"] = menuIcons03__xScale
		viewsByName["menu_icons-03__yScale"] = menuIcons03__yScale
		viewsByName["menu_icons-03"] = menuIcons03

		let menuIcons02__root = _VolumeAnimationPassthroughView()
		let menuIcons02__xScale = _VolumeAnimationPassthroughView()
		let menuIcons02__yScale = _VolumeAnimationPassthroughView()
		let menuIcons02 = UIImageView()
		let imgMenuIcons02 = UIImage(named:"menu_icons-02.png", in: bundle, compatibleWith: nil)
		if imgMenuIcons02 == nil {
			print("** Warning: Could not create image from 'menu_icons-02.png'")
		}
		menuIcons02.image = imgMenuIcons02
		menuIcons02.contentMode = .center
		menuIcons02.layer.anchorPoint = CGPoint(x:0.493, y:0.478)
		menuIcons02.bounds = CGRect(x:0, y:0, width:642.0, height:642.0)
		menuIcons02__root.layer.position = CGPoint(x:332.216, y:1052.481)
		menuIcons02__root.alpha = 0.10
		menuIcons02__xScale.transform = CGAffineTransform(scaleX: 0.24, y: 1.00)
		menuIcons02__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.24)
		menuIcons02__root.transform = CGAffineTransform(rotationAngle: 0.000)
		menuIcons02__root.addSubview(menuIcons02__xScale)
		menuIcons02__xScale.addSubview(menuIcons02__yScale)
		menuIcons02__yScale.addSubview(menuIcons02)
		__scaling__.addSubview(menuIcons02__root)
		viewsByName["menu_icons-02__root"] = menuIcons02__root
		viewsByName["menu_icons-02__xScale"] = menuIcons02__xScale
		viewsByName["menu_icons-02__yScale"] = menuIcons02__yScale
		viewsByName["menu_icons-02"] = menuIcons02

		let menuIcons01__root = _VolumeAnimationPassthroughView()
		let menuIcons01__xScale = _VolumeAnimationPassthroughView()
		let menuIcons01__yScale = _VolumeAnimationPassthroughView()
		let menuIcons01 = UIImageView()
		let imgMenuIcons01 = UIImage(named:"menu_icons-01.png", in: bundle, compatibleWith: nil)
		if imgMenuIcons01 == nil {
			print("** Warning: Could not create image from 'menu_icons-01.png'")
		}
		menuIcons01.image = imgMenuIcons01
		menuIcons01.contentMode = .center
		menuIcons01.bounds = CGRect(x:0, y:0, width:642.0, height:642.0)
		menuIcons01__root.layer.position = CGPoint(x:143.935, y:975.289)
		menuIcons01__root.alpha = 0.10
		menuIcons01__xScale.transform = CGAffineTransform(scaleX: 0.24, y: 1.00)
		menuIcons01__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.24)
		menuIcons01__root.transform = CGAffineTransform(rotationAngle: 0.000)
		menuIcons01__root.addSubview(menuIcons01__xScale)
		menuIcons01__xScale.addSubview(menuIcons01__yScale)
		menuIcons01__yScale.addSubview(menuIcons01)
		__scaling__.addSubview(menuIcons01__root)
		viewsByName["menu_icons-01__root"] = menuIcons01__root
		viewsByName["menu_icons-01__xScale"] = menuIcons01__xScale
		viewsByName["menu_icons-01__yScale"] = menuIcons01__yScale
		viewsByName["menu_icons-01"] = menuIcons01

		self.viewsByName = viewsByName
	}

	// - MARK: VolumeAnimation

	func addVolumeAnimation() {
		addVolumeAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addVolumeAnimation(completion: ((Bool) -> Void)?) {
		addVolumeAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addVolumeAnimation(removedOnCompletion: Bool) {
		addVolumeAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addVolumeAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addVolumeAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addVolumeAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let instantTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionDefault)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 1.725
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "VolumeAnimation")
			self.animationCompletions[layer.animation(forKey: "VolumeAnimation")!] = complete
		}

		let menuIcons02ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		menuIcons02ScaleXAnimation.duration = 1.725
		menuIcons02ScaleXAnimation.values = [0.239, 0.239, 0.162, 0.162] as [Float]
		menuIcons02ScaleXAnimation.keyTimes = [0.000, 0.203, 0.406, 1.000] as [NSNumber]
		menuIcons02ScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		menuIcons02ScaleXAnimation.beginTime = beginTime
		menuIcons02ScaleXAnimation.fillMode = fillMode
		menuIcons02ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-02__xScale"]?.layer.add(menuIcons02ScaleXAnimation, forKey:"VolumeAnimation_ScaleX")

		let menuIcons02ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		menuIcons02ScaleYAnimation.duration = 1.725
		menuIcons02ScaleYAnimation.values = [0.239, 0.239, 0.162, 0.162] as [Float]
		menuIcons02ScaleYAnimation.keyTimes = [0.000, 0.203, 0.406, 1.000] as [NSNumber]
		menuIcons02ScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		menuIcons02ScaleYAnimation.beginTime = beginTime
		menuIcons02ScaleYAnimation.fillMode = fillMode
		menuIcons02ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-02__yScale"]?.layer.add(menuIcons02ScaleYAnimation, forKey:"VolumeAnimation_ScaleY")

		let menuIcons02TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		menuIcons02TranslationXAnimation.duration = 1.725
		menuIcons02TranslationXAnimation.values = [0.000, 0.000, -108.068, -108.068] as [Float]
		menuIcons02TranslationXAnimation.keyTimes = [0.000, 0.203, 0.406, 1.000] as [NSNumber]
		menuIcons02TranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		menuIcons02TranslationXAnimation.beginTime = beginTime
		menuIcons02TranslationXAnimation.fillMode = fillMode
		menuIcons02TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-02__root"]?.layer.add(menuIcons02TranslationXAnimation, forKey:"VolumeAnimation_TranslationX")

		let menuIcons02TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		menuIcons02TranslationYAnimation.duration = 1.725
		menuIcons02TranslationYAnimation.values = [0.000, 0.000, 160.764, 160.764] as [Float]
		menuIcons02TranslationYAnimation.keyTimes = [0.000, 0.203, 0.406, 1.000] as [NSNumber]
		menuIcons02TranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		menuIcons02TranslationYAnimation.beginTime = beginTime
		menuIcons02TranslationYAnimation.fillMode = fillMode
		menuIcons02TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-02__root"]?.layer.add(menuIcons02TranslationYAnimation, forKey:"VolumeAnimation_TranslationY")

		let volumeLines12MaskRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		volumeLines12MaskRotationAnimation.duration = 1.725
		volumeLines12MaskRotationAnimation.values = [1.315, 1.315, 2.209, 2.209] as [Float]
		volumeLines12MaskRotationAnimation.keyTimes = [0.000, 0.217, 0.391, 1.000] as [NSNumber]
		volumeLines12MaskRotationAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		volumeLines12MaskRotationAnimation.beginTime = beginTime
		volumeLines12MaskRotationAnimation.fillMode = fillMode
		volumeLines12MaskRotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Volume_lines-12_mask__root"]?.layer.add(volumeLines12MaskRotationAnimation, forKey:"VolumeAnimation_Rotation")

		let volumeLines12MaskScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		volumeLines12MaskScaleXAnimation.duration = 1.725
		volumeLines12MaskScaleXAnimation.values = [0.229, 0.229, 0.794, 0.992, 0.992] as [Float]
		volumeLines12MaskScaleXAnimation.keyTimes = [0.000, 0.217, 0.304, 0.391, 1.000] as [NSNumber]
		volumeLines12MaskScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		volumeLines12MaskScaleXAnimation.beginTime = beginTime
		volumeLines12MaskScaleXAnimation.fillMode = fillMode
		volumeLines12MaskScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Volume_lines-12_mask__xScale"]?.layer.add(volumeLines12MaskScaleXAnimation, forKey:"VolumeAnimation_ScaleX")

		let volumeLines12MaskScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		volumeLines12MaskScaleYAnimation.duration = 1.725
		volumeLines12MaskScaleYAnimation.values = [0.366, 0.366, 0.539, 0.245, 0.245] as [Float]
		volumeLines12MaskScaleYAnimation.keyTimes = [0.000, 0.217, 0.391, 0.493, 1.000] as [NSNumber]
		volumeLines12MaskScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		volumeLines12MaskScaleYAnimation.beginTime = beginTime
		volumeLines12MaskScaleYAnimation.fillMode = fillMode
		volumeLines12MaskScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Volume_lines-12_mask__yScale"]?.layer.add(volumeLines12MaskScaleYAnimation, forKey:"VolumeAnimation_ScaleY")

		let volumeLines12MaskTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		volumeLines12MaskTranslationXAnimation.duration = 1.725
		volumeLines12MaskTranslationXAnimation.values = [0.000, 0.000, 159.214, 91.388, 4.489, -99.185, -175.904, -6.662, 236.099, 583.510, 583.510] as [Float]
		volumeLines12MaskTranslationXAnimation.keyTimes = [0.000, 0.246, 0.275, 0.304, 0.348, 0.391, 0.391, 0.435, 0.493, 0.536, 1.000] as [NSNumber]
		volumeLines12MaskTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		volumeLines12MaskTranslationXAnimation.beginTime = beginTime
		volumeLines12MaskTranslationXAnimation.fillMode = fillMode
		volumeLines12MaskTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Volume_lines-12_mask__root"]?.layer.add(volumeLines12MaskTranslationXAnimation, forKey:"VolumeAnimation_TranslationX")

		let volumeLines12MaskTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		volumeLines12MaskTranslationYAnimation.duration = 1.725
		volumeLines12MaskTranslationYAnimation.values = [0.000, 0.000, -32.275, -141.691, -289.409, -464.204, -393.274, -662.774, -979.633, -1403.368, -1403.368] as [Float]
		volumeLines12MaskTranslationYAnimation.keyTimes = [0.000, 0.246, 0.275, 0.304, 0.348, 0.391, 0.391, 0.435, 0.493, 0.536, 1.000] as [NSNumber]
		volumeLines12MaskTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		volumeLines12MaskTranslationYAnimation.beginTime = beginTime
		volumeLines12MaskTranslationYAnimation.fillMode = fillMode
		volumeLines12MaskTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Volume_lines-12_mask__root"]?.layer.add(volumeLines12MaskTranslationYAnimation, forKey:"VolumeAnimation_TranslationY")

		let menuIcons01ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		menuIcons01ScaleXAnimation.duration = 1.725
		menuIcons01ScaleXAnimation.values = [0.242, 0.156, 0.156] as [Float]
		menuIcons01ScaleXAnimation.keyTimes = [0.000, 0.203, 1.000] as [NSNumber]
		menuIcons01ScaleXAnimation.timingFunctions = [linearTiming, linearTiming]
		menuIcons01ScaleXAnimation.beginTime = beginTime
		menuIcons01ScaleXAnimation.fillMode = fillMode
		menuIcons01ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-01__xScale"]?.layer.add(menuIcons01ScaleXAnimation, forKey:"VolumeAnimation_ScaleX")

		let menuIcons01ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		menuIcons01ScaleYAnimation.duration = 1.725
		menuIcons01ScaleYAnimation.values = [0.242, 0.156, 0.156] as [Float]
		menuIcons01ScaleYAnimation.keyTimes = [0.000, 0.203, 1.000] as [NSNumber]
		menuIcons01ScaleYAnimation.timingFunctions = [linearTiming, linearTiming]
		menuIcons01ScaleYAnimation.beginTime = beginTime
		menuIcons01ScaleYAnimation.fillMode = fillMode
		menuIcons01ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-01__yScale"]?.layer.add(menuIcons01ScaleYAnimation, forKey:"VolumeAnimation_ScaleY")

		let menuIcons01TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		menuIcons01TranslationXAnimation.duration = 1.725
		menuIcons01TranslationXAnimation.values = [0.000, -49.268, -49.268] as [Float]
		menuIcons01TranslationXAnimation.keyTimes = [0.000, 0.203, 1.000] as [NSNumber]
		menuIcons01TranslationXAnimation.timingFunctions = [linearTiming, linearTiming]
		menuIcons01TranslationXAnimation.beginTime = beginTime
		menuIcons01TranslationXAnimation.fillMode = fillMode
		menuIcons01TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-01__root"]?.layer.add(menuIcons01TranslationXAnimation, forKey:"VolumeAnimation_TranslationX")

		let menuIcons01TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		menuIcons01TranslationYAnimation.duration = 1.725
		menuIcons01TranslationYAnimation.values = [0.000, 214.396, 214.396] as [Float]
		menuIcons01TranslationYAnimation.keyTimes = [0.000, 0.203, 1.000] as [NSNumber]
		menuIcons01TranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
		menuIcons01TranslationYAnimation.beginTime = beginTime
		menuIcons01TranslationYAnimation.fillMode = fillMode
		menuIcons01TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-01__root"]?.layer.add(menuIcons01TranslationYAnimation, forKey:"VolumeAnimation_TranslationY")

		let volumeup01OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		volumeup01OpacityAnimation.duration = 1.725
		volumeup01OpacityAnimation.values = [0.100, 0.100, 1.000, 1.000] as [Float]
		volumeup01OpacityAnimation.keyTimes = [0.000, 0.536, 0.609, 1.000] as [NSNumber]
		volumeup01OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		volumeup01OpacityAnimation.beginTime = beginTime
		volumeup01OpacityAnimation.fillMode = fillMode
		volumeup01OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["volumeup-01__root"]?.layer.add(volumeup01OpacityAnimation, forKey:"VolumeAnimation_Opacity")

		let circle01MaskTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		circle01MaskTranslationXAnimation.duration = 1.725
		circle01MaskTranslationXAnimation.values = [0.000, 0.000, 517.499, 517.499] as [Float]
		circle01MaskTranslationXAnimation.keyTimes = [0.000, 0.130, 0.275, 1.000] as [NSNumber]
		circle01MaskTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		circle01MaskTranslationXAnimation.beginTime = beginTime
		circle01MaskTranslationXAnimation.fillMode = fillMode
		circle01MaskTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Circle-01_mask__root"]?.layer.add(circle01MaskTranslationXAnimation, forKey:"VolumeAnimation_TranslationX")

		let circle01MaskTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		circle01MaskTranslationYAnimation.duration = 1.725
		circle01MaskTranslationYAnimation.values = [0.000, 0.000, -84.271, -84.271] as [Float]
		circle01MaskTranslationYAnimation.keyTimes = [0.000, 0.130, 0.275, 1.000] as [NSNumber]
		circle01MaskTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		circle01MaskTranslationYAnimation.beginTime = beginTime
		circle01MaskTranslationYAnimation.fillMode = fillMode
		circle01MaskTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Circle-01_mask__root"]?.layer.add(circle01MaskTranslationYAnimation, forKey:"VolumeAnimation_TranslationY")

		let mic01OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		mic01OpacityAnimation.duration = 1.725
		mic01OpacityAnimation.values = [0.100, 0.100, 1.000, 1.000] as [Float]
		mic01OpacityAnimation.keyTimes = [0.000, 0.797, 0.841, 1.000] as [NSNumber]
		mic01OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		mic01OpacityAnimation.beginTime = beginTime
		mic01OpacityAnimation.fillMode = fillMode
		mic01OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["mic-01__root"]?.layer.add(mic01OpacityAnimation, forKey:"VolumeAnimation_Opacity")

		let volumedown01OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		volumedown01OpacityAnimation.duration = 1.725
		volumedown01OpacityAnimation.values = [0.100, 0.100, 1.000, 1.000] as [Float]
		volumedown01OpacityAnimation.keyTimes = [0.000, 0.696, 0.768, 1.000] as [NSNumber]
		volumedown01OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		volumedown01OpacityAnimation.beginTime = beginTime
		volumedown01OpacityAnimation.fillMode = fillMode
		volumedown01OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["volumedown-01__root"]?.layer.add(volumedown01OpacityAnimation, forKey:"VolumeAnimation_Opacity")

		let menuIcons03ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		menuIcons03ScaleXAnimation.duration = 1.725
		menuIcons03ScaleXAnimation.values = [0.243, 0.243, 0.148, 0.148] as [Float]
		menuIcons03ScaleXAnimation.keyTimes = [0.000, 0.406, 0.609, 1.000] as [NSNumber]
		menuIcons03ScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		menuIcons03ScaleXAnimation.beginTime = beginTime
		menuIcons03ScaleXAnimation.fillMode = fillMode
		menuIcons03ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-03__xScale"]?.layer.add(menuIcons03ScaleXAnimation, forKey:"VolumeAnimation_ScaleX")

		let menuIcons03ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		menuIcons03ScaleYAnimation.duration = 1.725
		menuIcons03ScaleYAnimation.values = [0.243, 0.243, 0.148, 0.148] as [Float]
		menuIcons03ScaleYAnimation.keyTimes = [0.000, 0.406, 0.609, 1.000] as [NSNumber]
		menuIcons03ScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		menuIcons03ScaleYAnimation.beginTime = beginTime
		menuIcons03ScaleYAnimation.fillMode = fillMode
		menuIcons03ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-03__yScale"]?.layer.add(menuIcons03ScaleYAnimation, forKey:"VolumeAnimation_ScaleY")

		let menuIcons03TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		menuIcons03TranslationXAnimation.duration = 1.725
		menuIcons03TranslationXAnimation.values = [0.000, 0.000, -169.671, -169.671] as [Float]
		menuIcons03TranslationXAnimation.keyTimes = [0.000, 0.406, 0.609, 1.000] as [NSNumber]
		menuIcons03TranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		menuIcons03TranslationXAnimation.beginTime = beginTime
		menuIcons03TranslationXAnimation.fillMode = fillMode
		menuIcons03TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-03__root"]?.layer.add(menuIcons03TranslationXAnimation, forKey:"VolumeAnimation_TranslationX")

		let menuIcons03TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		menuIcons03TranslationYAnimation.duration = 1.725
		menuIcons03TranslationYAnimation.values = [0.000, 0.000, 114.015, 114.015] as [Float]
		menuIcons03TranslationYAnimation.keyTimes = [0.000, 0.406, 0.609, 1.000] as [NSNumber]
		menuIcons03TranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		menuIcons03TranslationYAnimation.beginTime = beginTime
		menuIcons03TranslationYAnimation.fillMode = fillMode
		menuIcons03TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-03__root"]?.layer.add(menuIcons03TranslationYAnimation, forKey:"VolumeAnimation_TranslationY")

		let volumeBeforeAnimation2Artboard11OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		volumeBeforeAnimation2Artboard11OpacityAnimation.duration = 1.725
		volumeBeforeAnimation2Artboard11OpacityAnimation.values = [1.000, 0.000, 0.000] as [Float]
		volumeBeforeAnimation2Artboard11OpacityAnimation.keyTimes = [0.000, 0.043, 1.000] as [NSNumber]
		volumeBeforeAnimation2Artboard11OpacityAnimation.timingFunctions = [linearTiming, linearTiming]
		volumeBeforeAnimation2Artboard11OpacityAnimation.beginTime = beginTime
		volumeBeforeAnimation2Artboard11OpacityAnimation.fillMode = fillMode
		volumeBeforeAnimation2Artboard11OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Volume_beforeAnimation2_Artboard 11__root"]?.layer.add(volumeBeforeAnimation2Artboard11OpacityAnimation, forKey:"VolumeAnimation_Opacity")

		let frameMaskTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		frameMaskTranslationXAnimation.duration = 1.725
		frameMaskTranslationXAnimation.values = [0.000, 277.369, 277.369] as [Float]
		frameMaskTranslationXAnimation.keyTimes = [0.000, 0.217, 1.000] as [NSNumber]
		frameMaskTranslationXAnimation.timingFunctions = [linearTiming, linearTiming]
		frameMaskTranslationXAnimation.beginTime = beginTime
		frameMaskTranslationXAnimation.fillMode = fillMode
		frameMaskTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["frame_mask__root"]?.layer.add(frameMaskTranslationXAnimation, forKey:"VolumeAnimation_TranslationX")

		let frameMaskTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		frameMaskTranslationYAnimation.duration = 1.725
		frameMaskTranslationYAnimation.values = [0.000, -172.386, -172.386] as [Float]
		frameMaskTranslationYAnimation.keyTimes = [0.000, 0.217, 1.000] as [NSNumber]
		frameMaskTranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
		frameMaskTranslationYAnimation.beginTime = beginTime
		frameMaskTranslationYAnimation.fillMode = fillMode
		frameMaskTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["frame_mask__root"]?.layer.add(frameMaskTranslationYAnimation, forKey:"VolumeAnimation_TranslationY")

		let volumeLines122MaskRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		volumeLines122MaskRotationAnimation.duration = 1.725
		volumeLines122MaskRotationAnimation.values = [0.669, 0.669, 0.921, 1.196, 1.502, 2.618, 2.618] as [Float]
		volumeLines122MaskRotationAnimation.keyTimes = [0.000, 0.551, 0.594, 0.638, 0.783, 0.812, 1.000] as [NSNumber]
		volumeLines122MaskRotationAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		volumeLines122MaskRotationAnimation.beginTime = beginTime
		volumeLines122MaskRotationAnimation.fillMode = fillMode
		volumeLines122MaskRotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Volume_lines-12 2_mask__root"]?.layer.add(volumeLines122MaskRotationAnimation, forKey:"VolumeAnimation_Rotation")

		let volumeLines122MaskOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		volumeLines122MaskOpacityAnimation.duration = 1.725
		volumeLines122MaskOpacityAnimation.values = [0.000, 0.000, 1.000, 1.000] as [Float]
		volumeLines122MaskOpacityAnimation.keyTimes = [0.000, 0.507, 0.507, 1.000] as [NSNumber]
		volumeLines122MaskOpacityAnimation.timingFunctions = [instantTiming, instantTiming, linearTiming]
		volumeLines122MaskOpacityAnimation.beginTime = beginTime
		volumeLines122MaskOpacityAnimation.fillMode = fillMode
		volumeLines122MaskOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Volume_lines-12 2_mask__root"]?.layer.add(volumeLines122MaskOpacityAnimation, forKey:"VolumeAnimation_Opacity")

		let volumeLines122MaskScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		volumeLines122MaskScaleXAnimation.duration = 1.725
		volumeLines122MaskScaleXAnimation.values = [0.005, 0.005, -0.454, -0.824, -0.824] as [Float]
		volumeLines122MaskScaleXAnimation.keyTimes = [0.000, 0.507, 0.551, 0.638, 1.000] as [NSNumber]
		volumeLines122MaskScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		volumeLines122MaskScaleXAnimation.beginTime = beginTime
		volumeLines122MaskScaleXAnimation.fillMode = fillMode
		volumeLines122MaskScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Volume_lines-12 2_mask__xScale"]?.layer.add(volumeLines122MaskScaleXAnimation, forKey:"VolumeAnimation_ScaleX")

		let volumeLines122MaskScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		volumeLines122MaskScaleYAnimation.duration = 1.725
		volumeLines122MaskScaleYAnimation.values = [2.013, 2.013, 2.643, 3.192, 3.192, 2.372, 2.372] as [Float]
		volumeLines122MaskScaleYAnimation.keyTimes = [0.000, 0.551, 0.594, 0.681, 0.710, 0.710, 1.000] as [NSNumber]
		volumeLines122MaskScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, instantTiming, instantTiming, linearTiming]
		volumeLines122MaskScaleYAnimation.beginTime = beginTime
		volumeLines122MaskScaleYAnimation.fillMode = fillMode
		volumeLines122MaskScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Volume_lines-12 2_mask__yScale"]?.layer.add(volumeLines122MaskScaleYAnimation, forKey:"VolumeAnimation_ScaleY")

		let volumeLines122MaskTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		volumeLines122MaskTranslationXAnimation.duration = 1.725
		volumeLines122MaskTranslationXAnimation.values = [0.000, 0.000, 33.345, 252.915, 359.179, 412.327, 506.640, 717.835, 582.830, 321.252, 321.252] as [Float]
		volumeLines122MaskTranslationXAnimation.keyTimes = [0.000, 0.507, 0.551, 0.594, 0.638, 0.710, 0.739, 0.783, 0.812, 0.841, 1.000] as [NSNumber]
		volumeLines122MaskTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		volumeLines122MaskTranslationXAnimation.beginTime = beginTime
		volumeLines122MaskTranslationXAnimation.fillMode = fillMode
		volumeLines122MaskTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Volume_lines-12 2_mask__root"]?.layer.add(volumeLines122MaskTranslationXAnimation, forKey:"VolumeAnimation_TranslationX")

		let volumeLines122MaskTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		volumeLines122MaskTranslationYAnimation.duration = 1.725
		volumeLines122MaskTranslationYAnimation.values = [0.000, 0.000, 26.339, 310.069, 475.073, 594.010, 704.940, 776.526, 871.266, 946.805, 946.805] as [Float]
		volumeLines122MaskTranslationYAnimation.keyTimes = [0.000, 0.507, 0.551, 0.594, 0.638, 0.710, 0.739, 0.783, 0.812, 0.841, 1.000] as [NSNumber]
		volumeLines122MaskTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		volumeLines122MaskTranslationYAnimation.beginTime = beginTime
		volumeLines122MaskTranslationYAnimation.fillMode = fillMode
		volumeLines122MaskTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Volume_lines-12 2_mask__root"]?.layer.add(volumeLines122MaskTranslationYAnimation, forKey:"VolumeAnimation_TranslationY")
	}

	func removeVolumeAnimation() {
		self.layer.removeAnimation(forKey: "VolumeAnimation")
		self.viewsByName["menu_icons-02__xScale"]?.layer.removeAnimation(forKey: "VolumeAnimation_ScaleX")
		self.viewsByName["menu_icons-02__yScale"]?.layer.removeAnimation(forKey: "VolumeAnimation_ScaleY")
		self.viewsByName["menu_icons-02__root"]?.layer.removeAnimation(forKey: "VolumeAnimation_TranslationX")
		self.viewsByName["menu_icons-02__root"]?.layer.removeAnimation(forKey: "VolumeAnimation_TranslationY")
		self.viewsByName["Volume_lines-12_mask__root"]?.layer.removeAnimation(forKey: "VolumeAnimation_Rotation")
		self.viewsByName["Volume_lines-12_mask__xScale"]?.layer.removeAnimation(forKey: "VolumeAnimation_ScaleX")
		self.viewsByName["Volume_lines-12_mask__yScale"]?.layer.removeAnimation(forKey: "VolumeAnimation_ScaleY")
		self.viewsByName["Volume_lines-12_mask__root"]?.layer.removeAnimation(forKey: "VolumeAnimation_TranslationX")
		self.viewsByName["Volume_lines-12_mask__root"]?.layer.removeAnimation(forKey: "VolumeAnimation_TranslationY")
		self.viewsByName["menu_icons-01__xScale"]?.layer.removeAnimation(forKey: "VolumeAnimation_ScaleX")
		self.viewsByName["menu_icons-01__yScale"]?.layer.removeAnimation(forKey: "VolumeAnimation_ScaleY")
		self.viewsByName["menu_icons-01__root"]?.layer.removeAnimation(forKey: "VolumeAnimation_TranslationX")
		self.viewsByName["menu_icons-01__root"]?.layer.removeAnimation(forKey: "VolumeAnimation_TranslationY")
		self.viewsByName["volumeup-01__root"]?.layer.removeAnimation(forKey: "VolumeAnimation_Opacity")
		self.viewsByName["Circle-01_mask__root"]?.layer.removeAnimation(forKey: "VolumeAnimation_TranslationX")
		self.viewsByName["Circle-01_mask__root"]?.layer.removeAnimation(forKey: "VolumeAnimation_TranslationY")
		self.viewsByName["mic-01__root"]?.layer.removeAnimation(forKey: "VolumeAnimation_Opacity")
		self.viewsByName["volumedown-01__root"]?.layer.removeAnimation(forKey: "VolumeAnimation_Opacity")
		self.viewsByName["menu_icons-03__xScale"]?.layer.removeAnimation(forKey: "VolumeAnimation_ScaleX")
		self.viewsByName["menu_icons-03__yScale"]?.layer.removeAnimation(forKey: "VolumeAnimation_ScaleY")
		self.viewsByName["menu_icons-03__root"]?.layer.removeAnimation(forKey: "VolumeAnimation_TranslationX")
		self.viewsByName["menu_icons-03__root"]?.layer.removeAnimation(forKey: "VolumeAnimation_TranslationY")
		self.viewsByName["Volume_beforeAnimation2_Artboard 11__root"]?.layer.removeAnimation(forKey: "VolumeAnimation_Opacity")
		self.viewsByName["frame_mask__root"]?.layer.removeAnimation(forKey: "VolumeAnimation_TranslationX")
		self.viewsByName["frame_mask__root"]?.layer.removeAnimation(forKey: "VolumeAnimation_TranslationY")
		self.viewsByName["Volume_lines-12 2_mask__root"]?.layer.removeAnimation(forKey: "VolumeAnimation_Rotation")
		self.viewsByName["Volume_lines-12 2_mask__root"]?.layer.removeAnimation(forKey: "VolumeAnimation_Opacity")
		self.viewsByName["Volume_lines-12 2_mask__xScale"]?.layer.removeAnimation(forKey: "VolumeAnimation_ScaleX")
		self.viewsByName["Volume_lines-12 2_mask__yScale"]?.layer.removeAnimation(forKey: "VolumeAnimation_ScaleY")
		self.viewsByName["Volume_lines-12 2_mask__root"]?.layer.removeAnimation(forKey: "VolumeAnimation_TranslationX")
		self.viewsByName["Volume_lines-12 2_mask__root"]?.layer.removeAnimation(forKey: "VolumeAnimation_TranslationY")
	}

	// - MARK: VolumeAnimation_reversed

	func addVolumeAnimationReversedAnimation() {
		addVolumeAnimationReversedAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addVolumeAnimationReversedAnimation(completion: ((Bool) -> Void)?) {
		addVolumeAnimationReversedAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addVolumeAnimationReversedAnimation(removedOnCompletion: Bool) {
		addVolumeAnimationReversedAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addVolumeAnimationReversedAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addVolumeAnimationReversedAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addVolumeAnimationReversedAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let instantTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionDefault)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 1.725
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "VolumeAnimationReversed")
			self.animationCompletions[layer.animation(forKey: "VolumeAnimationReversed")!] = complete
		}

		let menuIcons02ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		menuIcons02ScaleXAnimation.duration = 1.725
		menuIcons02ScaleXAnimation.values = [0.162, 0.162, 0.239, 0.239] as [Float]
		menuIcons02ScaleXAnimation.keyTimes = [0.000, 0.594, 0.797, 1.000] as [NSNumber]
		menuIcons02ScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		menuIcons02ScaleXAnimation.beginTime = beginTime
		menuIcons02ScaleXAnimation.fillMode = fillMode
		menuIcons02ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-02__xScale"]?.layer.add(menuIcons02ScaleXAnimation, forKey:"VolumeAnimation_reversed_ScaleX")

		let menuIcons02ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		menuIcons02ScaleYAnimation.duration = 1.725
		menuIcons02ScaleYAnimation.values = [0.162, 0.162, 0.239, 0.239] as [Float]
		menuIcons02ScaleYAnimation.keyTimes = [0.000, 0.594, 0.797, 1.000] as [NSNumber]
		menuIcons02ScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		menuIcons02ScaleYAnimation.beginTime = beginTime
		menuIcons02ScaleYAnimation.fillMode = fillMode
		menuIcons02ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-02__yScale"]?.layer.add(menuIcons02ScaleYAnimation, forKey:"VolumeAnimation_reversed_ScaleY")

		let menuIcons02TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		menuIcons02TranslationXAnimation.duration = 1.725
		menuIcons02TranslationXAnimation.values = [-108.068, -108.068, 0.000, 0.000] as [Float]
		menuIcons02TranslationXAnimation.keyTimes = [0.000, 0.594, 0.797, 1.000] as [NSNumber]
		menuIcons02TranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		menuIcons02TranslationXAnimation.beginTime = beginTime
		menuIcons02TranslationXAnimation.fillMode = fillMode
		menuIcons02TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-02__root"]?.layer.add(menuIcons02TranslationXAnimation, forKey:"VolumeAnimation_reversed_TranslationX")

		let menuIcons02TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		menuIcons02TranslationYAnimation.duration = 1.725
		menuIcons02TranslationYAnimation.values = [160.764, 160.764, 0.000, 0.000] as [Float]
		menuIcons02TranslationYAnimation.keyTimes = [0.000, 0.594, 0.797, 1.000] as [NSNumber]
		menuIcons02TranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		menuIcons02TranslationYAnimation.beginTime = beginTime
		menuIcons02TranslationYAnimation.fillMode = fillMode
		menuIcons02TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-02__root"]?.layer.add(menuIcons02TranslationYAnimation, forKey:"VolumeAnimation_reversed_TranslationY")

		let volumeLines12MaskRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		volumeLines12MaskRotationAnimation.duration = 1.725
		volumeLines12MaskRotationAnimation.values = [2.209, 2.209, 1.315, 1.315] as [Float]
		volumeLines12MaskRotationAnimation.keyTimes = [0.000, 0.609, 0.783, 1.000] as [NSNumber]
		volumeLines12MaskRotationAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		volumeLines12MaskRotationAnimation.beginTime = beginTime
		volumeLines12MaskRotationAnimation.fillMode = fillMode
		volumeLines12MaskRotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Volume_lines-12_mask__root"]?.layer.add(volumeLines12MaskRotationAnimation, forKey:"VolumeAnimation_reversed_Rotation")

		let volumeLines12MaskScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		volumeLines12MaskScaleXAnimation.duration = 1.725
		volumeLines12MaskScaleXAnimation.values = [0.992, 0.992, 0.794, 0.229, 0.229] as [Float]
		volumeLines12MaskScaleXAnimation.keyTimes = [0.000, 0.609, 0.696, 0.783, 1.000] as [NSNumber]
		volumeLines12MaskScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		volumeLines12MaskScaleXAnimation.beginTime = beginTime
		volumeLines12MaskScaleXAnimation.fillMode = fillMode
		volumeLines12MaskScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Volume_lines-12_mask__xScale"]?.layer.add(volumeLines12MaskScaleXAnimation, forKey:"VolumeAnimation_reversed_ScaleX")

		let volumeLines12MaskScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		volumeLines12MaskScaleYAnimation.duration = 1.725
		volumeLines12MaskScaleYAnimation.values = [0.245, 0.245, 0.539, 0.366, 0.366] as [Float]
		volumeLines12MaskScaleYAnimation.keyTimes = [0.000, 0.507, 0.609, 0.783, 1.000] as [NSNumber]
		volumeLines12MaskScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		volumeLines12MaskScaleYAnimation.beginTime = beginTime
		volumeLines12MaskScaleYAnimation.fillMode = fillMode
		volumeLines12MaskScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Volume_lines-12_mask__yScale"]?.layer.add(volumeLines12MaskScaleYAnimation, forKey:"VolumeAnimation_reversed_ScaleY")

		let volumeLines12MaskTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		volumeLines12MaskTranslationXAnimation.duration = 1.725
		volumeLines12MaskTranslationXAnimation.values = [583.510, 583.510, 236.099, -6.662, -175.904, 4.489, 91.388, 159.214, 0.000, 0.000] as [Float]
		volumeLines12MaskTranslationXAnimation.keyTimes = [0.000, 0.464, 0.507, 0.565, 0.609, 0.652, 0.696, 0.725, 0.754, 1.000] as [NSNumber]
		volumeLines12MaskTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		volumeLines12MaskTranslationXAnimation.beginTime = beginTime
		volumeLines12MaskTranslationXAnimation.fillMode = fillMode
		volumeLines12MaskTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Volume_lines-12_mask__root"]?.layer.add(volumeLines12MaskTranslationXAnimation, forKey:"VolumeAnimation_reversed_TranslationX")

		let volumeLines12MaskTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		volumeLines12MaskTranslationYAnimation.duration = 1.725
		volumeLines12MaskTranslationYAnimation.values = [-1403.368, -1403.368, -979.633, -662.774, -393.274, -289.409, -141.691, -32.275, 0.000, 0.000] as [Float]
		volumeLines12MaskTranslationYAnimation.keyTimes = [0.000, 0.464, 0.507, 0.565, 0.609, 0.652, 0.696, 0.725, 0.754, 1.000] as [NSNumber]
		volumeLines12MaskTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		volumeLines12MaskTranslationYAnimation.beginTime = beginTime
		volumeLines12MaskTranslationYAnimation.fillMode = fillMode
		volumeLines12MaskTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Volume_lines-12_mask__root"]?.layer.add(volumeLines12MaskTranslationYAnimation, forKey:"VolumeAnimation_reversed_TranslationY")

		let menuIcons01ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		menuIcons01ScaleXAnimation.duration = 1.725
		menuIcons01ScaleXAnimation.values = [0.156, 0.156, 0.242] as [Float]
		menuIcons01ScaleXAnimation.keyTimes = [0.000, 0.797, 1.000] as [NSNumber]
		menuIcons01ScaleXAnimation.timingFunctions = [linearTiming, linearTiming]
		menuIcons01ScaleXAnimation.beginTime = beginTime
		menuIcons01ScaleXAnimation.fillMode = fillMode
		menuIcons01ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-01__xScale"]?.layer.add(menuIcons01ScaleXAnimation, forKey:"VolumeAnimation_reversed_ScaleX")

		let menuIcons01ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		menuIcons01ScaleYAnimation.duration = 1.725
		menuIcons01ScaleYAnimation.values = [0.156, 0.156, 0.242] as [Float]
		menuIcons01ScaleYAnimation.keyTimes = [0.000, 0.797, 1.000] as [NSNumber]
		menuIcons01ScaleYAnimation.timingFunctions = [linearTiming, linearTiming]
		menuIcons01ScaleYAnimation.beginTime = beginTime
		menuIcons01ScaleYAnimation.fillMode = fillMode
		menuIcons01ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-01__yScale"]?.layer.add(menuIcons01ScaleYAnimation, forKey:"VolumeAnimation_reversed_ScaleY")

		let menuIcons01TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		menuIcons01TranslationXAnimation.duration = 1.725
		menuIcons01TranslationXAnimation.values = [-49.268, -49.268, 0.000] as [Float]
		menuIcons01TranslationXAnimation.keyTimes = [0.000, 0.797, 1.000] as [NSNumber]
		menuIcons01TranslationXAnimation.timingFunctions = [linearTiming, linearTiming]
		menuIcons01TranslationXAnimation.beginTime = beginTime
		menuIcons01TranslationXAnimation.fillMode = fillMode
		menuIcons01TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-01__root"]?.layer.add(menuIcons01TranslationXAnimation, forKey:"VolumeAnimation_reversed_TranslationX")

		let menuIcons01TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		menuIcons01TranslationYAnimation.duration = 1.725
		menuIcons01TranslationYAnimation.values = [214.396, 214.396, 0.000] as [Float]
		menuIcons01TranslationYAnimation.keyTimes = [0.000, 0.797, 1.000] as [NSNumber]
		menuIcons01TranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
		menuIcons01TranslationYAnimation.beginTime = beginTime
		menuIcons01TranslationYAnimation.fillMode = fillMode
		menuIcons01TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-01__root"]?.layer.add(menuIcons01TranslationYAnimation, forKey:"VolumeAnimation_reversed_TranslationY")

		let volumeup01OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		volumeup01OpacityAnimation.duration = 1.725
		volumeup01OpacityAnimation.values = [1.000, 1.000, 0.100, 0.100] as [Float]
		volumeup01OpacityAnimation.keyTimes = [0.000, 0.391, 0.464, 1.000] as [NSNumber]
		volumeup01OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		volumeup01OpacityAnimation.beginTime = beginTime
		volumeup01OpacityAnimation.fillMode = fillMode
		volumeup01OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["volumeup-01__root"]?.layer.add(volumeup01OpacityAnimation, forKey:"VolumeAnimation_reversed_Opacity")

		let circle01MaskTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		circle01MaskTranslationXAnimation.duration = 1.725
		circle01MaskTranslationXAnimation.values = [517.499, 517.499, 0.000, 0.000] as [Float]
		circle01MaskTranslationXAnimation.keyTimes = [0.000, 0.725, 0.870, 1.000] as [NSNumber]
		circle01MaskTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		circle01MaskTranslationXAnimation.beginTime = beginTime
		circle01MaskTranslationXAnimation.fillMode = fillMode
		circle01MaskTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Circle-01_mask__root"]?.layer.add(circle01MaskTranslationXAnimation, forKey:"VolumeAnimation_reversed_TranslationX")

		let circle01MaskTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		circle01MaskTranslationYAnimation.duration = 1.725
		circle01MaskTranslationYAnimation.values = [-84.271, -84.271, 0.000, 0.000] as [Float]
		circle01MaskTranslationYAnimation.keyTimes = [0.000, 0.725, 0.870, 1.000] as [NSNumber]
		circle01MaskTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		circle01MaskTranslationYAnimation.beginTime = beginTime
		circle01MaskTranslationYAnimation.fillMode = fillMode
		circle01MaskTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Circle-01_mask__root"]?.layer.add(circle01MaskTranslationYAnimation, forKey:"VolumeAnimation_reversed_TranslationY")

		let mic01OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		mic01OpacityAnimation.duration = 1.725
		mic01OpacityAnimation.values = [1.000, 1.000, 0.100, 0.100] as [Float]
		mic01OpacityAnimation.keyTimes = [0.000, 0.159, 0.203, 1.000] as [NSNumber]
		mic01OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		mic01OpacityAnimation.beginTime = beginTime
		mic01OpacityAnimation.fillMode = fillMode
		mic01OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["mic-01__root"]?.layer.add(mic01OpacityAnimation, forKey:"VolumeAnimation_reversed_Opacity")

		let volumedown01OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		volumedown01OpacityAnimation.duration = 1.725
		volumedown01OpacityAnimation.values = [1.000, 1.000, 0.100, 0.100] as [Float]
		volumedown01OpacityAnimation.keyTimes = [0.000, 0.232, 0.304, 1.000] as [NSNumber]
		volumedown01OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		volumedown01OpacityAnimation.beginTime = beginTime
		volumedown01OpacityAnimation.fillMode = fillMode
		volumedown01OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["volumedown-01__root"]?.layer.add(volumedown01OpacityAnimation, forKey:"VolumeAnimation_reversed_Opacity")

		let menuIcons03ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		menuIcons03ScaleXAnimation.duration = 1.725
		menuIcons03ScaleXAnimation.values = [0.148, 0.148, 0.243, 0.243] as [Float]
		menuIcons03ScaleXAnimation.keyTimes = [0.000, 0.391, 0.594, 1.000] as [NSNumber]
		menuIcons03ScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		menuIcons03ScaleXAnimation.beginTime = beginTime
		menuIcons03ScaleXAnimation.fillMode = fillMode
		menuIcons03ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-03__xScale"]?.layer.add(menuIcons03ScaleXAnimation, forKey:"VolumeAnimation_reversed_ScaleX")

		let menuIcons03ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		menuIcons03ScaleYAnimation.duration = 1.725
		menuIcons03ScaleYAnimation.values = [0.148, 0.148, 0.243, 0.243] as [Float]
		menuIcons03ScaleYAnimation.keyTimes = [0.000, 0.391, 0.594, 1.000] as [NSNumber]
		menuIcons03ScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		menuIcons03ScaleYAnimation.beginTime = beginTime
		menuIcons03ScaleYAnimation.fillMode = fillMode
		menuIcons03ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-03__yScale"]?.layer.add(menuIcons03ScaleYAnimation, forKey:"VolumeAnimation_reversed_ScaleY")

		let menuIcons03TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		menuIcons03TranslationXAnimation.duration = 1.725
		menuIcons03TranslationXAnimation.values = [-169.671, -169.671, 0.000, 0.000] as [Float]
		menuIcons03TranslationXAnimation.keyTimes = [0.000, 0.391, 0.594, 1.000] as [NSNumber]
		menuIcons03TranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		menuIcons03TranslationXAnimation.beginTime = beginTime
		menuIcons03TranslationXAnimation.fillMode = fillMode
		menuIcons03TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-03__root"]?.layer.add(menuIcons03TranslationXAnimation, forKey:"VolumeAnimation_reversed_TranslationX")

		let menuIcons03TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		menuIcons03TranslationYAnimation.duration = 1.725
		menuIcons03TranslationYAnimation.values = [114.015, 114.015, 0.000, 0.000] as [Float]
		menuIcons03TranslationYAnimation.keyTimes = [0.000, 0.391, 0.594, 1.000] as [NSNumber]
		menuIcons03TranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		menuIcons03TranslationYAnimation.beginTime = beginTime
		menuIcons03TranslationYAnimation.fillMode = fillMode
		menuIcons03TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-03__root"]?.layer.add(menuIcons03TranslationYAnimation, forKey:"VolumeAnimation_reversed_TranslationY")

		let volumeBeforeAnimation2Artboard11OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		volumeBeforeAnimation2Artboard11OpacityAnimation.duration = 1.725
		volumeBeforeAnimation2Artboard11OpacityAnimation.values = [0.000, 0.000, 1.000] as [Float]
		volumeBeforeAnimation2Artboard11OpacityAnimation.keyTimes = [0.000, 0.957, 1.000] as [NSNumber]
		volumeBeforeAnimation2Artboard11OpacityAnimation.timingFunctions = [linearTiming, linearTiming]
		volumeBeforeAnimation2Artboard11OpacityAnimation.beginTime = beginTime
		volumeBeforeAnimation2Artboard11OpacityAnimation.fillMode = fillMode
		volumeBeforeAnimation2Artboard11OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Volume_beforeAnimation2_Artboard 11__root"]?.layer.add(volumeBeforeAnimation2Artboard11OpacityAnimation, forKey:"VolumeAnimation_reversed_Opacity")

		let frameMaskTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		frameMaskTranslationXAnimation.duration = 1.725
		frameMaskTranslationXAnimation.values = [277.369, 277.369, 0.000] as [Float]
		frameMaskTranslationXAnimation.keyTimes = [0.000, 0.783, 1.000] as [NSNumber]
		frameMaskTranslationXAnimation.timingFunctions = [linearTiming, linearTiming]
		frameMaskTranslationXAnimation.beginTime = beginTime
		frameMaskTranslationXAnimation.fillMode = fillMode
		frameMaskTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["frame_mask__root"]?.layer.add(frameMaskTranslationXAnimation, forKey:"VolumeAnimation_reversed_TranslationX")

		let frameMaskTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		frameMaskTranslationYAnimation.duration = 1.725
		frameMaskTranslationYAnimation.values = [-172.386, -172.386, 0.000] as [Float]
		frameMaskTranslationYAnimation.keyTimes = [0.000, 0.783, 1.000] as [NSNumber]
		frameMaskTranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
		frameMaskTranslationYAnimation.beginTime = beginTime
		frameMaskTranslationYAnimation.fillMode = fillMode
		frameMaskTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["frame_mask__root"]?.layer.add(frameMaskTranslationYAnimation, forKey:"VolumeAnimation_reversed_TranslationY")

		let volumeLines122MaskRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		volumeLines122MaskRotationAnimation.duration = 1.725
		volumeLines122MaskRotationAnimation.values = [2.618, 2.618, 1.502, 1.196, 0.921, 0.669, 0.669] as [Float]
		volumeLines122MaskRotationAnimation.keyTimes = [0.000, 0.188, 0.217, 0.362, 0.406, 0.449, 1.000] as [NSNumber]
		volumeLines122MaskRotationAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		volumeLines122MaskRotationAnimation.beginTime = beginTime
		volumeLines122MaskRotationAnimation.fillMode = fillMode
		volumeLines122MaskRotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Volume_lines-12 2_mask__root"]?.layer.add(volumeLines122MaskRotationAnimation, forKey:"VolumeAnimation_reversed_Rotation")

		let volumeLines122MaskOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		volumeLines122MaskOpacityAnimation.duration = 1.725
		volumeLines122MaskOpacityAnimation.values = [1.000, 1.000, 1.000, 0.000, 0.000] as [Float]
		volumeLines122MaskOpacityAnimation.keyTimes = [0.000, 0.493, 0.493, 0.493, 1.000] as [NSNumber]
		volumeLines122MaskOpacityAnimation.timingFunctions = [linearTiming, instantTiming, instantTiming, linearTiming]
		volumeLines122MaskOpacityAnimation.beginTime = beginTime
		volumeLines122MaskOpacityAnimation.fillMode = fillMode
		volumeLines122MaskOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Volume_lines-12 2_mask__root"]?.layer.add(volumeLines122MaskOpacityAnimation, forKey:"VolumeAnimation_reversed_Opacity")

		let volumeLines122MaskScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		volumeLines122MaskScaleXAnimation.duration = 1.725
		volumeLines122MaskScaleXAnimation.values = [-0.824, -0.824, -0.454, 0.005, 0.005] as [Float]
		volumeLines122MaskScaleXAnimation.keyTimes = [0.000, 0.362, 0.449, 0.493, 1.000] as [NSNumber]
		volumeLines122MaskScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		volumeLines122MaskScaleXAnimation.beginTime = beginTime
		volumeLines122MaskScaleXAnimation.fillMode = fillMode
		volumeLines122MaskScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Volume_lines-12 2_mask__xScale"]?.layer.add(volumeLines122MaskScaleXAnimation, forKey:"VolumeAnimation_reversed_ScaleX")

		let volumeLines122MaskScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		volumeLines122MaskScaleYAnimation.duration = 1.725
		volumeLines122MaskScaleYAnimation.values = [2.372, 2.372, 2.372, 1.586, 3.192, 2.643, 2.013, 2.013] as [Float]
		volumeLines122MaskScaleYAnimation.keyTimes = [0.000, 0.290, 0.290, 0.290, 0.319, 0.406, 0.449, 1.000] as [NSNumber]
		volumeLines122MaskScaleYAnimation.timingFunctions = [linearTiming, instantTiming, instantTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		volumeLines122MaskScaleYAnimation.beginTime = beginTime
		volumeLines122MaskScaleYAnimation.fillMode = fillMode
		volumeLines122MaskScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Volume_lines-12 2_mask__yScale"]?.layer.add(volumeLines122MaskScaleYAnimation, forKey:"VolumeAnimation_reversed_ScaleY")

		let volumeLines122MaskTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		volumeLines122MaskTranslationXAnimation.duration = 1.725
		volumeLines122MaskTranslationXAnimation.values = [321.252, 321.252, 582.830, 717.835, 506.640, 412.327, 359.179, 252.915, 33.345, 0.000, 0.000] as [Float]
		volumeLines122MaskTranslationXAnimation.keyTimes = [0.000, 0.159, 0.188, 0.217, 0.261, 0.290, 0.362, 0.406, 0.449, 0.493, 1.000] as [NSNumber]
		volumeLines122MaskTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		volumeLines122MaskTranslationXAnimation.beginTime = beginTime
		volumeLines122MaskTranslationXAnimation.fillMode = fillMode
		volumeLines122MaskTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Volume_lines-12 2_mask__root"]?.layer.add(volumeLines122MaskTranslationXAnimation, forKey:"VolumeAnimation_reversed_TranslationX")

		let volumeLines122MaskTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		volumeLines122MaskTranslationYAnimation.duration = 1.725
		volumeLines122MaskTranslationYAnimation.values = [946.805, 946.805, 871.266, 776.526, 704.940, 594.010, 475.073, 310.069, 26.339, 0.000, 0.000] as [Float]
		volumeLines122MaskTranslationYAnimation.keyTimes = [0.000, 0.159, 0.188, 0.217, 0.261, 0.290, 0.362, 0.406, 0.449, 0.493, 1.000] as [NSNumber]
		volumeLines122MaskTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		volumeLines122MaskTranslationYAnimation.beginTime = beginTime
		volumeLines122MaskTranslationYAnimation.fillMode = fillMode
		volumeLines122MaskTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Volume_lines-12 2_mask__root"]?.layer.add(volumeLines122MaskTranslationYAnimation, forKey:"VolumeAnimation_reversed_TranslationY")
	}

	func removeVolumeAnimationReversedAnimation() {
		self.layer.removeAnimation(forKey: "VolumeAnimationReversed")
		self.viewsByName["menu_icons-02__xScale"]?.layer.removeAnimation(forKey: "VolumeAnimation_reversed_ScaleX")
		self.viewsByName["menu_icons-02__yScale"]?.layer.removeAnimation(forKey: "VolumeAnimation_reversed_ScaleY")
		self.viewsByName["menu_icons-02__root"]?.layer.removeAnimation(forKey: "VolumeAnimation_reversed_TranslationX")
		self.viewsByName["menu_icons-02__root"]?.layer.removeAnimation(forKey: "VolumeAnimation_reversed_TranslationY")
		self.viewsByName["Volume_lines-12_mask__root"]?.layer.removeAnimation(forKey: "VolumeAnimation_reversed_Rotation")
		self.viewsByName["Volume_lines-12_mask__xScale"]?.layer.removeAnimation(forKey: "VolumeAnimation_reversed_ScaleX")
		self.viewsByName["Volume_lines-12_mask__yScale"]?.layer.removeAnimation(forKey: "VolumeAnimation_reversed_ScaleY")
		self.viewsByName["Volume_lines-12_mask__root"]?.layer.removeAnimation(forKey: "VolumeAnimation_reversed_TranslationX")
		self.viewsByName["Volume_lines-12_mask__root"]?.layer.removeAnimation(forKey: "VolumeAnimation_reversed_TranslationY")
		self.viewsByName["menu_icons-01__xScale"]?.layer.removeAnimation(forKey: "VolumeAnimation_reversed_ScaleX")
		self.viewsByName["menu_icons-01__yScale"]?.layer.removeAnimation(forKey: "VolumeAnimation_reversed_ScaleY")
		self.viewsByName["menu_icons-01__root"]?.layer.removeAnimation(forKey: "VolumeAnimation_reversed_TranslationX")
		self.viewsByName["menu_icons-01__root"]?.layer.removeAnimation(forKey: "VolumeAnimation_reversed_TranslationY")
		self.viewsByName["volumeup-01__root"]?.layer.removeAnimation(forKey: "VolumeAnimation_reversed_Opacity")
		self.viewsByName["Circle-01_mask__root"]?.layer.removeAnimation(forKey: "VolumeAnimation_reversed_TranslationX")
		self.viewsByName["Circle-01_mask__root"]?.layer.removeAnimation(forKey: "VolumeAnimation_reversed_TranslationY")
		self.viewsByName["mic-01__root"]?.layer.removeAnimation(forKey: "VolumeAnimation_reversed_Opacity")
		self.viewsByName["volumedown-01__root"]?.layer.removeAnimation(forKey: "VolumeAnimation_reversed_Opacity")
		self.viewsByName["menu_icons-03__xScale"]?.layer.removeAnimation(forKey: "VolumeAnimation_reversed_ScaleX")
		self.viewsByName["menu_icons-03__yScale"]?.layer.removeAnimation(forKey: "VolumeAnimation_reversed_ScaleY")
		self.viewsByName["menu_icons-03__root"]?.layer.removeAnimation(forKey: "VolumeAnimation_reversed_TranslationX")
		self.viewsByName["menu_icons-03__root"]?.layer.removeAnimation(forKey: "VolumeAnimation_reversed_TranslationY")
		self.viewsByName["Volume_beforeAnimation2_Artboard 11__root"]?.layer.removeAnimation(forKey: "VolumeAnimation_reversed_Opacity")
		self.viewsByName["frame_mask__root"]?.layer.removeAnimation(forKey: "VolumeAnimation_reversed_TranslationX")
		self.viewsByName["frame_mask__root"]?.layer.removeAnimation(forKey: "VolumeAnimation_reversed_TranslationY")
		self.viewsByName["Volume_lines-12 2_mask__root"]?.layer.removeAnimation(forKey: "VolumeAnimation_reversed_Rotation")
		self.viewsByName["Volume_lines-12 2_mask__root"]?.layer.removeAnimation(forKey: "VolumeAnimation_reversed_Opacity")
		self.viewsByName["Volume_lines-12 2_mask__xScale"]?.layer.removeAnimation(forKey: "VolumeAnimation_reversed_ScaleX")
		self.viewsByName["Volume_lines-12 2_mask__yScale"]?.layer.removeAnimation(forKey: "VolumeAnimation_reversed_ScaleY")
		self.viewsByName["Volume_lines-12 2_mask__root"]?.layer.removeAnimation(forKey: "VolumeAnimation_reversed_TranslationX")
		self.viewsByName["Volume_lines-12 2_mask__root"]?.layer.removeAnimation(forKey: "VolumeAnimation_reversed_TranslationY")
	}

	// MARK: CAAnimationDelegate
	func animationDidStop(_ anim: CAAnimation, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValue(forKey: anim)
			completion(flag)
		}
	}

	func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimation(forKey: "VolumeAnimationReversed")
		self.layer.removeAnimation(forKey: "VolumeAnimation")
	}
}