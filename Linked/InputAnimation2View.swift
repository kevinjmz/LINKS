//
// InputAnimation2View.swift
// Generated by Core Animator version 1.5.2 on 3/1/18.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

private class _InputAnimation2PassthroughView: UIView {
    override func point(inside point: CGPoint, with event: UIEvent?) -> Bool {
        for subview in subviews as [UIView] {
            if subview.point(inside: convert(point, to: subview), with: event) { return true }
        }
        return false
    }
}

@IBDesignable
class InputAnimation2View : UIView, CAAnimationDelegate {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 2044, height: 1535))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .scaleToFill:
				break
			case .scaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransform(scaleX: xScale, y: yScale)
			scalingView.center = CGPoint(x:self.bounds.midX, y:self.bounds.midY)
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = Bundle(for:type(of: self))
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:2044, height:1535)
		__scaling__.center = CGPoint(x:1022.4, y:767.8)
		__scaling__.clipsToBounds = true
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let inputWhileAnimation18__root = _InputAnimation2PassthroughView()
		let inputWhileAnimation18__xScale = _InputAnimation2PassthroughView()
		let inputWhileAnimation18__yScale = _InputAnimation2PassthroughView()
		let inputWhileAnimation18 = UIImageView()
		let imgInputWhileAnimation18 = UIImage(named:"Input_whileAnimation-18.png", in: bundle, compatibleWith: nil)
		if imgInputWhileAnimation18 == nil {
			print("** Warning: Could not create image from 'Input_whileAnimation-18.png'")
		}
		inputWhileAnimation18.image = imgInputWhileAnimation18
		inputWhileAnimation18.contentMode = .center
		inputWhileAnimation18.bounds = CGRect(x:0, y:0, width:2048.0, height:1537.0)
		inputWhileAnimation18__root.layer.position = CGPoint(x:1022.374, y:767.791)
		inputWhileAnimation18__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		inputWhileAnimation18__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		inputWhileAnimation18__root.transform = CGAffineTransform(rotationAngle: 0.000)
		inputWhileAnimation18__root.addSubview(inputWhileAnimation18__xScale)
		inputWhileAnimation18__xScale.addSubview(inputWhileAnimation18__yScale)
		inputWhileAnimation18__yScale.addSubview(inputWhileAnimation18)
		__scaling__.addSubview(inputWhileAnimation18__root)
		viewsByName["Input_whileAnimation-18__root"] = inputWhileAnimation18__root
		viewsByName["Input_whileAnimation-18__xScale"] = inputWhileAnimation18__xScale
		viewsByName["Input_whileAnimation-18__yScale"] = inputWhileAnimation18__yScale
		viewsByName["Input_whileAnimation-18"] = inputWhileAnimation18

		let inputBeforeAnimation17__root = _InputAnimation2PassthroughView()
		let inputBeforeAnimation17__xScale = _InputAnimation2PassthroughView()
		let inputBeforeAnimation17__yScale = _InputAnimation2PassthroughView()
		let inputBeforeAnimation17 = UIImageView()
		let imgInputBeforeAnimation17 = UIImage(named:"input_beforeAnimation-17.png", in: bundle, compatibleWith: nil)
		if imgInputBeforeAnimation17 == nil {
			print("** Warning: Could not create image from 'input_beforeAnimation-17.png'")
		}
		inputBeforeAnimation17.image = imgInputBeforeAnimation17
		inputBeforeAnimation17.contentMode = .center
		inputBeforeAnimation17.bounds = CGRect(x:0, y:0, width:2048.0, height:1537.0)
		inputBeforeAnimation17__root.layer.position = CGPoint(x:1024.000, y:768.500)
		inputBeforeAnimation17__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		inputBeforeAnimation17__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		inputBeforeAnimation17__root.transform = CGAffineTransform(rotationAngle: 0.000)
		inputBeforeAnimation17__root.addSubview(inputBeforeAnimation17__xScale)
		inputBeforeAnimation17__xScale.addSubview(inputBeforeAnimation17__yScale)
		inputBeforeAnimation17__yScale.addSubview(inputBeforeAnimation17)
		__scaling__.addSubview(inputBeforeAnimation17__root)
		viewsByName["input_beforeAnimation-17__root"] = inputBeforeAnimation17__root
		viewsByName["input_beforeAnimation-17__xScale"] = inputBeforeAnimation17__xScale
		viewsByName["input_beforeAnimation-17__yScale"] = inputBeforeAnimation17__yScale
		viewsByName["input_beforeAnimation-17"] = inputBeforeAnimation17

		let inputBtn101__root = _InputAnimation2PassthroughView()
		let inputBtn101__xScale = _InputAnimation2PassthroughView()
		let inputBtn101__yScale = _InputAnimation2PassthroughView()
		let inputBtn101 = UIImageView()
		let imgInputBtn101 = UIImage(named:"InputBtn1-01.png", in: bundle, compatibleWith: nil)
		if imgInputBtn101 == nil {
			print("** Warning: Could not create image from 'InputBtn1-01.png'")
		}
		inputBtn101.image = imgInputBtn101
		inputBtn101.contentMode = .center
		inputBtn101.bounds = CGRect(x:0, y:0, width:227.0, height:226.0)
		inputBtn101__root.layer.position = CGPoint(x:821.213, y:173.640)
		inputBtn101__root.alpha = 0.00
		inputBtn101__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		inputBtn101__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		inputBtn101__root.transform = CGAffineTransform(rotationAngle: 0.000)
		inputBtn101__root.addSubview(inputBtn101__xScale)
		inputBtn101__xScale.addSubview(inputBtn101__yScale)
		inputBtn101__yScale.addSubview(inputBtn101)
		__scaling__.addSubview(inputBtn101__root)
		viewsByName["InputBtn1-01__root"] = inputBtn101__root
		viewsByName["InputBtn1-01__xScale"] = inputBtn101__xScale
		viewsByName["InputBtn1-01__yScale"] = inputBtn101__yScale
		viewsByName["InputBtn1-01"] = inputBtn101

		let input2__root = _InputAnimation2PassthroughView()
		let input2__xScale = _InputAnimation2PassthroughView()
		let input2__yScale = _InputAnimation2PassthroughView()
		let input2 = UIImageView()
		let imgInput2 = UIImage(named:"Input_2.png", in: bundle, compatibleWith: nil)
		if imgInput2 == nil {
			print("** Warning: Could not create image from 'Input_2.png'")
		}
		input2.image = imgInput2
		input2.contentMode = .center
		input2.bounds = CGRect(x:0, y:0, width:227.0, height:227.0)
		input2__root.layer.position = CGPoint(x:1336.348, y:175.349)
		input2__root.alpha = 0.00
		input2__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		input2__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		input2__root.transform = CGAffineTransform(rotationAngle: 0.000)
		input2__root.addSubview(input2__xScale)
		input2__xScale.addSubview(input2__yScale)
		input2__yScale.addSubview(input2)
		__scaling__.addSubview(input2__root)
		viewsByName["Input_2__root"] = input2__root
		viewsByName["Input_2__xScale"] = input2__xScale
		viewsByName["Input_2__yScale"] = input2__yScale
		viewsByName["Input_2"] = input2

		let input3__root = _InputAnimation2PassthroughView()
		let input3__xScale = _InputAnimation2PassthroughView()
		let input3__yScale = _InputAnimation2PassthroughView()
		let input3 = UIImageView()
		let imgInput3 = UIImage(named:"Input_3.png", in: bundle, compatibleWith: nil)
		if imgInput3 == nil {
			print("** Warning: Could not create image from 'Input_3.png'")
		}
		input3.image = imgInput3
		input3.contentMode = .center
		input3.bounds = CGRect(x:0, y:0, width:227.0, height:227.0)
		input3__root.layer.position = CGPoint(x:973.953, y:632.291)
		input3__root.alpha = 0.00
		input3__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		input3__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		input3__root.transform = CGAffineTransform(rotationAngle: 0.000)
		input3__root.addSubview(input3__xScale)
		input3__xScale.addSubview(input3__yScale)
		input3__yScale.addSubview(input3)
		__scaling__.addSubview(input3__root)
		viewsByName["Input_3__root"] = input3__root
		viewsByName["Input_3__xScale"] = input3__xScale
		viewsByName["Input_3__yScale"] = input3__yScale
		viewsByName["Input_3"] = input3

		let input4__root = _InputAnimation2PassthroughView()
		let input4__xScale = _InputAnimation2PassthroughView()
		let input4__yScale = _InputAnimation2PassthroughView()
		let input4 = UIImageView()
		let imgInput4 = UIImage(named:"Input_4.png", in: bundle, compatibleWith: nil)
		if imgInput4 == nil {
			print("** Warning: Could not create image from 'Input_4.png'")
		}
		input4.image = imgInput4
		input4.contentMode = .center
		input4.bounds = CGRect(x:0, y:0, width:227.0, height:227.0)
		input4__root.layer.position = CGPoint(x:1125.874, y:1313.739)
		input4__root.alpha = 0.00
		input4__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		input4__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		input4__root.transform = CGAffineTransform(rotationAngle: 0.000)
		input4__root.addSubview(input4__xScale)
		input4__xScale.addSubview(input4__yScale)
		input4__yScale.addSubview(input4)
		__scaling__.addSubview(input4__root)
		viewsByName["Input_4__root"] = input4__root
		viewsByName["Input_4__xScale"] = input4__xScale
		viewsByName["Input_4__yScale"] = input4__yScale
		viewsByName["Input_4"] = input4

		let input5__root = _InputAnimation2PassthroughView()
		let input5__xScale = _InputAnimation2PassthroughView()
		let input5__yScale = _InputAnimation2PassthroughView()
		let input5 = UIImageView()
		let imgInput5 = UIImage(named:"Input_5.png", in: bundle, compatibleWith: nil)
		if imgInput5 == nil {
			print("** Warning: Could not create image from 'Input_5.png'")
		}
		input5.image = imgInput5
		input5.contentMode = .center
		input5.bounds = CGRect(x:0, y:0, width:227.0, height:227.0)
		input5__root.layer.position = CGPoint(x:1338.150, y:651.291)
		input5__root.alpha = 0.00
		input5__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		input5__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		input5__root.transform = CGAffineTransform(rotationAngle: 0.000)
		input5__root.addSubview(input5__xScale)
		input5__xScale.addSubview(input5__yScale)
		input5__yScale.addSubview(input5)
		__scaling__.addSubview(input5__root)
		viewsByName["Input_5__root"] = input5__root
		viewsByName["Input_5__xScale"] = input5__xScale
		viewsByName["Input_5__yScale"] = input5__yScale
		viewsByName["Input_5"] = input5

		let input7__root = _InputAnimation2PassthroughView()
		let input7__xScale = _InputAnimation2PassthroughView()
		let input7__yScale = _InputAnimation2PassthroughView()
		let input7 = UIImageView()
		let imgInput7 = UIImage(named:"Input_7.png", in: bundle, compatibleWith: nil)
		if imgInput7 == nil {
			print("** Warning: Could not create image from 'Input_7.png'")
		}
		input7.image = imgInput7
		input7.contentMode = .center
		input7.bounds = CGRect(x:0, y:0, width:227.0, height:226.0)
		input7__root.layer.position = CGPoint(x:1613.380, y:1310.630)
		input7__root.alpha = 0.00
		input7__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		input7__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		input7__root.transform = CGAffineTransform(rotationAngle: 0.000)
		input7__root.addSubview(input7__xScale)
		input7__xScale.addSubview(input7__yScale)
		input7__yScale.addSubview(input7)
		__scaling__.addSubview(input7__root)
		viewsByName["Input_7__root"] = input7__root
		viewsByName["Input_7__xScale"] = input7__xScale
		viewsByName["Input_7__yScale"] = input7__yScale
		viewsByName["Input_7"] = input7

		let circ__root = _InputAnimation2PassthroughView()
		let circ__xScale = _InputAnimation2PassthroughView()
		let circ__yScale = _InputAnimation2PassthroughView()
		let circ = UIImageView()
		let imgCirc = UIImage(named:"circ.png", in: bundle, compatibleWith: nil)
		if imgCirc == nil {
			print("** Warning: Could not create image from 'circ.png'")
		}
		circ.image = imgCirc
		circ.contentMode = .center
		circ.bounds = CGRect(x:0, y:0, width:199.0, height:199.0)
		circ__root.layer.position = CGPoint(x:471.304, y:1224.830)
		circ__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		circ__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		circ__root.transform = CGAffineTransform(rotationAngle: 0.000)
		circ__root.addSubview(circ__xScale)
		circ__xScale.addSubview(circ__yScale)
		circ__yScale.addSubview(circ)
		__scaling__.addSubview(circ__root)
		viewsByName["circ__root"] = circ__root
		viewsByName["circ__xScale"] = circ__xScale
		viewsByName["circ__yScale"] = circ__yScale
		viewsByName["circ"] = circ

		let circMask__root = _InputAnimation2PassthroughView()
		let circMask__xScale = _InputAnimation2PassthroughView()
		let circMask__yScale = _InputAnimation2PassthroughView()
		let circMask = UIImageView()
		let imgSquare = UIImage(named:"square.png", in: bundle, compatibleWith: nil)
		if imgSquare == nil {
			print("** Warning: Could not create image from 'square.png'")
		}
		circMask.image = imgSquare
		circMask.contentMode = .center
		circMask.bounds = CGRect(x:0, y:0, width:185.0, height:184.5)
		circMask__root.layer.position = CGPoint(x:-6.274, y:160.146)
		circMask__xScale.transform = CGAffineTransform(scaleX: 0.22, y: 1.00)
		circMask__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.19)
		circMask__root.transform = CGAffineTransform(rotationAngle: 5.798)
		circMask__root.addSubview(circMask__xScale)
		circMask__xScale.addSubview(circMask__yScale)
		circMask__yScale.addSubview(circMask)
		circ.mask = circMask__root
		viewsByName["circ_mask__root"] = circMask__root
		viewsByName["circ_mask__xScale"] = circMask__xScale
		viewsByName["circ_mask__yScale"] = circMask__yScale
		viewsByName["circ_mask"] = circMask

		let frame__root = _InputAnimation2PassthroughView()
		let frame__xScale = _InputAnimation2PassthroughView()
		let frame__yScale = _InputAnimation2PassthroughView()
		let frame = UIImageView()
		let imgFrame = UIImage(named:"frame.png", in: bundle, compatibleWith: nil)
		if imgFrame == nil {
			print("** Warning: Could not create image from 'frame.png'")
		}
		frame.image = imgFrame
		frame.contentMode = .center
		frame.bounds = CGRect(x:0, y:0, width:294.0, height:262.0)
		frame__root.layer.position = CGPoint(x:365.822, y:1281.638)
		frame__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		frame__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		frame__root.transform = CGAffineTransform(rotationAngle: 0.000)
		frame__root.addSubview(frame__xScale)
		frame__xScale.addSubview(frame__yScale)
		frame__yScale.addSubview(frame)
		__scaling__.addSubview(frame__root)
		viewsByName["frame__root"] = frame__root
		viewsByName["frame__xScale"] = frame__xScale
		viewsByName["frame__yScale"] = frame__yScale
		viewsByName["frame"] = frame

		let frameMask__root = _InputAnimation2PassthroughView()
		let frameMask__xScale = _InputAnimation2PassthroughView()
		let frameMask__yScale = _InputAnimation2PassthroughView()
		let frameMask = UIImageView()
		frameMask.image = imgSquare
		frameMask.contentMode = .center
		frameMask.bounds = CGRect(x:0, y:0, width:185.0, height:184.5)
		frameMask__root.layer.position = CGPoint(x:10.901, y:222.244)
		frameMask__xScale.transform = CGAffineTransform(scaleX: 0.06, y: 1.00)
		frameMask__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.26)
		frameMask__root.transform = CGAffineTransform(rotationAngle: 5.845)
		frameMask__root.addSubview(frameMask__xScale)
		frameMask__xScale.addSubview(frameMask__yScale)
		frameMask__yScale.addSubview(frameMask)
		frame.mask = frameMask__root
		viewsByName["frame_mask__root"] = frameMask__root
		viewsByName["frame_mask__xScale"] = frameMask__xScale
		viewsByName["frame_mask__yScale"] = frameMask__yScale
		viewsByName["frame_mask"] = frameMask

		let inputLines18__root = _InputAnimation2PassthroughView()
		let inputLines18__xScale = _InputAnimation2PassthroughView()
		let inputLines18__yScale = _InputAnimation2PassthroughView()
		let inputLines18 = UIImageView()
		let imgInputLines18 = UIImage(named:"Input_lines-18.png", in: bundle, compatibleWith: nil)
		if imgInputLines18 == nil {
			print("** Warning: Could not create image from 'Input_lines-18.png'")
		}
		inputLines18.image = imgInputLines18
		inputLines18.contentMode = .center
		inputLines18.bounds = CGRect(x:0, y:0, width:1330.0, height:1162.0)
		inputLines18__root.layer.position = CGPoint(x:925.541, y:735.020)
		inputLines18__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		inputLines18__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		inputLines18__root.transform = CGAffineTransform(rotationAngle: 0.000)
		inputLines18__root.addSubview(inputLines18__xScale)
		inputLines18__xScale.addSubview(inputLines18__yScale)
		inputLines18__yScale.addSubview(inputLines18)
		__scaling__.addSubview(inputLines18__root)
		viewsByName["Input_lines-18__root"] = inputLines18__root
		viewsByName["Input_lines-18__xScale"] = inputLines18__xScale
		viewsByName["Input_lines-18__yScale"] = inputLines18__yScale
		viewsByName["Input_lines-18"] = inputLines18

		let inputLines18Mask__root = _InputAnimation2PassthroughView()
		let inputLines18Mask__xScale = _InputAnimation2PassthroughView()
		let inputLines18Mask__yScale = _InputAnimation2PassthroughView()
		let inputLines18Mask = UIImageView()
		inputLines18Mask.image = imgSquare
		inputLines18Mask.contentMode = .center
		inputLines18Mask.bounds = CGRect(x:0, y:0, width:185.0, height:184.5)
		inputLines18Mask__root.layer.position = CGPoint(x:278.904, y:1015.893)
		inputLines18Mask__xScale.transform = CGAffineTransform(scaleX: 0.12, y: 1.00)
		inputLines18Mask__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.56)
		inputLines18Mask__root.transform = CGAffineTransform(rotationAngle: 5.806)
		inputLines18Mask__root.addSubview(inputLines18Mask__xScale)
		inputLines18Mask__xScale.addSubview(inputLines18Mask__yScale)
		inputLines18Mask__yScale.addSubview(inputLines18Mask)
		inputLines18.mask = inputLines18Mask__root
		viewsByName["Input_lines-18_mask__root"] = inputLines18Mask__root
		viewsByName["Input_lines-18_mask__xScale"] = inputLines18Mask__xScale
		viewsByName["Input_lines-18_mask__yScale"] = inputLines18Mask__yScale
		viewsByName["Input_lines-18_mask"] = inputLines18Mask

		let inputLines181__root = _InputAnimation2PassthroughView()
		let inputLines181__xScale = _InputAnimation2PassthroughView()
		let inputLines181__yScale = _InputAnimation2PassthroughView()
		let inputLines181 = UIImageView()
		let imgInputLines181 = UIImage(named:"Input_lines-18_1.png", in: bundle, compatibleWith: nil)
		if imgInputLines181 == nil {
			print("** Warning: Could not create image from 'Input_lines-18_1.png'")
		}
		inputLines181.image = imgInputLines181
		inputLines181.contentMode = .center
		inputLines181.bounds = CGRect(x:0, y:0, width:1330.0, height:1162.0)
		inputLines181__root.layer.position = CGPoint(x:926.792, y:735.791)
		inputLines181__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		inputLines181__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		inputLines181__root.transform = CGAffineTransform(rotationAngle: 0.000)
		inputLines181__root.addSubview(inputLines181__xScale)
		inputLines181__xScale.addSubview(inputLines181__yScale)
		inputLines181__yScale.addSubview(inputLines181)
		__scaling__.addSubview(inputLines181__root)
		viewsByName["Input_lines-18_1__root"] = inputLines181__root
		viewsByName["Input_lines-18_1__xScale"] = inputLines181__xScale
		viewsByName["Input_lines-18_1__yScale"] = inputLines181__yScale
		viewsByName["Input_lines-18_1"] = inputLines181

		let inputLines181Mask__root = _InputAnimation2PassthroughView()
		let inputLines181Mask__xScale = _InputAnimation2PassthroughView()
		let inputLines181Mask__yScale = _InputAnimation2PassthroughView()
		let inputLines181Mask = UIImageView()
		inputLines181Mask.image = imgSquare
		inputLines181Mask.contentMode = .center
		inputLines181Mask.bounds = CGRect(x:0, y:0, width:185.0, height:184.5)
		inputLines181Mask__root.layer.position = CGPoint(x:613.533, y:13.922)
		inputLines181Mask__xScale.transform = CGAffineTransform(scaleX: 0.54, y: 1.00)
		inputLines181Mask__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.17)
		inputLines181Mask__root.transform = CGAffineTransform(rotationAngle: 0.000)
		inputLines181Mask__root.addSubview(inputLines181Mask__xScale)
		inputLines181Mask__xScale.addSubview(inputLines181Mask__yScale)
		inputLines181Mask__yScale.addSubview(inputLines181Mask)
		inputLines181.mask = inputLines181Mask__root
		viewsByName["Input_lines-18_1_mask__root"] = inputLines181Mask__root
		viewsByName["Input_lines-18_1_mask__xScale"] = inputLines181Mask__xScale
		viewsByName["Input_lines-18_1_mask__yScale"] = inputLines181Mask__yScale
		viewsByName["Input_lines-18_1_mask"] = inputLines181Mask

		let menuIcons01__root = _InputAnimation2PassthroughView()
		let menuIcons01__xScale = _InputAnimation2PassthroughView()
		let menuIcons01__yScale = _InputAnimation2PassthroughView()
		let menuIcons01 = UIImageView()
		let imgMenuIcons01 = UIImage(named:"menu_icons-01.png", in: bundle, compatibleWith: nil)
		if imgMenuIcons01 == nil {
			print("** Warning: Could not create image from 'menu_icons-01.png'")
		}
		menuIcons01.image = imgMenuIcons01
		menuIcons01.contentMode = .center
		menuIcons01.bounds = CGRect(x:0, y:0, width:642.0, height:642.0)
		menuIcons01__root.layer.position = CGPoint(x:136.831, y:999.934)
		menuIcons01__xScale.transform = CGAffineTransform(scaleX: 0.24, y: 1.00)
		menuIcons01__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.24)
		menuIcons01__root.transform = CGAffineTransform(rotationAngle: 0.000)
		menuIcons01__root.addSubview(menuIcons01__xScale)
		menuIcons01__xScale.addSubview(menuIcons01__yScale)
		menuIcons01__yScale.addSubview(menuIcons01)
		__scaling__.addSubview(menuIcons01__root)
		viewsByName["menu_icons-01__root"] = menuIcons01__root
		viewsByName["menu_icons-01__xScale"] = menuIcons01__xScale
		viewsByName["menu_icons-01__yScale"] = menuIcons01__yScale
		viewsByName["menu_icons-01"] = menuIcons01

		let menuIcons02__root = _InputAnimation2PassthroughView()
		let menuIcons02__xScale = _InputAnimation2PassthroughView()
		let menuIcons02__yScale = _InputAnimation2PassthroughView()
		let menuIcons02 = UIImageView()
		let imgMenuIcons02 = UIImage(named:"menu_icons-02.png", in: bundle, compatibleWith: nil)
		if imgMenuIcons02 == nil {
			print("** Warning: Could not create image from 'menu_icons-02.png'")
		}
		menuIcons02.image = imgMenuIcons02
		menuIcons02.contentMode = .center
		menuIcons02.bounds = CGRect(x:0, y:0, width:642.0, height:642.0)
		menuIcons02__root.layer.position = CGPoint(x:325.190, y:1081.242)
		menuIcons02__xScale.transform = CGAffineTransform(scaleX: 0.24, y: 1.00)
		menuIcons02__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.24)
		menuIcons02__root.transform = CGAffineTransform(rotationAngle: 0.000)
		menuIcons02__root.addSubview(menuIcons02__xScale)
		menuIcons02__xScale.addSubview(menuIcons02__yScale)
		menuIcons02__yScale.addSubview(menuIcons02)
		__scaling__.addSubview(menuIcons02__root)
		viewsByName["menu_icons-02__root"] = menuIcons02__root
		viewsByName["menu_icons-02__xScale"] = menuIcons02__xScale
		viewsByName["menu_icons-02__yScale"] = menuIcons02__yScale
		viewsByName["menu_icons-02"] = menuIcons02

		let menuIcons04__root = _InputAnimation2PassthroughView()
		let menuIcons04__xScale = _InputAnimation2PassthroughView()
		let menuIcons04__yScale = _InputAnimation2PassthroughView()
		let menuIcons04 = UIImageView()
		let imgMenuIcons04 = UIImage(named:"menu_icons-04.png", in: bundle, compatibleWith: nil)
		if imgMenuIcons04 == nil {
			print("** Warning: Could not create image from 'menu_icons-04.png'")
		}
		menuIcons04.image = imgMenuIcons04
		menuIcons04.contentMode = .center
		menuIcons04.bounds = CGRect(x:0, y:0, width:642.0, height:642.0)
		menuIcons04__root.layer.position = CGPoint(x:547.224, y:1415.255)
		menuIcons04__xScale.transform = CGAffineTransform(scaleX: 0.24, y: 1.00)
		menuIcons04__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.24)
		menuIcons04__root.transform = CGAffineTransform(rotationAngle: 0.000)
		menuIcons04__root.addSubview(menuIcons04__xScale)
		menuIcons04__xScale.addSubview(menuIcons04__yScale)
		menuIcons04__yScale.addSubview(menuIcons04)
		__scaling__.addSubview(menuIcons04__root)
		viewsByName["menu_icons-04__root"] = menuIcons04__root
		viewsByName["menu_icons-04__xScale"] = menuIcons04__xScale
		viewsByName["menu_icons-04__yScale"] = menuIcons04__yScale
		viewsByName["menu_icons-04"] = menuIcons04

		self.viewsByName = viewsByName
	}

	// - MARK: Input_Animation2

	func addInputAnimation2Animation() {
		addInputAnimation2Animation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addInputAnimation2Animation(completion: ((Bool) -> Void)?) {
		addInputAnimation2Animation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addInputAnimation2Animation(removedOnCompletion: Bool) {
		addInputAnimation2Animation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addInputAnimation2Animation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addInputAnimation2Animation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addInputAnimation2Animation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let instantTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionDefault)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 1.320
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "InputAnimation2")
			self.animationCompletions[layer.animation(forKey: "InputAnimation2")!] = complete
		}

		let inputLines18MaskRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		inputLines18MaskRotationAnimation.duration = 1.320
		inputLines18MaskRotationAnimation.values = [5.806, 5.806, 5.570, 6.643, 6.952, 7.183, 7.183] as [Float]
		inputLines18MaskRotationAnimation.keyTimes = [0.000, 0.409, 0.591, 0.621, 0.780, 0.856, 1.000] as [NSNumber]
		inputLines18MaskRotationAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		inputLines18MaskRotationAnimation.beginTime = beginTime
		inputLines18MaskRotationAnimation.fillMode = fillMode
		inputLines18MaskRotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Input_lines-18_mask__root"]?.layer.add(inputLines18MaskRotationAnimation, forKey:"Input_Animation2_Rotation")

		let inputLines18MaskScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		inputLines18MaskScaleXAnimation.duration = 1.320
		inputLines18MaskScaleXAnimation.values = [0.119, 0.119, 0.193, 0.237, 0.962, 0.962] as [Float]
		inputLines18MaskScaleXAnimation.keyTimes = [0.000, 0.500, 0.545, 0.720, 0.750, 1.000] as [NSNumber]
		inputLines18MaskScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		inputLines18MaskScaleXAnimation.beginTime = beginTime
		inputLines18MaskScaleXAnimation.fillMode = fillMode
		inputLines18MaskScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Input_lines-18_mask__xScale"]?.layer.add(inputLines18MaskScaleXAnimation, forKey:"Input_Animation2_ScaleX")

		let inputLines18MaskScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		inputLines18MaskScaleYAnimation.duration = 1.320
		inputLines18MaskScaleYAnimation.values = [0.561, 0.561, 0.794, 0.406, 0.737, 0.737] as [Float]
		inputLines18MaskScaleYAnimation.keyTimes = [0.000, 0.500, 0.697, 0.780, 0.985, 1.000] as [NSNumber]
		inputLines18MaskScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		inputLines18MaskScaleYAnimation.beginTime = beginTime
		inputLines18MaskScaleYAnimation.fillMode = fillMode
		inputLines18MaskScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Input_lines-18_mask__yScale"]?.layer.add(inputLines18MaskScaleYAnimation, forKey:"Input_Animation2_ScaleY")

		let inputLines18MaskTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		inputLines18MaskTranslationXAnimation.duration = 1.320
		inputLines18MaskTranslationXAnimation.values = [0.000, 0.000, 106.398, -55.159, -244.607, -251.813, -265.159, -158.575, -13.704, 55.999, 118.748, 263.248, 323.352, 789.771, 959.810, 1086.068, 600.355, 600.355] as [Float]
		inputLines18MaskTranslationXAnimation.keyTimes = [0.000, 0.394, 0.447, 0.545, 0.583, 0.591, 0.621, 0.659, 0.697, 0.720, 0.750, 0.773, 0.780, 0.856, 0.917, 0.939, 0.985, 1.000] as [NSNumber]
		inputLines18MaskTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		inputLines18MaskTranslationXAnimation.beginTime = beginTime
		inputLines18MaskTranslationXAnimation.fillMode = fillMode
		inputLines18MaskTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Input_lines-18_mask__root"]?.layer.add(inputLines18MaskTranslationXAnimation, forKey:"Input_Animation2_TranslationX")

		let inputLines18MaskTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		inputLines18MaskTranslationYAnimation.duration = 1.320
		inputLines18MaskTranslationYAnimation.values = [0.000, 0.000, -37.117, -257.557, -390.979, -397.392, -436.427, -656.432, -943.245, -1033.424, -1009.841, -1000.771, -989.490, -518.349, -213.701, 125.354, 154.457, 154.457] as [Float]
		inputLines18MaskTranslationYAnimation.keyTimes = [0.000, 0.394, 0.447, 0.545, 0.583, 0.591, 0.621, 0.659, 0.697, 0.720, 0.750, 0.773, 0.780, 0.856, 0.917, 0.939, 0.985, 1.000] as [NSNumber]
		inputLines18MaskTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		inputLines18MaskTranslationYAnimation.beginTime = beginTime
		inputLines18MaskTranslationYAnimation.fillMode = fillMode
		inputLines18MaskTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Input_lines-18_mask__root"]?.layer.add(inputLines18MaskTranslationYAnimation, forKey:"Input_Animation2_TranslationY")

		let menuIcons02ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		menuIcons02ScaleXAnimation.duration = 1.320
		menuIcons02ScaleXAnimation.values = [0.241, 0.241, 0.164, 0.164] as [Float]
		menuIcons02ScaleXAnimation.keyTimes = [0.000, 0.265, 0.530, 1.000] as [NSNumber]
		menuIcons02ScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		menuIcons02ScaleXAnimation.beginTime = beginTime
		menuIcons02ScaleXAnimation.fillMode = fillMode
		menuIcons02ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-02__xScale"]?.layer.add(menuIcons02ScaleXAnimation, forKey:"Input_Animation2_ScaleX")

		let menuIcons02ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		menuIcons02ScaleYAnimation.duration = 1.320
		menuIcons02ScaleYAnimation.values = [0.241, 0.241, 0.164, 0.164] as [Float]
		menuIcons02ScaleYAnimation.keyTimes = [0.000, 0.265, 0.530, 1.000] as [NSNumber]
		menuIcons02ScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		menuIcons02ScaleYAnimation.beginTime = beginTime
		menuIcons02ScaleYAnimation.fillMode = fillMode
		menuIcons02ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-02__yScale"]?.layer.add(menuIcons02ScaleYAnimation, forKey:"Input_Animation2_ScaleY")

		let menuIcons02TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		menuIcons02TranslationXAnimation.duration = 1.320
		menuIcons02TranslationXAnimation.values = [0.000, 0.000, -115.577, -115.577] as [Float]
		menuIcons02TranslationXAnimation.keyTimes = [0.000, 0.265, 0.530, 1.000] as [NSNumber]
		menuIcons02TranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		menuIcons02TranslationXAnimation.beginTime = beginTime
		menuIcons02TranslationXAnimation.fillMode = fillMode
		menuIcons02TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-02__root"]?.layer.add(menuIcons02TranslationXAnimation, forKey:"Input_Animation2_TranslationX")

		let menuIcons02TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		menuIcons02TranslationYAnimation.duration = 1.320
		menuIcons02TranslationYAnimation.values = [0.000, 0.000, 174.978, 174.978] as [Float]
		menuIcons02TranslationYAnimation.keyTimes = [0.000, 0.265, 0.530, 1.000] as [NSNumber]
		menuIcons02TranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		menuIcons02TranslationYAnimation.beginTime = beginTime
		menuIcons02TranslationYAnimation.fillMode = fillMode
		menuIcons02TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-02__root"]?.layer.add(menuIcons02TranslationYAnimation, forKey:"Input_Animation2_TranslationY")

		let frameMaskScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		frameMaskScaleXAnimation.duration = 1.320
		frameMaskScaleXAnimation.values = [0.059, 0.319, 0.319] as [Float]
		frameMaskScaleXAnimation.keyTimes = [0.000, 0.091, 1.000] as [NSNumber]
		frameMaskScaleXAnimation.timingFunctions = [linearTiming, linearTiming]
		frameMaskScaleXAnimation.beginTime = beginTime
		frameMaskScaleXAnimation.fillMode = fillMode
		frameMaskScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["frame_mask__xScale"]?.layer.add(frameMaskScaleXAnimation, forKey:"Input_Animation2_ScaleX")

		let frameMaskTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		frameMaskTranslationXAnimation.duration = 1.320
		frameMaskTranslationXAnimation.values = [0.000, 109.389, 266.889, 266.889] as [Float]
		frameMaskTranslationXAnimation.keyTimes = [0.000, 0.091, 0.242, 1.000] as [NSNumber]
		frameMaskTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		frameMaskTranslationXAnimation.beginTime = beginTime
		frameMaskTranslationXAnimation.fillMode = fillMode
		frameMaskTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["frame_mask__root"]?.layer.add(frameMaskTranslationXAnimation, forKey:"Input_Animation2_TranslationX")

		let frameMaskTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		frameMaskTranslationYAnimation.duration = 1.320
		frameMaskTranslationYAnimation.values = [0.000, -60.446, -161.884, -161.884] as [Float]
		frameMaskTranslationYAnimation.keyTimes = [0.000, 0.091, 0.242, 1.000] as [NSNumber]
		frameMaskTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		frameMaskTranslationYAnimation.beginTime = beginTime
		frameMaskTranslationYAnimation.fillMode = fillMode
		frameMaskTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["frame_mask__root"]?.layer.add(frameMaskTranslationYAnimation, forKey:"Input_Animation2_TranslationY")

		let input7OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		input7OpacityAnimation.duration = 1.320
		input7OpacityAnimation.values = [0.000, 0.000, 1.000, 1.000] as [Float]
		input7OpacityAnimation.keyTimes = [0.000, 0.924, 0.962, 1.000] as [NSNumber]
		input7OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		input7OpacityAnimation.beginTime = beginTime
		input7OpacityAnimation.fillMode = fillMode
		input7OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Input_7__root"]?.layer.add(input7OpacityAnimation, forKey:"Input_Animation2_Opacity")

		let input5OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		input5OpacityAnimation.duration = 1.320
		input5OpacityAnimation.values = [0.000, 0.000, 1.000, 1.000] as [Float]
		input5OpacityAnimation.keyTimes = [0.000, 0.833, 0.879, 1.000] as [NSNumber]
		input5OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		input5OpacityAnimation.beginTime = beginTime
		input5OpacityAnimation.fillMode = fillMode
		input5OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Input_5__root"]?.layer.add(input5OpacityAnimation, forKey:"Input_Animation2_Opacity")

		let input2OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		input2OpacityAnimation.duration = 1.320
		input2OpacityAnimation.values = [0.000, 0.000, 1.000, 1.000] as [Float]
		input2OpacityAnimation.keyTimes = [0.000, 0.833, 0.871, 1.000] as [NSNumber]
		input2OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		input2OpacityAnimation.beginTime = beginTime
		input2OpacityAnimation.fillMode = fillMode
		input2OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Input_2__root"]?.layer.add(input2OpacityAnimation, forKey:"Input_Animation2_Opacity")

		let menuIcons04ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		menuIcons04ScaleXAnimation.duration = 1.320
		menuIcons04ScaleXAnimation.values = [0.240, 0.240, 0.164, 0.164] as [Float]
		menuIcons04ScaleXAnimation.keyTimes = [0.000, 0.530, 0.795, 1.000] as [NSNumber]
		menuIcons04ScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		menuIcons04ScaleXAnimation.beginTime = beginTime
		menuIcons04ScaleXAnimation.fillMode = fillMode
		menuIcons04ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-04__xScale"]?.layer.add(menuIcons04ScaleXAnimation, forKey:"Input_Animation2_ScaleX")

		let menuIcons04ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		menuIcons04ScaleYAnimation.duration = 1.320
		menuIcons04ScaleYAnimation.values = [0.240, 0.240, 0.164, 0.164] as [Float]
		menuIcons04ScaleYAnimation.keyTimes = [0.000, 0.530, 0.795, 1.000] as [NSNumber]
		menuIcons04ScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		menuIcons04ScaleYAnimation.beginTime = beginTime
		menuIcons04ScaleYAnimation.fillMode = fillMode
		menuIcons04ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-04__yScale"]?.layer.add(menuIcons04ScaleYAnimation, forKey:"Input_Animation2_ScaleY")

		let menuIcons04TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		menuIcons04TranslationXAnimation.duration = 1.320
		menuIcons04TranslationXAnimation.values = [0.000, 0.000, -234.960, -234.960] as [Float]
		menuIcons04TranslationXAnimation.keyTimes = [0.000, 0.530, 0.795, 1.000] as [NSNumber]
		menuIcons04TranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		menuIcons04TranslationXAnimation.beginTime = beginTime
		menuIcons04TranslationXAnimation.fillMode = fillMode
		menuIcons04TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-04__root"]?.layer.add(menuIcons04TranslationXAnimation, forKey:"Input_Animation2_TranslationX")

		let menuIcons04TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		menuIcons04TranslationYAnimation.duration = 1.320
		menuIcons04TranslationYAnimation.values = [0.000, 0.000, 49.160, 49.160] as [Float]
		menuIcons04TranslationYAnimation.keyTimes = [0.000, 0.530, 0.795, 1.000] as [NSNumber]
		menuIcons04TranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		menuIcons04TranslationYAnimation.beginTime = beginTime
		menuIcons04TranslationYAnimation.fillMode = fillMode
		menuIcons04TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-04__root"]?.layer.add(menuIcons04TranslationYAnimation, forKey:"Input_Animation2_TranslationY")

		let input4OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		input4OpacityAnimation.duration = 1.320
		input4OpacityAnimation.values = [0.000, 0.000, 1.000] as [Float]
		input4OpacityAnimation.keyTimes = [0.000, 0.970, 1.000] as [NSNumber]
		input4OpacityAnimation.timingFunctions = [linearTiming, linearTiming]
		input4OpacityAnimation.beginTime = beginTime
		input4OpacityAnimation.fillMode = fillMode
		input4OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Input_4__root"]?.layer.add(input4OpacityAnimation, forKey:"Input_Animation2_Opacity")

		let inputBeforeAnimation17OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		inputBeforeAnimation17OpacityAnimation.duration = 1.320
		inputBeforeAnimation17OpacityAnimation.values = [1.000, 0.000, 0.000] as [Float]
		inputBeforeAnimation17OpacityAnimation.keyTimes = [0.000, 0.098, 1.000] as [NSNumber]
		inputBeforeAnimation17OpacityAnimation.timingFunctions = [linearTiming, linearTiming]
		inputBeforeAnimation17OpacityAnimation.beginTime = beginTime
		inputBeforeAnimation17OpacityAnimation.fillMode = fillMode
		inputBeforeAnimation17OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["input_beforeAnimation-17__root"]?.layer.add(inputBeforeAnimation17OpacityAnimation, forKey:"Input_Animation2_Opacity")

		let inputBtn101OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		inputBtn101OpacityAnimation.duration = 1.320
		inputBtn101OpacityAnimation.values = [0.000, 0.000, 1.000, 1.000] as [Float]
		inputBtn101OpacityAnimation.keyTimes = [0.000, 0.742, 0.795, 1.000] as [NSNumber]
		inputBtn101OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		inputBtn101OpacityAnimation.beginTime = beginTime
		inputBtn101OpacityAnimation.fillMode = fillMode
		inputBtn101OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["InputBtn1-01__root"]?.layer.add(inputBtn101OpacityAnimation, forKey:"Input_Animation2_Opacity")

		let menuIcons01ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		menuIcons01ScaleXAnimation.duration = 1.320
		menuIcons01ScaleXAnimation.values = [0.242, 0.164, 0.164] as [Float]
		menuIcons01ScaleXAnimation.keyTimes = [0.000, 0.265, 1.000] as [NSNumber]
		menuIcons01ScaleXAnimation.timingFunctions = [linearTiming, linearTiming]
		menuIcons01ScaleXAnimation.beginTime = beginTime
		menuIcons01ScaleXAnimation.fillMode = fillMode
		menuIcons01ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-01__xScale"]?.layer.add(menuIcons01ScaleXAnimation, forKey:"Input_Animation2_ScaleX")

		let menuIcons01ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		menuIcons01ScaleYAnimation.duration = 1.320
		menuIcons01ScaleYAnimation.values = [0.242, 0.164, 0.164] as [Float]
		menuIcons01ScaleYAnimation.keyTimes = [0.000, 0.265, 1.000] as [NSNumber]
		menuIcons01ScaleYAnimation.timingFunctions = [linearTiming, linearTiming]
		menuIcons01ScaleYAnimation.beginTime = beginTime
		menuIcons01ScaleYAnimation.fillMode = fillMode
		menuIcons01ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-01__yScale"]?.layer.add(menuIcons01ScaleYAnimation, forKey:"Input_Animation2_ScaleY")

		let menuIcons01TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		menuIcons01TranslationXAnimation.duration = 1.320
		menuIcons01TranslationXAnimation.values = [0.000, -52.041, -52.041] as [Float]
		menuIcons01TranslationXAnimation.keyTimes = [0.000, 0.265, 1.000] as [NSNumber]
		menuIcons01TranslationXAnimation.timingFunctions = [linearTiming, linearTiming]
		menuIcons01TranslationXAnimation.beginTime = beginTime
		menuIcons01TranslationXAnimation.fillMode = fillMode
		menuIcons01TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-01__root"]?.layer.add(menuIcons01TranslationXAnimation, forKey:"Input_Animation2_TranslationX")

		let menuIcons01TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		menuIcons01TranslationYAnimation.duration = 1.320
		menuIcons01TranslationYAnimation.values = [0.000, 220.412, 220.412] as [Float]
		menuIcons01TranslationYAnimation.keyTimes = [0.000, 0.265, 1.000] as [NSNumber]
		menuIcons01TranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
		menuIcons01TranslationYAnimation.beginTime = beginTime
		menuIcons01TranslationYAnimation.fillMode = fillMode
		menuIcons01TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-01__root"]?.layer.add(menuIcons01TranslationYAnimation, forKey:"Input_Animation2_TranslationY")

		let circMaskScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		circMaskScaleXAnimation.duration = 1.320
		circMaskScaleXAnimation.values = [0.225, 0.225, 0.345, 0.345] as [Float]
		circMaskScaleXAnimation.keyTimes = [0.000, 0.121, 0.394, 1.000] as [NSNumber]
		circMaskScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		circMaskScaleXAnimation.beginTime = beginTime
		circMaskScaleXAnimation.fillMode = fillMode
		circMaskScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["circ_mask__xScale"]?.layer.add(circMaskScaleXAnimation, forKey:"Input_Animation2_ScaleX")

		let circMaskTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		circMaskTranslationXAnimation.duration = 1.320
		circMaskTranslationXAnimation.values = [0.000, 0.000, 217.324, 217.324] as [Float]
		circMaskTranslationXAnimation.keyTimes = [0.000, 0.121, 0.394, 1.000] as [NSNumber]
		circMaskTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		circMaskTranslationXAnimation.beginTime = beginTime
		circMaskTranslationXAnimation.fillMode = fillMode
		circMaskTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["circ_mask__root"]?.layer.add(circMaskTranslationXAnimation, forKey:"Input_Animation2_TranslationX")

		let circMaskTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		circMaskTranslationYAnimation.duration = 1.320
		circMaskTranslationYAnimation.values = [0.000, 0.000, -132.360, -132.360] as [Float]
		circMaskTranslationYAnimation.keyTimes = [0.000, 0.121, 0.394, 1.000] as [NSNumber]
		circMaskTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		circMaskTranslationYAnimation.beginTime = beginTime
		circMaskTranslationYAnimation.fillMode = fillMode
		circMaskTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["circ_mask__root"]?.layer.add(circMaskTranslationYAnimation, forKey:"Input_Animation2_TranslationY")

		let inputLines181MaskTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		inputLines181MaskTranslationXAnimation.duration = 1.320
		inputLines181MaskTranslationXAnimation.values = [0.000, 0.000, 401.141, 401.141, 402.023, 155.852, 155.852] as [Float]
		inputLines181MaskTranslationXAnimation.keyTimes = [0.000, 0.780, 0.848, 0.856, 0.856, 0.924, 1.000] as [NSNumber]
		inputLines181MaskTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, instantTiming, instantTiming, linearTiming, linearTiming]
		inputLines181MaskTranslationXAnimation.beginTime = beginTime
		inputLines181MaskTranslationXAnimation.fillMode = fillMode
		inputLines181MaskTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Input_lines-18_1_mask__root"]?.layer.add(inputLines181MaskTranslationXAnimation, forKey:"Input_Animation2_TranslationX")

		let inputLines181MaskTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		inputLines181MaskTranslationYAnimation.duration = 1.320
		inputLines181MaskTranslationYAnimation.values = [0.000, 0.000, -0.979, -0.979, 483.552, 474.224, 474.224] as [Float]
		inputLines181MaskTranslationYAnimation.keyTimes = [0.000, 0.780, 0.848, 0.856, 0.856, 0.924, 1.000] as [NSNumber]
		inputLines181MaskTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, instantTiming, instantTiming, linearTiming, linearTiming]
		inputLines181MaskTranslationYAnimation.beginTime = beginTime
		inputLines181MaskTranslationYAnimation.fillMode = fillMode
		inputLines181MaskTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Input_lines-18_1_mask__root"]?.layer.add(inputLines181MaskTranslationYAnimation, forKey:"Input_Animation2_TranslationY")

		let input3OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		input3OpacityAnimation.duration = 1.320
		input3OpacityAnimation.values = [0.000, 0.000, 1.000, 1.000] as [Float]
		input3OpacityAnimation.keyTimes = [0.000, 0.886, 0.917, 1.000] as [NSNumber]
		input3OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		input3OpacityAnimation.beginTime = beginTime
		input3OpacityAnimation.fillMode = fillMode
		input3OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Input_3__root"]?.layer.add(input3OpacityAnimation, forKey:"Input_Animation2_Opacity")
	}

	func removeInputAnimation2Animation() {
		self.layer.removeAnimation(forKey: "InputAnimation2")
		self.viewsByName["Input_lines-18_mask__root"]?.layer.removeAnimation(forKey: "Input_Animation2_Rotation")
		self.viewsByName["Input_lines-18_mask__xScale"]?.layer.removeAnimation(forKey: "Input_Animation2_ScaleX")
		self.viewsByName["Input_lines-18_mask__yScale"]?.layer.removeAnimation(forKey: "Input_Animation2_ScaleY")
		self.viewsByName["Input_lines-18_mask__root"]?.layer.removeAnimation(forKey: "Input_Animation2_TranslationX")
		self.viewsByName["Input_lines-18_mask__root"]?.layer.removeAnimation(forKey: "Input_Animation2_TranslationY")
		self.viewsByName["menu_icons-02__xScale"]?.layer.removeAnimation(forKey: "Input_Animation2_ScaleX")
		self.viewsByName["menu_icons-02__yScale"]?.layer.removeAnimation(forKey: "Input_Animation2_ScaleY")
		self.viewsByName["menu_icons-02__root"]?.layer.removeAnimation(forKey: "Input_Animation2_TranslationX")
		self.viewsByName["menu_icons-02__root"]?.layer.removeAnimation(forKey: "Input_Animation2_TranslationY")
		self.viewsByName["frame_mask__xScale"]?.layer.removeAnimation(forKey: "Input_Animation2_ScaleX")
		self.viewsByName["frame_mask__root"]?.layer.removeAnimation(forKey: "Input_Animation2_TranslationX")
		self.viewsByName["frame_mask__root"]?.layer.removeAnimation(forKey: "Input_Animation2_TranslationY")
		self.viewsByName["Input_7__root"]?.layer.removeAnimation(forKey: "Input_Animation2_Opacity")
		self.viewsByName["Input_5__root"]?.layer.removeAnimation(forKey: "Input_Animation2_Opacity")
		self.viewsByName["Input_2__root"]?.layer.removeAnimation(forKey: "Input_Animation2_Opacity")
		self.viewsByName["menu_icons-04__xScale"]?.layer.removeAnimation(forKey: "Input_Animation2_ScaleX")
		self.viewsByName["menu_icons-04__yScale"]?.layer.removeAnimation(forKey: "Input_Animation2_ScaleY")
		self.viewsByName["menu_icons-04__root"]?.layer.removeAnimation(forKey: "Input_Animation2_TranslationX")
		self.viewsByName["menu_icons-04__root"]?.layer.removeAnimation(forKey: "Input_Animation2_TranslationY")
		self.viewsByName["Input_4__root"]?.layer.removeAnimation(forKey: "Input_Animation2_Opacity")
		self.viewsByName["input_beforeAnimation-17__root"]?.layer.removeAnimation(forKey: "Input_Animation2_Opacity")
		self.viewsByName["InputBtn1-01__root"]?.layer.removeAnimation(forKey: "Input_Animation2_Opacity")
		self.viewsByName["menu_icons-01__xScale"]?.layer.removeAnimation(forKey: "Input_Animation2_ScaleX")
		self.viewsByName["menu_icons-01__yScale"]?.layer.removeAnimation(forKey: "Input_Animation2_ScaleY")
		self.viewsByName["menu_icons-01__root"]?.layer.removeAnimation(forKey: "Input_Animation2_TranslationX")
		self.viewsByName["menu_icons-01__root"]?.layer.removeAnimation(forKey: "Input_Animation2_TranslationY")
		self.viewsByName["circ_mask__xScale"]?.layer.removeAnimation(forKey: "Input_Animation2_ScaleX")
		self.viewsByName["circ_mask__root"]?.layer.removeAnimation(forKey: "Input_Animation2_TranslationX")
		self.viewsByName["circ_mask__root"]?.layer.removeAnimation(forKey: "Input_Animation2_TranslationY")
		self.viewsByName["Input_lines-18_1_mask__root"]?.layer.removeAnimation(forKey: "Input_Animation2_TranslationX")
		self.viewsByName["Input_lines-18_1_mask__root"]?.layer.removeAnimation(forKey: "Input_Animation2_TranslationY")
		self.viewsByName["Input_3__root"]?.layer.removeAnimation(forKey: "Input_Animation2_Opacity")
	}

	// - MARK: Input_Animation2_reversed

	func addInputAnimation2ReversedAnimation() {
		addInputAnimation2ReversedAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addInputAnimation2ReversedAnimation(completion: ((Bool) -> Void)?) {
		addInputAnimation2ReversedAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addInputAnimation2ReversedAnimation(removedOnCompletion: Bool) {
		addInputAnimation2ReversedAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addInputAnimation2ReversedAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addInputAnimation2ReversedAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addInputAnimation2ReversedAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let instantTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionDefault)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 1.320
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "InputAnimation2Reversed")
			self.animationCompletions[layer.animation(forKey: "InputAnimation2Reversed")!] = complete
		}

		let inputLines18MaskRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		inputLines18MaskRotationAnimation.duration = 1.320
		inputLines18MaskRotationAnimation.values = [7.183, 7.183, 6.952, 6.643, 5.570, 5.806, 5.806] as [Float]
		inputLines18MaskRotationAnimation.keyTimes = [0.000, 0.144, 0.220, 0.379, 0.409, 0.591, 1.000] as [NSNumber]
		inputLines18MaskRotationAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		inputLines18MaskRotationAnimation.beginTime = beginTime
		inputLines18MaskRotationAnimation.fillMode = fillMode
		inputLines18MaskRotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Input_lines-18_mask__root"]?.layer.add(inputLines18MaskRotationAnimation, forKey:"Input_Animation2_reversed_Rotation")

		let inputLines18MaskScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		inputLines18MaskScaleXAnimation.duration = 1.320
		inputLines18MaskScaleXAnimation.values = [0.962, 0.962, 0.237, 0.193, 0.119, 0.119] as [Float]
		inputLines18MaskScaleXAnimation.keyTimes = [0.000, 0.250, 0.280, 0.455, 0.500, 1.000] as [NSNumber]
		inputLines18MaskScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		inputLines18MaskScaleXAnimation.beginTime = beginTime
		inputLines18MaskScaleXAnimation.fillMode = fillMode
		inputLines18MaskScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Input_lines-18_mask__xScale"]?.layer.add(inputLines18MaskScaleXAnimation, forKey:"Input_Animation2_reversed_ScaleX")

		let inputLines18MaskScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		inputLines18MaskScaleYAnimation.duration = 1.320
		inputLines18MaskScaleYAnimation.values = [0.737, 0.737, 0.406, 0.794, 0.561, 0.561] as [Float]
		inputLines18MaskScaleYAnimation.keyTimes = [0.000, 0.015, 0.220, 0.303, 0.500, 1.000] as [NSNumber]
		inputLines18MaskScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		inputLines18MaskScaleYAnimation.beginTime = beginTime
		inputLines18MaskScaleYAnimation.fillMode = fillMode
		inputLines18MaskScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Input_lines-18_mask__yScale"]?.layer.add(inputLines18MaskScaleYAnimation, forKey:"Input_Animation2_reversed_ScaleY")

		let inputLines18MaskTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		inputLines18MaskTranslationXAnimation.duration = 1.320
		inputLines18MaskTranslationXAnimation.values = [600.355, 600.355, 1086.068, 959.810, 789.771, 323.352, 263.248, 118.748, 55.999, -13.704, -158.575, -265.159, -251.813, -244.607, -55.159, 106.398, 0.000, 0.000] as [Float]
		inputLines18MaskTranslationXAnimation.keyTimes = [0.000, 0.015, 0.061, 0.083, 0.144, 0.220, 0.227, 0.250, 0.280, 0.303, 0.341, 0.379, 0.409, 0.417, 0.455, 0.553, 0.606, 1.000] as [NSNumber]
		inputLines18MaskTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		inputLines18MaskTranslationXAnimation.beginTime = beginTime
		inputLines18MaskTranslationXAnimation.fillMode = fillMode
		inputLines18MaskTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Input_lines-18_mask__root"]?.layer.add(inputLines18MaskTranslationXAnimation, forKey:"Input_Animation2_reversed_TranslationX")

		let inputLines18MaskTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		inputLines18MaskTranslationYAnimation.duration = 1.320
		inputLines18MaskTranslationYAnimation.values = [154.457, 154.457, 125.354, -213.701, -518.349, -989.490, -1000.771, -1009.841, -1033.424, -943.245, -656.432, -436.427, -397.392, -390.979, -257.557, -37.117, 0.000, 0.000] as [Float]
		inputLines18MaskTranslationYAnimation.keyTimes = [0.000, 0.015, 0.061, 0.083, 0.144, 0.220, 0.227, 0.250, 0.280, 0.303, 0.341, 0.379, 0.409, 0.417, 0.455, 0.553, 0.606, 1.000] as [NSNumber]
		inputLines18MaskTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		inputLines18MaskTranslationYAnimation.beginTime = beginTime
		inputLines18MaskTranslationYAnimation.fillMode = fillMode
		inputLines18MaskTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Input_lines-18_mask__root"]?.layer.add(inputLines18MaskTranslationYAnimation, forKey:"Input_Animation2_reversed_TranslationY")

		let menuIcons02ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		menuIcons02ScaleXAnimation.duration = 1.320
		menuIcons02ScaleXAnimation.values = [0.164, 0.164, 0.241, 0.241] as [Float]
		menuIcons02ScaleXAnimation.keyTimes = [0.000, 0.470, 0.735, 1.000] as [NSNumber]
		menuIcons02ScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		menuIcons02ScaleXAnimation.beginTime = beginTime
		menuIcons02ScaleXAnimation.fillMode = fillMode
		menuIcons02ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-02__xScale"]?.layer.add(menuIcons02ScaleXAnimation, forKey:"Input_Animation2_reversed_ScaleX")

		let menuIcons02ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		menuIcons02ScaleYAnimation.duration = 1.320
		menuIcons02ScaleYAnimation.values = [0.164, 0.164, 0.241, 0.241] as [Float]
		menuIcons02ScaleYAnimation.keyTimes = [0.000, 0.470, 0.735, 1.000] as [NSNumber]
		menuIcons02ScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		menuIcons02ScaleYAnimation.beginTime = beginTime
		menuIcons02ScaleYAnimation.fillMode = fillMode
		menuIcons02ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-02__yScale"]?.layer.add(menuIcons02ScaleYAnimation, forKey:"Input_Animation2_reversed_ScaleY")

		let menuIcons02TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		menuIcons02TranslationXAnimation.duration = 1.320
		menuIcons02TranslationXAnimation.values = [-115.577, -115.577, 0.000, 0.000] as [Float]
		menuIcons02TranslationXAnimation.keyTimes = [0.000, 0.470, 0.735, 1.000] as [NSNumber]
		menuIcons02TranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		menuIcons02TranslationXAnimation.beginTime = beginTime
		menuIcons02TranslationXAnimation.fillMode = fillMode
		menuIcons02TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-02__root"]?.layer.add(menuIcons02TranslationXAnimation, forKey:"Input_Animation2_reversed_TranslationX")

		let menuIcons02TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		menuIcons02TranslationYAnimation.duration = 1.320
		menuIcons02TranslationYAnimation.values = [174.978, 174.978, 0.000, 0.000] as [Float]
		menuIcons02TranslationYAnimation.keyTimes = [0.000, 0.470, 0.735, 1.000] as [NSNumber]
		menuIcons02TranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		menuIcons02TranslationYAnimation.beginTime = beginTime
		menuIcons02TranslationYAnimation.fillMode = fillMode
		menuIcons02TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-02__root"]?.layer.add(menuIcons02TranslationYAnimation, forKey:"Input_Animation2_reversed_TranslationY")

		let frameMaskScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		frameMaskScaleXAnimation.duration = 1.320
		frameMaskScaleXAnimation.values = [0.319, 0.319, 0.059] as [Float]
		frameMaskScaleXAnimation.keyTimes = [0.000, 0.909, 1.000] as [NSNumber]
		frameMaskScaleXAnimation.timingFunctions = [linearTiming, linearTiming]
		frameMaskScaleXAnimation.beginTime = beginTime
		frameMaskScaleXAnimation.fillMode = fillMode
		frameMaskScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["frame_mask__xScale"]?.layer.add(frameMaskScaleXAnimation, forKey:"Input_Animation2_reversed_ScaleX")

		let frameMaskTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		frameMaskTranslationXAnimation.duration = 1.320
		frameMaskTranslationXAnimation.values = [266.889, 266.889, 109.389, 0.000] as [Float]
		frameMaskTranslationXAnimation.keyTimes = [0.000, 0.758, 0.909, 1.000] as [NSNumber]
		frameMaskTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		frameMaskTranslationXAnimation.beginTime = beginTime
		frameMaskTranslationXAnimation.fillMode = fillMode
		frameMaskTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["frame_mask__root"]?.layer.add(frameMaskTranslationXAnimation, forKey:"Input_Animation2_reversed_TranslationX")

		let frameMaskTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		frameMaskTranslationYAnimation.duration = 1.320
		frameMaskTranslationYAnimation.values = [-161.884, -161.884, -60.446, 0.000] as [Float]
		frameMaskTranslationYAnimation.keyTimes = [0.000, 0.758, 0.909, 1.000] as [NSNumber]
		frameMaskTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		frameMaskTranslationYAnimation.beginTime = beginTime
		frameMaskTranslationYAnimation.fillMode = fillMode
		frameMaskTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["frame_mask__root"]?.layer.add(frameMaskTranslationYAnimation, forKey:"Input_Animation2_reversed_TranslationY")

		let input7OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		input7OpacityAnimation.duration = 1.320
		input7OpacityAnimation.values = [1.000, 1.000, 0.000, 0.000] as [Float]
		input7OpacityAnimation.keyTimes = [0.000, 0.038, 0.076, 1.000] as [NSNumber]
		input7OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		input7OpacityAnimation.beginTime = beginTime
		input7OpacityAnimation.fillMode = fillMode
		input7OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Input_7__root"]?.layer.add(input7OpacityAnimation, forKey:"Input_Animation2_reversed_Opacity")

		let input5OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		input5OpacityAnimation.duration = 1.320
		input5OpacityAnimation.values = [1.000, 1.000, 0.000, 0.000] as [Float]
		input5OpacityAnimation.keyTimes = [0.000, 0.121, 0.167, 1.000] as [NSNumber]
		input5OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		input5OpacityAnimation.beginTime = beginTime
		input5OpacityAnimation.fillMode = fillMode
		input5OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Input_5__root"]?.layer.add(input5OpacityAnimation, forKey:"Input_Animation2_reversed_Opacity")

		let input2OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		input2OpacityAnimation.duration = 1.320
		input2OpacityAnimation.values = [1.000, 1.000, 0.000, 0.000] as [Float]
		input2OpacityAnimation.keyTimes = [0.000, 0.129, 0.167, 1.000] as [NSNumber]
		input2OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		input2OpacityAnimation.beginTime = beginTime
		input2OpacityAnimation.fillMode = fillMode
		input2OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Input_2__root"]?.layer.add(input2OpacityAnimation, forKey:"Input_Animation2_reversed_Opacity")

		let menuIcons04ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		menuIcons04ScaleXAnimation.duration = 1.320
		menuIcons04ScaleXAnimation.values = [0.164, 0.164, 0.240, 0.240] as [Float]
		menuIcons04ScaleXAnimation.keyTimes = [0.000, 0.205, 0.470, 1.000] as [NSNumber]
		menuIcons04ScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		menuIcons04ScaleXAnimation.beginTime = beginTime
		menuIcons04ScaleXAnimation.fillMode = fillMode
		menuIcons04ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-04__xScale"]?.layer.add(menuIcons04ScaleXAnimation, forKey:"Input_Animation2_reversed_ScaleX")

		let menuIcons04ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		menuIcons04ScaleYAnimation.duration = 1.320
		menuIcons04ScaleYAnimation.values = [0.164, 0.164, 0.240, 0.240] as [Float]
		menuIcons04ScaleYAnimation.keyTimes = [0.000, 0.205, 0.470, 1.000] as [NSNumber]
		menuIcons04ScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		menuIcons04ScaleYAnimation.beginTime = beginTime
		menuIcons04ScaleYAnimation.fillMode = fillMode
		menuIcons04ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-04__yScale"]?.layer.add(menuIcons04ScaleYAnimation, forKey:"Input_Animation2_reversed_ScaleY")

		let menuIcons04TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		menuIcons04TranslationXAnimation.duration = 1.320
		menuIcons04TranslationXAnimation.values = [-234.960, -234.960, 0.000, 0.000] as [Float]
		menuIcons04TranslationXAnimation.keyTimes = [0.000, 0.205, 0.470, 1.000] as [NSNumber]
		menuIcons04TranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		menuIcons04TranslationXAnimation.beginTime = beginTime
		menuIcons04TranslationXAnimation.fillMode = fillMode
		menuIcons04TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-04__root"]?.layer.add(menuIcons04TranslationXAnimation, forKey:"Input_Animation2_reversed_TranslationX")

		let menuIcons04TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		menuIcons04TranslationYAnimation.duration = 1.320
		menuIcons04TranslationYAnimation.values = [49.160, 49.160, 0.000, 0.000] as [Float]
		menuIcons04TranslationYAnimation.keyTimes = [0.000, 0.205, 0.470, 1.000] as [NSNumber]
		menuIcons04TranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		menuIcons04TranslationYAnimation.beginTime = beginTime
		menuIcons04TranslationYAnimation.fillMode = fillMode
		menuIcons04TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-04__root"]?.layer.add(menuIcons04TranslationYAnimation, forKey:"Input_Animation2_reversed_TranslationY")

		let input4OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		input4OpacityAnimation.duration = 1.320
		input4OpacityAnimation.values = [1.000, 0.000, 0.000] as [Float]
		input4OpacityAnimation.keyTimes = [0.000, 0.030, 1.000] as [NSNumber]
		input4OpacityAnimation.timingFunctions = [linearTiming, linearTiming]
		input4OpacityAnimation.beginTime = beginTime
		input4OpacityAnimation.fillMode = fillMode
		input4OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Input_4__root"]?.layer.add(input4OpacityAnimation, forKey:"Input_Animation2_reversed_Opacity")

		let inputBeforeAnimation17OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		inputBeforeAnimation17OpacityAnimation.duration = 1.320
		inputBeforeAnimation17OpacityAnimation.values = [0.000, 0.000, 1.000] as [Float]
		inputBeforeAnimation17OpacityAnimation.keyTimes = [0.000, 0.902, 1.000] as [NSNumber]
		inputBeforeAnimation17OpacityAnimation.timingFunctions = [linearTiming, linearTiming]
		inputBeforeAnimation17OpacityAnimation.beginTime = beginTime
		inputBeforeAnimation17OpacityAnimation.fillMode = fillMode
		inputBeforeAnimation17OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["input_beforeAnimation-17__root"]?.layer.add(inputBeforeAnimation17OpacityAnimation, forKey:"Input_Animation2_reversed_Opacity")

		let inputBtn101OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		inputBtn101OpacityAnimation.duration = 1.320
		inputBtn101OpacityAnimation.values = [1.000, 1.000, 0.000, 0.000] as [Float]
		inputBtn101OpacityAnimation.keyTimes = [0.000, 0.205, 0.258, 1.000] as [NSNumber]
		inputBtn101OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		inputBtn101OpacityAnimation.beginTime = beginTime
		inputBtn101OpacityAnimation.fillMode = fillMode
		inputBtn101OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["InputBtn1-01__root"]?.layer.add(inputBtn101OpacityAnimation, forKey:"Input_Animation2_reversed_Opacity")

		let menuIcons01ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		menuIcons01ScaleXAnimation.duration = 1.320
		menuIcons01ScaleXAnimation.values = [0.164, 0.164, 0.242] as [Float]
		menuIcons01ScaleXAnimation.keyTimes = [0.000, 0.735, 1.000] as [NSNumber]
		menuIcons01ScaleXAnimation.timingFunctions = [linearTiming, linearTiming]
		menuIcons01ScaleXAnimation.beginTime = beginTime
		menuIcons01ScaleXAnimation.fillMode = fillMode
		menuIcons01ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-01__xScale"]?.layer.add(menuIcons01ScaleXAnimation, forKey:"Input_Animation2_reversed_ScaleX")

		let menuIcons01ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		menuIcons01ScaleYAnimation.duration = 1.320
		menuIcons01ScaleYAnimation.values = [0.164, 0.164, 0.242] as [Float]
		menuIcons01ScaleYAnimation.keyTimes = [0.000, 0.735, 1.000] as [NSNumber]
		menuIcons01ScaleYAnimation.timingFunctions = [linearTiming, linearTiming]
		menuIcons01ScaleYAnimation.beginTime = beginTime
		menuIcons01ScaleYAnimation.fillMode = fillMode
		menuIcons01ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-01__yScale"]?.layer.add(menuIcons01ScaleYAnimation, forKey:"Input_Animation2_reversed_ScaleY")

		let menuIcons01TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		menuIcons01TranslationXAnimation.duration = 1.320
		menuIcons01TranslationXAnimation.values = [-52.041, -52.041, 0.000] as [Float]
		menuIcons01TranslationXAnimation.keyTimes = [0.000, 0.735, 1.000] as [NSNumber]
		menuIcons01TranslationXAnimation.timingFunctions = [linearTiming, linearTiming]
		menuIcons01TranslationXAnimation.beginTime = beginTime
		menuIcons01TranslationXAnimation.fillMode = fillMode
		menuIcons01TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-01__root"]?.layer.add(menuIcons01TranslationXAnimation, forKey:"Input_Animation2_reversed_TranslationX")

		let menuIcons01TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		menuIcons01TranslationYAnimation.duration = 1.320
		menuIcons01TranslationYAnimation.values = [220.412, 220.412, 0.000] as [Float]
		menuIcons01TranslationYAnimation.keyTimes = [0.000, 0.735, 1.000] as [NSNumber]
		menuIcons01TranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
		menuIcons01TranslationYAnimation.beginTime = beginTime
		menuIcons01TranslationYAnimation.fillMode = fillMode
		menuIcons01TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-01__root"]?.layer.add(menuIcons01TranslationYAnimation, forKey:"Input_Animation2_reversed_TranslationY")

		let circMaskScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		circMaskScaleXAnimation.duration = 1.320
		circMaskScaleXAnimation.values = [0.345, 0.345, 0.225, 0.225] as [Float]
		circMaskScaleXAnimation.keyTimes = [0.000, 0.606, 0.879, 1.000] as [NSNumber]
		circMaskScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		circMaskScaleXAnimation.beginTime = beginTime
		circMaskScaleXAnimation.fillMode = fillMode
		circMaskScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["circ_mask__xScale"]?.layer.add(circMaskScaleXAnimation, forKey:"Input_Animation2_reversed_ScaleX")

		let circMaskTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		circMaskTranslationXAnimation.duration = 1.320
		circMaskTranslationXAnimation.values = [217.324, 217.324, 0.000, 0.000] as [Float]
		circMaskTranslationXAnimation.keyTimes = [0.000, 0.606, 0.879, 1.000] as [NSNumber]
		circMaskTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		circMaskTranslationXAnimation.beginTime = beginTime
		circMaskTranslationXAnimation.fillMode = fillMode
		circMaskTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["circ_mask__root"]?.layer.add(circMaskTranslationXAnimation, forKey:"Input_Animation2_reversed_TranslationX")

		let circMaskTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		circMaskTranslationYAnimation.duration = 1.320
		circMaskTranslationYAnimation.values = [-132.360, -132.360, 0.000, 0.000] as [Float]
		circMaskTranslationYAnimation.keyTimes = [0.000, 0.606, 0.879, 1.000] as [NSNumber]
		circMaskTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		circMaskTranslationYAnimation.beginTime = beginTime
		circMaskTranslationYAnimation.fillMode = fillMode
		circMaskTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["circ_mask__root"]?.layer.add(circMaskTranslationYAnimation, forKey:"Input_Animation2_reversed_TranslationY")

		let inputLines181MaskTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		inputLines181MaskTranslationXAnimation.duration = 1.320
		inputLines181MaskTranslationXAnimation.values = [155.852, 155.852, 402.023, 402.023, 401.141, 401.141, 0.000, 0.000] as [Float]
		inputLines181MaskTranslationXAnimation.keyTimes = [0.000, 0.076, 0.144, 0.144, 0.145, 0.152, 0.220, 1.000] as [NSNumber]
		inputLines181MaskTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, instantTiming, instantTiming, linearTiming, linearTiming, linearTiming]
		inputLines181MaskTranslationXAnimation.beginTime = beginTime
		inputLines181MaskTranslationXAnimation.fillMode = fillMode
		inputLines181MaskTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Input_lines-18_1_mask__root"]?.layer.add(inputLines181MaskTranslationXAnimation, forKey:"Input_Animation2_reversed_TranslationX")

		let inputLines181MaskTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		inputLines181MaskTranslationYAnimation.duration = 1.320
		inputLines181MaskTranslationYAnimation.values = [474.224, 474.224, 483.552, 483.552, -0.979, -0.979, 0.000, 0.000] as [Float]
		inputLines181MaskTranslationYAnimation.keyTimes = [0.000, 0.076, 0.144, 0.144, 0.145, 0.152, 0.220, 1.000] as [NSNumber]
		inputLines181MaskTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, instantTiming, instantTiming, linearTiming, linearTiming, linearTiming]
		inputLines181MaskTranslationYAnimation.beginTime = beginTime
		inputLines181MaskTranslationYAnimation.fillMode = fillMode
		inputLines181MaskTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Input_lines-18_1_mask__root"]?.layer.add(inputLines181MaskTranslationYAnimation, forKey:"Input_Animation2_reversed_TranslationY")

		let input3OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		input3OpacityAnimation.duration = 1.320
		input3OpacityAnimation.values = [1.000, 1.000, 0.000, 0.000] as [Float]
		input3OpacityAnimation.keyTimes = [0.000, 0.083, 0.114, 1.000] as [NSNumber]
		input3OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		input3OpacityAnimation.beginTime = beginTime
		input3OpacityAnimation.fillMode = fillMode
		input3OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Input_3__root"]?.layer.add(input3OpacityAnimation, forKey:"Input_Animation2_reversed_Opacity")
	}

	func removeInputAnimation2ReversedAnimation() {
		self.layer.removeAnimation(forKey: "InputAnimation2Reversed")
		self.viewsByName["Input_lines-18_mask__root"]?.layer.removeAnimation(forKey: "Input_Animation2_reversed_Rotation")
		self.viewsByName["Input_lines-18_mask__xScale"]?.layer.removeAnimation(forKey: "Input_Animation2_reversed_ScaleX")
		self.viewsByName["Input_lines-18_mask__yScale"]?.layer.removeAnimation(forKey: "Input_Animation2_reversed_ScaleY")
		self.viewsByName["Input_lines-18_mask__root"]?.layer.removeAnimation(forKey: "Input_Animation2_reversed_TranslationX")
		self.viewsByName["Input_lines-18_mask__root"]?.layer.removeAnimation(forKey: "Input_Animation2_reversed_TranslationY")
		self.viewsByName["menu_icons-02__xScale"]?.layer.removeAnimation(forKey: "Input_Animation2_reversed_ScaleX")
		self.viewsByName["menu_icons-02__yScale"]?.layer.removeAnimation(forKey: "Input_Animation2_reversed_ScaleY")
		self.viewsByName["menu_icons-02__root"]?.layer.removeAnimation(forKey: "Input_Animation2_reversed_TranslationX")
		self.viewsByName["menu_icons-02__root"]?.layer.removeAnimation(forKey: "Input_Animation2_reversed_TranslationY")
		self.viewsByName["frame_mask__xScale"]?.layer.removeAnimation(forKey: "Input_Animation2_reversed_ScaleX")
		self.viewsByName["frame_mask__root"]?.layer.removeAnimation(forKey: "Input_Animation2_reversed_TranslationX")
		self.viewsByName["frame_mask__root"]?.layer.removeAnimation(forKey: "Input_Animation2_reversed_TranslationY")
		self.viewsByName["Input_7__root"]?.layer.removeAnimation(forKey: "Input_Animation2_reversed_Opacity")
		self.viewsByName["Input_5__root"]?.layer.removeAnimation(forKey: "Input_Animation2_reversed_Opacity")
		self.viewsByName["Input_2__root"]?.layer.removeAnimation(forKey: "Input_Animation2_reversed_Opacity")
		self.viewsByName["menu_icons-04__xScale"]?.layer.removeAnimation(forKey: "Input_Animation2_reversed_ScaleX")
		self.viewsByName["menu_icons-04__yScale"]?.layer.removeAnimation(forKey: "Input_Animation2_reversed_ScaleY")
		self.viewsByName["menu_icons-04__root"]?.layer.removeAnimation(forKey: "Input_Animation2_reversed_TranslationX")
		self.viewsByName["menu_icons-04__root"]?.layer.removeAnimation(forKey: "Input_Animation2_reversed_TranslationY")
		self.viewsByName["Input_4__root"]?.layer.removeAnimation(forKey: "Input_Animation2_reversed_Opacity")
		self.viewsByName["input_beforeAnimation-17__root"]?.layer.removeAnimation(forKey: "Input_Animation2_reversed_Opacity")
		self.viewsByName["InputBtn1-01__root"]?.layer.removeAnimation(forKey: "Input_Animation2_reversed_Opacity")
		self.viewsByName["menu_icons-01__xScale"]?.layer.removeAnimation(forKey: "Input_Animation2_reversed_ScaleX")
		self.viewsByName["menu_icons-01__yScale"]?.layer.removeAnimation(forKey: "Input_Animation2_reversed_ScaleY")
		self.viewsByName["menu_icons-01__root"]?.layer.removeAnimation(forKey: "Input_Animation2_reversed_TranslationX")
		self.viewsByName["menu_icons-01__root"]?.layer.removeAnimation(forKey: "Input_Animation2_reversed_TranslationY")
		self.viewsByName["circ_mask__xScale"]?.layer.removeAnimation(forKey: "Input_Animation2_reversed_ScaleX")
		self.viewsByName["circ_mask__root"]?.layer.removeAnimation(forKey: "Input_Animation2_reversed_TranslationX")
		self.viewsByName["circ_mask__root"]?.layer.removeAnimation(forKey: "Input_Animation2_reversed_TranslationY")
		self.viewsByName["Input_lines-18_1_mask__root"]?.layer.removeAnimation(forKey: "Input_Animation2_reversed_TranslationX")
		self.viewsByName["Input_lines-18_1_mask__root"]?.layer.removeAnimation(forKey: "Input_Animation2_reversed_TranslationY")
		self.viewsByName["Input_3__root"]?.layer.removeAnimation(forKey: "Input_Animation2_reversed_Opacity")
	}

	// MARK: CAAnimationDelegate
	func animationDidStop(_ anim: CAAnimation, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValue(forKey: anim)
			completion(flag)
		}
	}

	func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimation(forKey: "InputAnimation2")
		self.layer.removeAnimation(forKey: "InputAnimation2Reversed")
	}
}