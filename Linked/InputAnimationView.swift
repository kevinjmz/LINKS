//
// InputAnimationView.swift
// Generated by Core Animator version 1.5.2 on 1/30/18.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

private class _InputAnimationPassthroughView: UIView {
    override func point(inside point: CGPoint, with event: UIEvent?) -> Bool {
        for subview in subviews as [UIView] {
            if subview.point(inside: convert(point, to: subview), with: event) { return true }
        }
        return false
    }
}

@IBDesignable
class InputAnimationView : UIView, CAAnimationDelegate {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 2049, height: 1536))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .scaleToFill:
				break
			case .scaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransform(scaleX: xScale, y: yScale)
			scalingView.center = CGPoint(x:self.bounds.midX, y:self.bounds.midY)
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = Bundle(for:type(of: self))
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:2049, height:1536)
		__scaling__.center = CGPoint(x:1024.8, y:768.3)
		__scaling__.clipsToBounds = true
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let inputF312__root = _InputAnimationPassthroughView()
		let inputF312__xScale = _InputAnimationPassthroughView()
		let inputF312__yScale = _InputAnimationPassthroughView()
		let inputF312 = UIImageView()
		let imgInputF312 = UIImage(named:"input_f3-12.png", in: bundle, compatibleWith: nil)
		if imgInputF312 == nil {
			print("** Warning: Could not create image from 'input_f3-12.png'")
		}
		inputF312.image = imgInputF312
		inputF312.contentMode = .center
		inputF312.bounds = CGRect(x:0, y:0, width:2049.0, height:1537.0)
		inputF312__root.layer.position = CGPoint(x:1024.844, y:768.256)
		inputF312__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		inputF312__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		inputF312__root.transform = CGAffineTransform(rotationAngle: 0.000)
		inputF312__root.addSubview(inputF312__xScale)
		inputF312__xScale.addSubview(inputF312__yScale)
		inputF312__yScale.addSubview(inputF312)
		__scaling__.addSubview(inputF312__root)
		viewsByName["input_f3-12__root"] = inputF312__root
		viewsByName["input_f3-12__xScale"] = inputF312__xScale
		viewsByName["input_f3-12__yScale"] = inputF312__yScale
		viewsByName["input_f3-12"] = inputF312

		let icon02Menu01__root = _InputAnimationPassthroughView()
		let icon02Menu01__xScale = _InputAnimationPassthroughView()
		let icon02Menu01__yScale = _InputAnimationPassthroughView()
		let icon02Menu01 = UIImageView()
		let imgIcon02Menu01 = UIImage(named:"icon_02_menu-01.png", in: bundle, compatibleWith: nil)
		if imgIcon02Menu01 == nil {
			print("** Warning: Could not create image from 'icon_02_menu-01.png'")
		}
		icon02Menu01.image = imgIcon02Menu01
		icon02Menu01.contentMode = .center
		icon02Menu01.bounds = CGRect(x:0, y:0, width:2917.0, height:2917.0)
		icon02Menu01__root.layer.position = CGPoint(x:341.944, y:1208.568)
		icon02Menu01__xScale.transform = CGAffineTransform(scaleX: 0.24, y: 1.00)
		icon02Menu01__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.24)
		icon02Menu01__root.transform = CGAffineTransform(rotationAngle: 0.000)
		icon02Menu01__root.addSubview(icon02Menu01__xScale)
		icon02Menu01__xScale.addSubview(icon02Menu01__yScale)
		icon02Menu01__yScale.addSubview(icon02Menu01)
		__scaling__.addSubview(icon02Menu01__root)
		viewsByName["icon_02_menu-01__root"] = icon02Menu01__root
		viewsByName["icon_02_menu-01__xScale"] = icon02Menu01__xScale
		viewsByName["icon_02_menu-01__yScale"] = icon02Menu01__yScale
		viewsByName["icon_02_menu-01"] = icon02Menu01

		let menuIcons01__root = _InputAnimationPassthroughView()
		let menuIcons01__xScale = _InputAnimationPassthroughView()
		let menuIcons01__yScale = _InputAnimationPassthroughView()
		let menuIcons01 = UIImageView()
		let imgMenuIcons01 = UIImage(named:"menu_icons-01.png", in: bundle, compatibleWith: nil)
		if imgMenuIcons01 == nil {
			print("** Warning: Could not create image from 'menu_icons-01.png'")
		}
		menuIcons01.image = imgMenuIcons01
		menuIcons01.contentMode = .center
		menuIcons01.bounds = CGRect(x:0, y:0, width:642.0, height:642.0)
		menuIcons01__root.layer.position = CGPoint(x:148.611, y:992.223)
		menuIcons01__xScale.transform = CGAffineTransform(scaleX: 0.24, y: 1.00)
		menuIcons01__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.24)
		menuIcons01__root.transform = CGAffineTransform(rotationAngle: 0.000)
		menuIcons01__root.addSubview(menuIcons01__xScale)
		menuIcons01__xScale.addSubview(menuIcons01__yScale)
		menuIcons01__yScale.addSubview(menuIcons01)
		__scaling__.addSubview(menuIcons01__root)
		viewsByName["menu_icons-01__root"] = menuIcons01__root
		viewsByName["menu_icons-01__xScale"] = menuIcons01__xScale
		viewsByName["menu_icons-01__yScale"] = menuIcons01__yScale
		viewsByName["menu_icons-01"] = menuIcons01

		let menuIcons02__root = _InputAnimationPassthroughView()
		let menuIcons02__xScale = _InputAnimationPassthroughView()
		let menuIcons02__yScale = _InputAnimationPassthroughView()
		let menuIcons02 = UIImageView()
		let imgMenuIcons02 = UIImage(named:"menu_icons-02.png", in: bundle, compatibleWith: nil)
		if imgMenuIcons02 == nil {
			print("** Warning: Could not create image from 'menu_icons-02.png'")
		}
		menuIcons02.image = imgMenuIcons02
		menuIcons02.contentMode = .center
		menuIcons02.bounds = CGRect(x:0, y:0, width:642.0, height:642.0)
		menuIcons02__root.layer.position = CGPoint(x:337.290, y:1072.911)
		menuIcons02__xScale.transform = CGAffineTransform(scaleX: 0.24, y: 1.00)
		menuIcons02__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.24)
		menuIcons02__root.transform = CGAffineTransform(rotationAngle: 0.000)
		menuIcons02__root.addSubview(menuIcons02__xScale)
		menuIcons02__xScale.addSubview(menuIcons02__yScale)
		menuIcons02__yScale.addSubview(menuIcons02)
		__scaling__.addSubview(menuIcons02__root)
		viewsByName["menu_icons-02__root"] = menuIcons02__root
		viewsByName["menu_icons-02__xScale"] = menuIcons02__xScale
		viewsByName["menu_icons-02__yScale"] = menuIcons02__yScale
		viewsByName["menu_icons-02"] = menuIcons02

		let menuIcons03__root = _InputAnimationPassthroughView()
		let menuIcons03__xScale = _InputAnimationPassthroughView()
		let menuIcons03__yScale = _InputAnimationPassthroughView()
		let menuIcons03 = UIImageView()
		let imgMenuIcons03 = UIImage(named:"menu_icons-03.png", in: bundle, compatibleWith: nil)
		if imgMenuIcons03 == nil {
			print("** Warning: Could not create image from 'menu_icons-03.png'")
		}
		menuIcons03.image = imgMenuIcons03
		menuIcons03.contentMode = .center
		menuIcons03.bounds = CGRect(x:0, y:0, width:642.0, height:642.0)
		menuIcons03__root.layer.position = CGPoint(x:481.552, y:1217.840)
		menuIcons03__xScale.transform = CGAffineTransform(scaleX: 0.24, y: 1.00)
		menuIcons03__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.24)
		menuIcons03__root.transform = CGAffineTransform(rotationAngle: 0.000)
		menuIcons03__root.addSubview(menuIcons03__xScale)
		menuIcons03__xScale.addSubview(menuIcons03__yScale)
		menuIcons03__yScale.addSubview(menuIcons03)
		__scaling__.addSubview(menuIcons03__root)
		viewsByName["menu_icons-03__root"] = menuIcons03__root
		viewsByName["menu_icons-03__xScale"] = menuIcons03__xScale
		viewsByName["menu_icons-03__yScale"] = menuIcons03__yScale
		viewsByName["menu_icons-03"] = menuIcons03

		let menuIcons04__root = _InputAnimationPassthroughView()
		let menuIcons04__xScale = _InputAnimationPassthroughView()
		let menuIcons04__yScale = _InputAnimationPassthroughView()
		let menuIcons04 = UIImageView()
		let imgMenuIcons04 = UIImage(named:"menu_icons-04.png", in: bundle, compatibleWith: nil)
		if imgMenuIcons04 == nil {
			print("** Warning: Could not create image from 'menu_icons-04.png'")
		}
		menuIcons04.image = imgMenuIcons04
		menuIcons04.contentMode = .center
		menuIcons04.bounds = CGRect(x:0, y:0, width:642.0, height:642.0)
		menuIcons04__root.layer.position = CGPoint(x:557.951, y:1407.164)
		menuIcons04__xScale.transform = CGAffineTransform(scaleX: 0.24, y: 1.00)
		menuIcons04__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.24)
		menuIcons04__root.transform = CGAffineTransform(rotationAngle: 0.000)
		menuIcons04__root.addSubview(menuIcons04__xScale)
		menuIcons04__xScale.addSubview(menuIcons04__yScale)
		menuIcons04__yScale.addSubview(menuIcons04)
		__scaling__.addSubview(menuIcons04__root)
		viewsByName["menu_icons-04__root"] = menuIcons04__root
		viewsByName["menu_icons-04__xScale"] = menuIcons04__xScale
		viewsByName["menu_icons-04__yScale"] = menuIcons04__yScale
		viewsByName["menu_icons-04"] = menuIcons04

		let circ__root = _InputAnimationPassthroughView()
		let circ__xScale = _InputAnimationPassthroughView()
		let circ__yScale = _InputAnimationPassthroughView()
		let circ = UIImageView()
		let imgCirc = UIImage(named:"circ.png", in: bundle, compatibleWith: nil)
		if imgCirc == nil {
			print("** Warning: Could not create image from 'circ.png'")
		}
		circ.image = imgCirc
		circ.contentMode = .center
		circ.bounds = CGRect(x:0, y:0, width:199.0, height:199.0)
		circ__root.layer.position = CGPoint(x:482.239, y:1218.521)
		circ__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		circ__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		circ__root.transform = CGAffineTransform(rotationAngle: 0.000)
		circ__root.addSubview(circ__xScale)
		circ__xScale.addSubview(circ__yScale)
		circ__yScale.addSubview(circ)
		__scaling__.addSubview(circ__root)
		viewsByName["circ__root"] = circ__root
		viewsByName["circ__xScale"] = circ__xScale
		viewsByName["circ__yScale"] = circ__yScale
		viewsByName["circ"] = circ

		let circMask__root = _InputAnimationPassthroughView()
		let circMask__xScale = _InputAnimationPassthroughView()
		let circMask__yScale = _InputAnimationPassthroughView()
		let circMask = UIImageView()
		let imgSquare = UIImage(named:"square.png", in: bundle, compatibleWith: nil)
		if imgSquare == nil {
			print("** Warning: Could not create image from 'square.png'")
		}
		circMask.image = imgSquare
		circMask.contentMode = .center
		circMask.layer.anchorPoint = CGPoint(x:0.493, y:0.495)
		circMask.bounds = CGRect(x:0, y:0, width:185.0, height:184.5)
		circMask__root.layer.position = CGPoint(x:-11.798, y:171.309)
		circMask__xScale.transform = CGAffineTransform(scaleX: 0.31, y: 1.00)
		circMask__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.40)
		circMask__root.transform = CGAffineTransform(rotationAngle: 5.821)
		circMask__root.addSubview(circMask__xScale)
		circMask__xScale.addSubview(circMask__yScale)
		circMask__yScale.addSubview(circMask)
		circ.mask = circMask__root
		viewsByName["circ_mask__root"] = circMask__root
		viewsByName["circ_mask__xScale"] = circMask__xScale
		viewsByName["circ_mask__yScale"] = circMask__yScale
		viewsByName["circ_mask"] = circMask

		let frame__root = _InputAnimationPassthroughView()
		let frame__xScale = _InputAnimationPassthroughView()
		let frame__yScale = _InputAnimationPassthroughView()
		let frame = UIImageView()
		let imgFrame = UIImage(named:"frame.png", in: bundle, compatibleWith: nil)
		if imgFrame == nil {
			print("** Warning: Could not create image from 'frame.png'")
		}
		frame.image = imgFrame
		frame.contentMode = .center
		frame.bounds = CGRect(x:0, y:0, width:294.0, height:262.0)
		frame__root.layer.position = CGPoint(x:376.958, y:1274.709)
		frame__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		frame__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		frame__root.transform = CGAffineTransform(rotationAngle: 0.000)
		frame__root.addSubview(frame__xScale)
		frame__xScale.addSubview(frame__yScale)
		frame__yScale.addSubview(frame)
		__scaling__.addSubview(frame__root)
		viewsByName["frame__root"] = frame__root
		viewsByName["frame__xScale"] = frame__xScale
		viewsByName["frame__yScale"] = frame__yScale
		viewsByName["frame"] = frame

		let frameMask__root = _InputAnimationPassthroughView()
		let frameMask__xScale = _InputAnimationPassthroughView()
		let frameMask__yScale = _InputAnimationPassthroughView()
		let frameMask = UIImageView()
		frameMask.image = imgSquare
		frameMask.contentMode = .center
		frameMask.bounds = CGRect(x:0, y:0, width:185.0, height:184.5)
		frameMask__root.layer.position = CGPoint(x:-1.089, y:236.517)
		frameMask__xScale.transform = CGAffineTransform(scaleX: 0.13, y: 1.00)
		frameMask__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.42)
		frameMask__root.transform = CGAffineTransform(rotationAngle: 5.454)
		frameMask__root.addSubview(frameMask__xScale)
		frameMask__xScale.addSubview(frameMask__yScale)
		frameMask__yScale.addSubview(frameMask)
		frame.mask = frameMask__root
		viewsByName["frame_mask__root"] = frameMask__root
		viewsByName["frame_mask__xScale"] = frameMask__xScale
		viewsByName["frame_mask__yScale"] = frameMask__yScale
		viewsByName["frame_mask"] = frameMask

		let lines__root = _InputAnimationPassthroughView()
		let lines__xScale = _InputAnimationPassthroughView()
		let lines__yScale = _InputAnimationPassthroughView()
		let lines = UIImageView()
		let imgLines = UIImage(named:"lines.png", in: bundle, compatibleWith: nil)
		if imgLines == nil {
			print("** Warning: Could not create image from 'lines.png'")
		}
		lines.image = imgLines
		lines.contentMode = .center
		lines.bounds = CGRect(x:0, y:0, width:1039.0, height:997.0)
		lines__root.layer.position = CGPoint(x:979.341, y:771.256)
		lines__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		lines__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		lines__root.transform = CGAffineTransform(rotationAngle: 0.000)
		lines__root.addSubview(lines__xScale)
		lines__xScale.addSubview(lines__yScale)
		lines__yScale.addSubview(lines)
		__scaling__.addSubview(lines__root)
		viewsByName["lines__root"] = lines__root
		viewsByName["lines__xScale"] = lines__xScale
		viewsByName["lines__yScale"] = lines__yScale
		viewsByName["lines"] = lines

		let linesMask__root = _InputAnimationPassthroughView()
		let linesMask__xScale = _InputAnimationPassthroughView()
		let linesMask__yScale = _InputAnimationPassthroughView()
		let linesMask = UIImageView()
		linesMask.image = imgSquare
		linesMask.contentMode = .center
		linesMask.bounds = CGRect(x:0, y:0, width:185.0, height:184.5)
		linesMask__root.layer.position = CGPoint(x:127.063, y:930.431)
		linesMask__xScale.transform = CGAffineTransform(scaleX: 0.19, y: 1.00)
		linesMask__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.58)
		linesMask__root.transform = CGAffineTransform(rotationAngle: 5.713)
		linesMask__root.addSubview(linesMask__xScale)
		linesMask__xScale.addSubview(linesMask__yScale)
		linesMask__yScale.addSubview(linesMask)
		lines.mask = linesMask__root
		viewsByName["lines_mask__root"] = linesMask__root
		viewsByName["lines_mask__xScale"] = linesMask__xScale
		viewsByName["lines_mask__yScale"] = linesMask__yScale
		viewsByName["lines_mask"] = linesMask

		let lines22__root = _InputAnimationPassthroughView()
		let lines22__xScale = _InputAnimationPassthroughView()
		let lines22__yScale = _InputAnimationPassthroughView()
		let lines22 = UIImageView()
		lines22.image = imgLines
		lines22.contentMode = .center
		lines22.bounds = CGRect(x:0, y:0, width:1039.0, height:997.0)
		lines22__root.layer.position = CGPoint(x:979.341, y:772.256)
		lines22__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		lines22__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		lines22__root.transform = CGAffineTransform(rotationAngle: 0.000)
		lines22__root.addSubview(lines22__xScale)
		lines22__xScale.addSubview(lines22__yScale)
		lines22__yScale.addSubview(lines22)
		__scaling__.addSubview(lines22__root)
		viewsByName["lines 2__root"] = lines22__root
		viewsByName["lines 2__xScale"] = lines22__xScale
		viewsByName["lines 2__yScale"] = lines22__yScale
		viewsByName["lines 2"] = lines22

		let lines2Mask__root = _InputAnimationPassthroughView()
		let lines2Mask__xScale = _InputAnimationPassthroughView()
		let lines2Mask__yScale = _InputAnimationPassthroughView()
		let lines2Mask = UIImageView()
		lines2Mask.image = imgSquare
		lines2Mask.contentMode = .center
		lines2Mask.bounds = CGRect(x:0, y:0, width:185.0, height:184.5)
		lines2Mask__root.layer.position = CGPoint(x:374.775, y:542.272)
		lines2Mask__xScale.transform = CGAffineTransform(scaleX: 0.25, y: 1.00)
		lines2Mask__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.00)
		lines2Mask__root.transform = CGAffineTransform(rotationAngle: 5.630)
		lines2Mask__root.addSubview(lines2Mask__xScale)
		lines2Mask__xScale.addSubview(lines2Mask__yScale)
		lines2Mask__yScale.addSubview(lines2Mask)
		lines22.mask = lines2Mask__root
		viewsByName["lines 2_mask__root"] = lines2Mask__root
		viewsByName["lines 2_mask__xScale"] = lines2Mask__xScale
		viewsByName["lines 2_mask__yScale"] = lines2Mask__yScale
		viewsByName["lines 2_mask"] = lines2Mask

		let lines3__root = _InputAnimationPassthroughView()
		let lines3__xScale = _InputAnimationPassthroughView()
		let lines3__yScale = _InputAnimationPassthroughView()
		let lines3 = UIImageView()
		lines3.image = imgLines
		lines3.contentMode = .center
		lines3.bounds = CGRect(x:0, y:0, width:1039.0, height:997.0)
		lines3__root.layer.position = CGPoint(x:979.669, y:771.256)
		lines3__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		lines3__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		lines3__root.transform = CGAffineTransform(rotationAngle: 0.000)
		lines3__root.addSubview(lines3__xScale)
		lines3__xScale.addSubview(lines3__yScale)
		lines3__yScale.addSubview(lines3)
		__scaling__.addSubview(lines3__root)
		viewsByName["lines 3__root"] = lines3__root
		viewsByName["lines 3__xScale"] = lines3__xScale
		viewsByName["lines 3__yScale"] = lines3__yScale
		viewsByName["lines 3"] = lines3

		let lines3Mask__root = _InputAnimationPassthroughView()
		let lines3Mask__xScale = _InputAnimationPassthroughView()
		let lines3Mask__yScale = _InputAnimationPassthroughView()
		let lines3Mask = UIImageView()
		lines3Mask.image = imgSquare
		lines3Mask.contentMode = .center
		lines3Mask.bounds = CGRect(x:0, y:0, width:185.0, height:184.5)
		lines3Mask__root.layer.position = CGPoint(x:373.470, y:552.042)
		lines3Mask__xScale.transform = CGAffineTransform(scaleX: 0.18, y: 1.00)
		lines3Mask__yScale.transform = CGAffineTransform(scaleX: 1.00, y: -0.00)
		lines3Mask__root.transform = CGAffineTransform(rotationAngle: 5.633)
		lines3Mask__root.addSubview(lines3Mask__xScale)
		lines3Mask__xScale.addSubview(lines3Mask__yScale)
		lines3Mask__yScale.addSubview(lines3Mask)
		lines3.mask = lines3Mask__root
		viewsByName["lines 3_mask__root"] = lines3Mask__root
		viewsByName["lines 3_mask__xScale"] = lines3Mask__xScale
		viewsByName["lines 3_mask__yScale"] = lines3Mask__yScale
		viewsByName["lines 3_mask"] = lines3Mask

		let lines1__root = _InputAnimationPassthroughView()
		let lines1__xScale = _InputAnimationPassthroughView()
		let lines1__yScale = _InputAnimationPassthroughView()
		let lines1 = UIImageView()
		let imgLines1 = UIImage(named:"lines_1.png", in: bundle, compatibleWith: nil)
		if imgLines1 == nil {
			print("** Warning: Could not create image from 'lines_1.png'")
		}
		lines1.image = imgLines1
		lines1.contentMode = .center
		lines1.bounds = CGRect(x:0, y:0, width:1039.0, height:997.0)
		lines1__root.layer.position = CGPoint(x:978.341, y:773.256)
		lines1__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		lines1__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		lines1__root.transform = CGAffineTransform(rotationAngle: 0.000)
		lines1__root.addSubview(lines1__xScale)
		lines1__xScale.addSubview(lines1__yScale)
		lines1__yScale.addSubview(lines1)
		__scaling__.addSubview(lines1__root)
		viewsByName["lines_1__root"] = lines1__root
		viewsByName["lines_1__xScale"] = lines1__xScale
		viewsByName["lines_1__yScale"] = lines1__yScale
		viewsByName["lines_1"] = lines1

		let lines1Mask__root = _InputAnimationPassthroughView()
		let lines1Mask__xScale = _InputAnimationPassthroughView()
		let lines1Mask__yScale = _InputAnimationPassthroughView()
		let lines1Mask = UIImageView()
		lines1Mask.image = imgSquare
		lines1Mask.contentMode = .center
		lines1Mask.bounds = CGRect(x:0, y:0, width:185.0, height:184.5)
		lines1Mask__root.layer.position = CGPoint(x:634.358, y:226.538)
		lines1Mask__xScale.transform = CGAffineTransform(scaleX: 0.86, y: 1.00)
		lines1Mask__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.11)
		lines1Mask__root.transform = CGAffineTransform(rotationAngle: 5.711)
		lines1Mask__root.addSubview(lines1Mask__xScale)
		lines1Mask__xScale.addSubview(lines1Mask__yScale)
		lines1Mask__yScale.addSubview(lines1Mask)
		lines1.mask = lines1Mask__root
		viewsByName["lines_1_mask__root"] = lines1Mask__root
		viewsByName["lines_1_mask__xScale"] = lines1Mask__xScale
		viewsByName["lines_1_mask__yScale"] = lines1Mask__yScale
		viewsByName["lines_1_mask"] = lines1Mask

		let lines2__root = _InputAnimationPassthroughView()
		let lines2__xScale = _InputAnimationPassthroughView()
		let lines2__yScale = _InputAnimationPassthroughView()
		let lines2 = UIImageView()
		let imgLines2 = UIImage(named:"lines_2.png", in: bundle, compatibleWith: nil)
		if imgLines2 == nil {
			print("** Warning: Could not create image from 'lines_2.png'")
		}
		lines2.image = imgLines2
		lines2.contentMode = .center
		lines2.bounds = CGRect(x:0, y:0, width:1039.0, height:997.0)
		lines2__root.layer.position = CGPoint(x:979.580, y:771.256)
		lines2__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		lines2__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		lines2__root.transform = CGAffineTransform(rotationAngle: 0.000)
		lines2__root.addSubview(lines2__xScale)
		lines2__xScale.addSubview(lines2__yScale)
		lines2__yScale.addSubview(lines2)
		__scaling__.addSubview(lines2__root)
		viewsByName["lines_2__root"] = lines2__root
		viewsByName["lines_2__xScale"] = lines2__xScale
		viewsByName["lines_2__yScale"] = lines2__yScale
		viewsByName["lines_2"] = lines2

		let lines2Mask2__root = _InputAnimationPassthroughView()
		let lines2Mask2__xScale = _InputAnimationPassthroughView()
		let lines2Mask2__yScale = _InputAnimationPassthroughView()
		let lines2Mask2 = UIImageView()
		lines2Mask2.image = imgSquare
		lines2Mask2.contentMode = .center
		lines2Mask2.bounds = CGRect(x:0, y:0, width:185.0, height:184.5)
		lines2Mask2__root.layer.position = CGPoint(x:754.413, y:390.704)
		lines2Mask2__xScale.transform = CGAffineTransform(scaleX: 0.92, y: 1.00)
		lines2Mask2__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.14)
		lines2Mask2__root.transform = CGAffineTransform(rotationAngle: 5.839)
		lines2Mask2__root.addSubview(lines2Mask2__xScale)
		lines2Mask2__xScale.addSubview(lines2Mask2__yScale)
		lines2Mask2__yScale.addSubview(lines2Mask2)
		lines2.mask = lines2Mask2__root
		viewsByName["lines_2_mask__root"] = lines2Mask2__root
		viewsByName["lines_2_mask__xScale"] = lines2Mask2__xScale
		viewsByName["lines_2_mask__yScale"] = lines2Mask2__yScale
		viewsByName["lines_2_mask"] = lines2Mask2

		let input1__root = _InputAnimationPassthroughView()
		let input1__xScale = _InputAnimationPassthroughView()
		let input1__yScale = _InputAnimationPassthroughView()
		let input1 = UIImageView()
		let imgInput1 = UIImage(named:"Input_1.png", in: bundle, compatibleWith: nil)
		if imgInput1 == nil {
			print("** Warning: Could not create image from 'Input_1.png'")
		}
		input1.image = imgInput1
		input1.contentMode = .center
		input1.bounds = CGRect(x:0, y:0, width:227.0, height:227.0)
		input1__root.layer.position = CGPoint(x:346.650, y:494.523)
		input1__root.alpha = 0.00
		input1__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		input1__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		input1__root.transform = CGAffineTransform(rotationAngle: 0.000)
		input1__root.addSubview(input1__xScale)
		input1__xScale.addSubview(input1__yScale)
		input1__yScale.addSubview(input1)
		__scaling__.addSubview(input1__root)
		viewsByName["Input_1__root"] = input1__root
		viewsByName["Input_1__xScale"] = input1__xScale
		viewsByName["Input_1__yScale"] = input1__yScale
		viewsByName["Input_1"] = input1

		let input2__root = _InputAnimationPassthroughView()
		let input2__xScale = _InputAnimationPassthroughView()
		let input2__yScale = _InputAnimationPassthroughView()
		let input2 = UIImageView()
		let imgInput2 = UIImage(named:"Input_2.png", in: bundle, compatibleWith: nil)
		if imgInput2 == nil {
			print("** Warning: Could not create image from 'Input_2.png'")
		}
		input2.image = imgInput2
		input2.contentMode = .center
		input2.bounds = CGRect(x:0, y:0, width:227.0, height:227.0)
		input2__root.layer.position = CGPoint(x:743.653, y:260.779)
		input2__root.alpha = 0.00
		input2__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		input2__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		input2__root.transform = CGAffineTransform(rotationAngle: 0.000)
		input2__root.addSubview(input2__xScale)
		input2__xScale.addSubview(input2__yScale)
		input2__yScale.addSubview(input2)
		__scaling__.addSubview(input2__root)
		viewsByName["Input_2__root"] = input2__root
		viewsByName["Input_2__xScale"] = input2__xScale
		viewsByName["Input_2__yScale"] = input2__yScale
		viewsByName["Input_2"] = input2

		let input3__root = _InputAnimationPassthroughView()
		let input3__xScale = _InputAnimationPassthroughView()
		let input3__yScale = _InputAnimationPassthroughView()
		let input3 = UIImageView()
		let imgInput3 = UIImage(named:"Input_3.png", in: bundle, compatibleWith: nil)
		if imgInput3 == nil {
			print("** Warning: Could not create image from 'Input_3.png'")
		}
		input3.image = imgInput3
		input3.contentMode = .center
		input3.bounds = CGRect(x:0, y:0, width:227.0, height:227.0)
		input3__root.layer.position = CGPoint(x:711.939, y:695.995)
		input3__root.alpha = 0.00
		input3__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		input3__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		input3__root.transform = CGAffineTransform(rotationAngle: 0.000)
		input3__root.addSubview(input3__xScale)
		input3__xScale.addSubview(input3__yScale)
		input3__yScale.addSubview(input3)
		__scaling__.addSubview(input3__root)
		viewsByName["Input_3__root"] = input3__root
		viewsByName["Input_3__xScale"] = input3__xScale
		viewsByName["Input_3__yScale"] = input3__yScale
		viewsByName["Input_3"] = input3

		let input4__root = _InputAnimationPassthroughView()
		let input4__xScale = _InputAnimationPassthroughView()
		let input4__yScale = _InputAnimationPassthroughView()
		let input4 = UIImageView()
		let imgInput4 = UIImage(named:"Input_4.png", in: bundle, compatibleWith: nil)
		if imgInput4 == nil {
			print("** Warning: Could not create image from 'Input_4.png'")
		}
		input4.image = imgInput4
		input4.contentMode = .center
		input4.bounds = CGRect(x:0, y:0, width:227.0, height:227.0)
		input4__root.layer.position = CGPoint(x:1156.841, y:199.982)
		input4__root.alpha = 0.00
		input4__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		input4__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		input4__root.transform = CGAffineTransform(rotationAngle: 0.000)
		input4__root.addSubview(input4__xScale)
		input4__xScale.addSubview(input4__yScale)
		input4__yScale.addSubview(input4)
		__scaling__.addSubview(input4__root)
		viewsByName["Input_4__root"] = input4__root
		viewsByName["Input_4__xScale"] = input4__xScale
		viewsByName["Input_4__yScale"] = input4__yScale
		viewsByName["Input_4"] = input4

		let input5__root = _InputAnimationPassthroughView()
		let input5__xScale = _InputAnimationPassthroughView()
		let input5__yScale = _InputAnimationPassthroughView()
		let input5 = UIImageView()
		let imgInput5 = UIImage(named:"Input_5.png", in: bundle, compatibleWith: nil)
		if imgInput5 == nil {
			print("** Warning: Could not create image from 'Input_5.png'")
		}
		input5.image = imgInput5
		input5.contentMode = .center
		input5.bounds = CGRect(x:0, y:0, width:227.0, height:227.0)
		input5__root.layer.position = CGPoint(x:1143.841, y:587.804)
		input5__root.alpha = 0.00
		input5__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		input5__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		input5__root.transform = CGAffineTransform(rotationAngle: 0.000)
		input5__root.addSubview(input5__xScale)
		input5__xScale.addSubview(input5__yScale)
		input5__yScale.addSubview(input5)
		__scaling__.addSubview(input5__root)
		viewsByName["Input_5__root"] = input5__root
		viewsByName["Input_5__xScale"] = input5__xScale
		viewsByName["Input_5__yScale"] = input5__yScale
		viewsByName["Input_5"] = input5

		let input6__root = _InputAnimationPassthroughView()
		let input6__xScale = _InputAnimationPassthroughView()
		let input6__yScale = _InputAnimationPassthroughView()
		let input6 = UIImageView()
		let imgInput6 = UIImage(named:"Input_6.png", in: bundle, compatibleWith: nil)
		if imgInput6 == nil {
			print("** Warning: Could not create image from 'Input_6.png'")
		}
		input6.image = imgInput6
		input6.contentMode = .center
		input6.bounds = CGRect(x:0, y:0, width:226.0, height:227.0)
		input6__root.layer.position = CGPoint(x:1422.225, y:1097.693)
		input6__root.alpha = 0.00
		input6__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		input6__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		input6__root.transform = CGAffineTransform(rotationAngle: 0.000)
		input6__root.addSubview(input6__xScale)
		input6__xScale.addSubview(input6__yScale)
		input6__yScale.addSubview(input6)
		__scaling__.addSubview(input6__root)
		viewsByName["Input_6__root"] = input6__root
		viewsByName["Input_6__xScale"] = input6__xScale
		viewsByName["Input_6__yScale"] = input6__yScale
		viewsByName["Input_6"] = input6

		let input7__root = _InputAnimationPassthroughView()
		let input7__xScale = _InputAnimationPassthroughView()
		let input7__yScale = _InputAnimationPassthroughView()
		let input7 = UIImageView()
		let imgInput7 = UIImage(named:"Input_7.png", in: bundle, compatibleWith: nil)
		if imgInput7 == nil {
			print("** Warning: Could not create image from 'Input_7.png'")
		}
		input7.image = imgInput7
		input7.contentMode = .center
		input7.bounds = CGRect(x:0, y:0, width:227.0, height:226.0)
		input7__root.layer.position = CGPoint(x:1590.817, y:254.932)
		input7__root.alpha = 0.00
		input7__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		input7__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		input7__root.transform = CGAffineTransform(rotationAngle: 0.000)
		input7__root.addSubview(input7__xScale)
		input7__xScale.addSubview(input7__yScale)
		input7__yScale.addSubview(input7)
		__scaling__.addSubview(input7__root)
		viewsByName["Input_7__root"] = input7__root
		viewsByName["Input_7__xScale"] = input7__xScale
		viewsByName["Input_7__yScale"] = input7__yScale
		viewsByName["Input_7"] = input7

		let input8__root = _InputAnimationPassthroughView()
		let input8__xScale = _InputAnimationPassthroughView()
		let input8__yScale = _InputAnimationPassthroughView()
		let input8 = UIImageView()
		let imgInput8 = UIImage(named:"Input_8.png", in: bundle, compatibleWith: nil)
		if imgInput8 == nil {
			print("** Warning: Could not create image from 'Input_8.png'")
		}
		input8.image = imgInput8
		input8.contentMode = .center
		input8.bounds = CGRect(x:0, y:0, width:226.0, height:227.0)
		input8__root.layer.position = CGPoint(x:1554.325, y:702.936)
		input8__root.alpha = 0.00
		input8__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		input8__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		input8__root.transform = CGAffineTransform(rotationAngle: 0.000)
		input8__root.addSubview(input8__xScale)
		input8__xScale.addSubview(input8__yScale)
		input8__yScale.addSubview(input8)
		__scaling__.addSubview(input8__root)
		viewsByName["Input_8__root"] = input8__root
		viewsByName["Input_8__xScale"] = input8__xScale
		viewsByName["Input_8__yScale"] = input8__yScale
		viewsByName["Input_8"] = input8

		let input9__root = _InputAnimationPassthroughView()
		let input9__xScale = _InputAnimationPassthroughView()
		let input9__yScale = _InputAnimationPassthroughView()
		let input9 = UIImageView()
		let imgInput9 = UIImage(named:"Input_9.png", in: bundle, compatibleWith: nil)
		if imgInput9 == nil {
			print("** Warning: Could not create image from 'Input_9.png'")
		}
		input9.image = imgInput9
		input9.contentMode = .center
		input9.bounds = CGRect(x:0, y:0, width:227.0, height:227.0)
		input9__root.layer.position = CGPoint(x:972.502, y:1014.040)
		input9__root.alpha = 0.00
		input9__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		input9__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		input9__root.transform = CGAffineTransform(rotationAngle: 0.000)
		input9__root.addSubview(input9__xScale)
		input9__xScale.addSubview(input9__yScale)
		input9__yScale.addSubview(input9)
		__scaling__.addSubview(input9__root)
		viewsByName["Input_9__root"] = input9__root
		viewsByName["Input_9__xScale"] = input9__xScale
		viewsByName["Input_9__yScale"] = input9__yScale
		viewsByName["Input_9"] = input9

		let input10__root = _InputAnimationPassthroughView()
		let input10__xScale = _InputAnimationPassthroughView()
		let input10__yScale = _InputAnimationPassthroughView()
		let input10 = UIImageView()
		let imgInput10 = UIImage(named:"Input_10.png", in: bundle, compatibleWith: nil)
		if imgInput10 == nil {
			print("** Warning: Could not create image from 'Input_10.png'")
		}
		input10.image = imgInput10
		input10.contentMode = .center
		input10.bounds = CGRect(x:0, y:0, width:227.0, height:227.0)
		input10__root.layer.position = CGPoint(x:1072.938, y:1377.762)
		input10__root.alpha = 0.00
		input10__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		input10__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		input10__root.transform = CGAffineTransform(rotationAngle: 0.000)
		input10__root.addSubview(input10__xScale)
		input10__xScale.addSubview(input10__yScale)
		input10__yScale.addSubview(input10)
		__scaling__.addSubview(input10__root)
		viewsByName["Input_10__root"] = input10__root
		viewsByName["Input_10__xScale"] = input10__xScale
		viewsByName["Input_10__yScale"] = input10__yScale
		viewsByName["Input_10"] = input10

		let info__root = _InputAnimationPassthroughView()
		let info__xScale = _InputAnimationPassthroughView()
		let info__yScale = _InputAnimationPassthroughView()
		let info = UIImageView()
		let imgInfo = UIImage(named:"info.png", in: bundle, compatibleWith: nil)
		if imgInfo == nil {
			print("** Warning: Could not create image from 'info.png'")
		}
		info.image = imgInfo
		info.contentMode = .center
		info.bounds = CGRect(x:0, y:0, width:552.0, height:552.0)
		info__root.layer.position = CGPoint(x:1940.680, y:117.561)
		info__root.alpha = 0.00
		info__xScale.transform = CGAffineTransform(scaleX: 0.24, y: 1.00)
		info__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.24)
		info__root.transform = CGAffineTransform(rotationAngle: 0.000)
		info__root.addSubview(info__xScale)
		info__xScale.addSubview(info__yScale)
		info__yScale.addSubview(info)
		__scaling__.addSubview(info__root)
		viewsByName["info__root"] = info__root
		viewsByName["info__xScale"] = info__xScale
		viewsByName["info__yScale"] = info__yScale
		viewsByName["info"] = info

		self.viewsByName = viewsByName
	}

	// - MARK: InputAnimation

	func addInputAnimation() {
		addInputAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addInputAnimation(completion: ((Bool) -> Void)?) {
		addInputAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addInputAnimation(removedOnCompletion: Bool) {
		addInputAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addInputAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addInputAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addInputAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let instantTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionDefault)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 1.400
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "InputAnimation")
			self.animationCompletions[layer.animation(forKey: "InputAnimation")!] = complete
		}

		let input2OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		input2OpacityAnimation.duration = 1.400
		input2OpacityAnimation.values = [0.000, 0.000, 1.000, 1.000] as [Float]
		input2OpacityAnimation.keyTimes = [0.000, 0.821, 0.893, 1.000] as [NSNumber]
		input2OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		input2OpacityAnimation.beginTime = beginTime
		input2OpacityAnimation.fillMode = fillMode
		input2OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Input_2__root"]?.layer.add(input2OpacityAnimation, forKey:"InputAnimation_Opacity")

		let input3OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		input3OpacityAnimation.duration = 1.400
		input3OpacityAnimation.values = [0.000, 0.000, 1.000, 1.000] as [Float]
		input3OpacityAnimation.keyTimes = [0.000, 0.732, 0.786, 1.000] as [NSNumber]
		input3OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		input3OpacityAnimation.beginTime = beginTime
		input3OpacityAnimation.fillMode = fillMode
		input3OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Input_3__root"]?.layer.add(input3OpacityAnimation, forKey:"InputAnimation_Opacity")

		let input1OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		input1OpacityAnimation.duration = 1.400
		input1OpacityAnimation.values = [0.000, 0.000, 0.304, 0.304] as [Float]
		input1OpacityAnimation.keyTimes = [0.000, 0.839, 0.893, 1.000] as [NSNumber]
		input1OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		input1OpacityAnimation.beginTime = beginTime
		input1OpacityAnimation.fillMode = fillMode
		input1OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Input_1__root"]?.layer.add(input1OpacityAnimation, forKey:"InputAnimation_Opacity")

		let lines3MaskScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		lines3MaskScaleXAnimation.duration = 1.400
		lines3MaskScaleXAnimation.values = [0.181, 0.181, 0.176, 0.145, 0.145] as [Float]
		lines3MaskScaleXAnimation.keyTimes = [0.000, 0.696, 0.732, 0.786, 1.000] as [NSNumber]
		lines3MaskScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		lines3MaskScaleXAnimation.beginTime = beginTime
		lines3MaskScaleXAnimation.fillMode = fillMode
		lines3MaskScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["lines 3_mask__xScale"]?.layer.add(lines3MaskScaleXAnimation, forKey:"InputAnimation_ScaleX")

		let lines3MaskScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		lines3MaskScaleYAnimation.duration = 1.400
		lines3MaskScaleYAnimation.values = [-0.000, -0.011, -0.421, -0.048, -0.429, 0.008, 0.008] as [Float]
		lines3MaskScaleYAnimation.keyTimes = [0.000, 0.696, 0.732, 0.875, 0.911, 0.929, 1.000] as [NSNumber]
		lines3MaskScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		lines3MaskScaleYAnimation.beginTime = beginTime
		lines3MaskScaleYAnimation.fillMode = fillMode
		lines3MaskScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["lines 3_mask__yScale"]?.layer.add(lines3MaskScaleYAnimation, forKey:"InputAnimation_ScaleY")

		let lines3MaskTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		lines3MaskTranslationXAnimation.duration = 1.400
		lines3MaskTranslationXAnimation.values = [0.000, 0.000, 23.266, 95.753, 177.444, 206.984, 240.370, 280.241, 535.044, 552.509, 640.700, 660.708, 660.708] as [Float]
		lines3MaskTranslationXAnimation.keyTimes = [0.000, 0.696, 0.732, 0.768, 0.786, 0.821, 0.839, 0.857, 0.875, 0.893, 0.911, 0.929, 1.000] as [NSNumber]
		lines3MaskTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		lines3MaskTranslationXAnimation.beginTime = beginTime
		lines3MaskTranslationXAnimation.fillMode = fillMode
		lines3MaskTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["lines 3_mask__root"]?.layer.add(lines3MaskTranslationXAnimation, forKey:"InputAnimation_TranslationX")

		let lines3MaskTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		lines3MaskTranslationYAnimation.duration = 1.400
		lines3MaskTranslationYAnimation.values = [0.000, 0.000, 29.796, 123.774, 258.863, 330.039, 405.023, 479.348, -412.567, -382.052, -248.572, -213.615, -213.615] as [Float]
		lines3MaskTranslationYAnimation.keyTimes = [0.000, 0.696, 0.732, 0.768, 0.786, 0.821, 0.839, 0.857, 0.875, 0.893, 0.911, 0.929, 1.000] as [NSNumber]
		lines3MaskTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		lines3MaskTranslationYAnimation.beginTime = beginTime
		lines3MaskTranslationYAnimation.fillMode = fillMode
		lines3MaskTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["lines 3_mask__root"]?.layer.add(lines3MaskTranslationYAnimation, forKey:"InputAnimation_TranslationY")

		let frameMaskRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		frameMaskRotationAnimation.duration = 1.400
		frameMaskRotationAnimation.values = [5.454, 5.607, 5.607] as [Float]
		frameMaskRotationAnimation.keyTimes = [0.000, 0.393, 1.000] as [NSNumber]
		frameMaskRotationAnimation.timingFunctions = [linearTiming, linearTiming]
		frameMaskRotationAnimation.beginTime = beginTime
		frameMaskRotationAnimation.fillMode = fillMode
		frameMaskRotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["frame_mask__root"]?.layer.add(frameMaskRotationAnimation, forKey:"InputAnimation_Rotation")

		let frameMaskScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		frameMaskScaleXAnimation.duration = 1.400
		frameMaskScaleXAnimation.values = [0.127, 0.325, 0.325] as [Float]
		frameMaskScaleXAnimation.keyTimes = [0.000, 0.393, 1.000] as [NSNumber]
		frameMaskScaleXAnimation.timingFunctions = [linearTiming, linearTiming]
		frameMaskScaleXAnimation.beginTime = beginTime
		frameMaskScaleXAnimation.fillMode = fillMode
		frameMaskScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["frame_mask__xScale"]?.layer.add(frameMaskScaleXAnimation, forKey:"InputAnimation_ScaleX")

		let frameMaskTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		frameMaskTranslationXAnimation.duration = 1.400
		frameMaskTranslationXAnimation.values = [0.000, 247.116, 283.171, 345.968, 345.968] as [Float]
		frameMaskTranslationXAnimation.keyTimes = [0.000, 0.393, 0.518, 0.607, 1.000] as [NSNumber]
		frameMaskTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		frameMaskTranslationXAnimation.beginTime = beginTime
		frameMaskTranslationXAnimation.fillMode = fillMode
		frameMaskTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["frame_mask__root"]?.layer.add(frameMaskTranslationXAnimation, forKey:"InputAnimation_TranslationX")

		let frameMaskTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		frameMaskTranslationYAnimation.duration = 1.400
		frameMaskTranslationYAnimation.values = [0.000, -189.908, -234.416, -285.705, -285.705] as [Float]
		frameMaskTranslationYAnimation.keyTimes = [0.000, 0.393, 0.518, 0.607, 1.000] as [NSNumber]
		frameMaskTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		frameMaskTranslationYAnimation.beginTime = beginTime
		frameMaskTranslationYAnimation.fillMode = fillMode
		frameMaskTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["frame_mask__root"]?.layer.add(frameMaskTranslationYAnimation, forKey:"InputAnimation_TranslationY")

		let input8OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		input8OpacityAnimation.duration = 1.400
		input8OpacityAnimation.values = [0.000, 0.000, 1.000, 1.000] as [Float]
		input8OpacityAnimation.keyTimes = [0.000, 0.911, 0.964, 1.000] as [NSNumber]
		input8OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		input8OpacityAnimation.beginTime = beginTime
		input8OpacityAnimation.fillMode = fillMode
		input8OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Input_8__root"]?.layer.add(input8OpacityAnimation, forKey:"InputAnimation_Opacity")

		let input9OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		input9OpacityAnimation.duration = 1.400
		input9OpacityAnimation.values = [0.000, 0.000, 1.000, 1.000] as [Float]
		input9OpacityAnimation.keyTimes = [0.000, 0.750, 0.804, 1.000] as [NSNumber]
		input9OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		input9OpacityAnimation.beginTime = beginTime
		input9OpacityAnimation.fillMode = fillMode
		input9OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Input_9__root"]?.layer.add(input9OpacityAnimation, forKey:"InputAnimation_Opacity")

		let menuIcons02ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		menuIcons02ScaleXAnimation.duration = 1.400
		menuIcons02ScaleXAnimation.values = [0.239, 0.239, 0.161, 0.161] as [Float]
		menuIcons02ScaleXAnimation.keyTimes = [0.000, 0.250, 0.518, 1.000] as [NSNumber]
		menuIcons02ScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		menuIcons02ScaleXAnimation.beginTime = beginTime
		menuIcons02ScaleXAnimation.fillMode = fillMode
		menuIcons02ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-02__xScale"]?.layer.add(menuIcons02ScaleXAnimation, forKey:"InputAnimation_ScaleX")

		let menuIcons02ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		menuIcons02ScaleYAnimation.duration = 1.400
		menuIcons02ScaleYAnimation.values = [0.239, 0.239, 0.161, 0.161] as [Float]
		menuIcons02ScaleYAnimation.keyTimes = [0.000, 0.250, 0.518, 1.000] as [NSNumber]
		menuIcons02ScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		menuIcons02ScaleYAnimation.beginTime = beginTime
		menuIcons02ScaleYAnimation.fillMode = fillMode
		menuIcons02ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-02__yScale"]?.layer.add(menuIcons02ScaleYAnimation, forKey:"InputAnimation_ScaleY")

		let menuIcons02TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		menuIcons02TranslationXAnimation.duration = 1.400
		menuIcons02TranslationXAnimation.values = [0.000, 0.000, -102.088, -102.088] as [Float]
		menuIcons02TranslationXAnimation.keyTimes = [0.000, 0.250, 0.518, 1.000] as [NSNumber]
		menuIcons02TranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		menuIcons02TranslationXAnimation.beginTime = beginTime
		menuIcons02TranslationXAnimation.fillMode = fillMode
		menuIcons02TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-02__root"]?.layer.add(menuIcons02TranslationXAnimation, forKey:"InputAnimation_TranslationX")

		let menuIcons02TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		menuIcons02TranslationYAnimation.duration = 1.400
		menuIcons02TranslationYAnimation.values = [0.000, 0.000, 171.037, 171.037] as [Float]
		menuIcons02TranslationYAnimation.keyTimes = [0.000, 0.250, 0.518, 1.000] as [NSNumber]
		menuIcons02TranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		menuIcons02TranslationYAnimation.beginTime = beginTime
		menuIcons02TranslationYAnimation.fillMode = fillMode
		menuIcons02TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-02__root"]?.layer.add(menuIcons02TranslationYAnimation, forKey:"InputAnimation_TranslationY")

		let menuIcons04ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		menuIcons04ScaleXAnimation.duration = 1.400
		menuIcons04ScaleXAnimation.values = [0.237, 0.237, 0.164, 0.164] as [Float]
		menuIcons04ScaleXAnimation.keyTimes = [0.000, 0.518, 0.732, 1.000] as [NSNumber]
		menuIcons04ScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		menuIcons04ScaleXAnimation.beginTime = beginTime
		menuIcons04ScaleXAnimation.fillMode = fillMode
		menuIcons04ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-04__xScale"]?.layer.add(menuIcons04ScaleXAnimation, forKey:"InputAnimation_ScaleX")

		let menuIcons04ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		menuIcons04ScaleYAnimation.duration = 1.400
		menuIcons04ScaleYAnimation.values = [0.237, 0.237, 0.164, 0.164] as [Float]
		menuIcons04ScaleYAnimation.keyTimes = [0.000, 0.518, 0.732, 1.000] as [NSNumber]
		menuIcons04ScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		menuIcons04ScaleYAnimation.beginTime = beginTime
		menuIcons04ScaleYAnimation.fillMode = fillMode
		menuIcons04ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-04__yScale"]?.layer.add(menuIcons04ScaleYAnimation, forKey:"InputAnimation_ScaleY")

		let menuIcons04TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		menuIcons04TranslationXAnimation.duration = 1.400
		menuIcons04TranslationXAnimation.values = [0.000, 0.000, -240.732, -240.732] as [Float]
		menuIcons04TranslationXAnimation.keyTimes = [0.000, 0.518, 0.732, 1.000] as [NSNumber]
		menuIcons04TranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		menuIcons04TranslationXAnimation.beginTime = beginTime
		menuIcons04TranslationXAnimation.fillMode = fillMode
		menuIcons04TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-04__root"]?.layer.add(menuIcons04TranslationXAnimation, forKey:"InputAnimation_TranslationX")

		let menuIcons04TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		menuIcons04TranslationYAnimation.duration = 1.400
		menuIcons04TranslationYAnimation.values = [0.000, 0.000, 63.026, 63.026] as [Float]
		menuIcons04TranslationYAnimation.keyTimes = [0.000, 0.518, 0.732, 1.000] as [NSNumber]
		menuIcons04TranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		menuIcons04TranslationYAnimation.beginTime = beginTime
		menuIcons04TranslationYAnimation.fillMode = fillMode
		menuIcons04TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-04__root"]?.layer.add(menuIcons04TranslationYAnimation, forKey:"InputAnimation_TranslationY")

		let input6OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		input6OpacityAnimation.duration = 1.400
		input6OpacityAnimation.values = [0.000, 0.000, 1.000, 1.000] as [Float]
		input6OpacityAnimation.keyTimes = [0.000, 0.821, 0.875, 1.000] as [NSNumber]
		input6OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		input6OpacityAnimation.beginTime = beginTime
		input6OpacityAnimation.fillMode = fillMode
		input6OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Input_6__root"]?.layer.add(input6OpacityAnimation, forKey:"InputAnimation_Opacity")

		let input10OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		input10OpacityAnimation.duration = 1.400
		input10OpacityAnimation.values = [0.000, 0.000, 1.000, 1.000] as [Float]
		input10OpacityAnimation.keyTimes = [0.000, 0.839, 0.893, 1.000] as [NSNumber]
		input10OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		input10OpacityAnimation.beginTime = beginTime
		input10OpacityAnimation.fillMode = fillMode
		input10OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Input_10__root"]?.layer.add(input10OpacityAnimation, forKey:"InputAnimation_Opacity")

		let lines1MaskScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		lines1MaskScaleYAnimation.duration = 1.400
		lines1MaskScaleYAnimation.values = [0.107, 0.107, 0.754, -0.003, -0.003] as [Float]
		lines1MaskScaleYAnimation.keyTimes = [0.000, 0.786, 0.821, 0.839, 1.000] as [NSNumber]
		lines1MaskScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		lines1MaskScaleYAnimation.beginTime = beginTime
		lines1MaskScaleYAnimation.fillMode = fillMode
		lines1MaskScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["lines_1_mask__yScale"]?.layer.add(lines1MaskScaleYAnimation, forKey:"InputAnimation_ScaleY")

		let lines1MaskTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		lines1MaskTranslationXAnimation.duration = 1.400
		lines1MaskTranslationXAnimation.values = [0.000, 0.000, -32.321, -182.961, -220.776, -220.776] as [Float]
		lines1MaskTranslationXAnimation.keyTimes = [0.000, 0.786, 0.804, 0.821, 0.839, 1.000] as [NSNumber]
		lines1MaskTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		lines1MaskTranslationXAnimation.beginTime = beginTime
		lines1MaskTranslationXAnimation.fillMode = fillMode
		lines1MaskTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["lines_1_mask__root"]?.layer.add(lines1MaskTranslationXAnimation, forKey:"InputAnimation_TranslationX")

		let lines1MaskTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		lines1MaskTranslationYAnimation.duration = 1.400
		lines1MaskTranslationYAnimation.values = [0.000, 0.000, -50.231, -142.778, -201.548, -201.548] as [Float]
		lines1MaskTranslationYAnimation.keyTimes = [0.000, 0.786, 0.804, 0.821, 0.839, 1.000] as [NSNumber]
		lines1MaskTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		lines1MaskTranslationYAnimation.beginTime = beginTime
		lines1MaskTranslationYAnimation.fillMode = fillMode
		lines1MaskTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["lines_1_mask__root"]?.layer.add(lines1MaskTranslationYAnimation, forKey:"InputAnimation_TranslationY")

		let icon02Menu01OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		icon02Menu01OpacityAnimation.duration = 1.400
		icon02Menu01OpacityAnimation.values = [1.000, 0.000, 0.000] as [Float]
		icon02Menu01OpacityAnimation.keyTimes = [0.000, 0.250, 1.000] as [NSNumber]
		icon02Menu01OpacityAnimation.timingFunctions = [linearTiming, linearTiming]
		icon02Menu01OpacityAnimation.beginTime = beginTime
		icon02Menu01OpacityAnimation.fillMode = fillMode
		icon02Menu01OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["icon_02_menu-01__root"]?.layer.add(icon02Menu01OpacityAnimation, forKey:"InputAnimation_Opacity")

		let circMaskTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		circMaskTranslationXAnimation.duration = 1.400
		circMaskTranslationXAnimation.values = [0.000, 0.000, 235.484, 235.484] as [Float]
		circMaskTranslationXAnimation.keyTimes = [0.000, 0.250, 0.518, 1.000] as [NSNumber]
		circMaskTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		circMaskTranslationXAnimation.beginTime = beginTime
		circMaskTranslationXAnimation.fillMode = fillMode
		circMaskTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["circ_mask__root"]?.layer.add(circMaskTranslationXAnimation, forKey:"InputAnimation_TranslationX")

		let circMaskTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		circMaskTranslationYAnimation.duration = 1.400
		circMaskTranslationYAnimation.values = [0.000, 0.000, -113.621, -113.621] as [Float]
		circMaskTranslationYAnimation.keyTimes = [0.000, 0.250, 0.518, 1.000] as [NSNumber]
		circMaskTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		circMaskTranslationYAnimation.beginTime = beginTime
		circMaskTranslationYAnimation.fillMode = fillMode
		circMaskTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["circ_mask__root"]?.layer.add(circMaskTranslationYAnimation, forKey:"InputAnimation_TranslationY")

		let input4OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		input4OpacityAnimation.duration = 1.400
		input4OpacityAnimation.values = [0.000, 0.000, 1.000, 1.000] as [Float]
		input4OpacityAnimation.keyTimes = [0.000, 0.911, 0.964, 1.000] as [NSNumber]
		input4OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		input4OpacityAnimation.beginTime = beginTime
		input4OpacityAnimation.fillMode = fillMode
		input4OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Input_4__root"]?.layer.add(input4OpacityAnimation, forKey:"InputAnimation_Opacity")

		let linesMaskRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		linesMaskRotationAnimation.duration = 1.400
		linesMaskRotationAnimation.values = [5.713, 5.612, 5.612] as [Float]
		linesMaskRotationAnimation.keyTimes = [0.000, 0.857, 1.000] as [NSNumber]
		linesMaskRotationAnimation.timingFunctions = [linearTiming, linearTiming]
		linesMaskRotationAnimation.beginTime = beginTime
		linesMaskRotationAnimation.fillMode = fillMode
		linesMaskRotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["lines_mask__root"]?.layer.add(linesMaskRotationAnimation, forKey:"InputAnimation_Rotation")

		let linesMaskScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		linesMaskScaleXAnimation.duration = 1.400
		linesMaskScaleXAnimation.values = [0.190, 0.190, 0.474, 0.856, 0.991, -0.002, -0.975, -0.975] as [Float]
		linesMaskScaleXAnimation.keyTimes = [0.000, 0.446, 0.482, 0.696, 0.786, 0.839, 0.857, 1.000] as [NSNumber]
		linesMaskScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		linesMaskScaleXAnimation.beginTime = beginTime
		linesMaskScaleXAnimation.fillMode = fillMode
		linesMaskScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["lines_mask__xScale"]?.layer.add(linesMaskScaleXAnimation, forKey:"InputAnimation_ScaleX")

		let linesMaskScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		linesMaskScaleYAnimation.duration = 1.400
		linesMaskScaleYAnimation.values = [0.579, 0.177, 0.093, 0.040, 0.040] as [Float]
		linesMaskScaleYAnimation.keyTimes = [0.000, 0.457, 0.586, 0.693, 1.000] as [NSNumber]
		linesMaskScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		linesMaskScaleYAnimation.beginTime = beginTime
		linesMaskScaleYAnimation.fillMode = fillMode
		linesMaskScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["lines_mask__yScale"]?.layer.add(linesMaskScaleYAnimation, forKey:"InputAnimation_ScaleY")

		let linesMaskTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		linesMaskTranslationXAnimation.duration = 1.400
		linesMaskTranslationXAnimation.values = [0.000, 0.000, 46.867, 60.875, 32.313, 52.293, 131.590, 180.152, 223.691, 343.457, 396.637, 473.936, 716.613, 836.867, 982.199, 982.199] as [Float]
		linesMaskTranslationXAnimation.keyTimes = [0.000, 0.446, 0.482, 0.536, 0.589, 0.625, 0.679, 0.696, 0.714, 0.750, 0.786, 0.839, 0.857, 0.893, 0.929, 1.000] as [NSNumber]
		linesMaskTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		linesMaskTranslationXAnimation.beginTime = beginTime
		linesMaskTranslationXAnimation.fillMode = fillMode
		linesMaskTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["lines_mask__root"]?.layer.add(linesMaskTranslationXAnimation, forKey:"InputAnimation_TranslationX")

		let linesMaskTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		linesMaskTranslationYAnimation.duration = 1.400
		linesMaskTranslationYAnimation.values = [0.000, 0.000, -31.169, -125.083, -165.208, -235.868, -298.657, -333.899, -367.806, -455.407, -494.931, -544.483, -737.108, -832.909, -946.546, -946.546] as [Float]
		linesMaskTranslationYAnimation.keyTimes = [0.000, 0.446, 0.482, 0.536, 0.589, 0.625, 0.679, 0.696, 0.714, 0.750, 0.786, 0.839, 0.857, 0.893, 0.929, 1.000] as [NSNumber]
		linesMaskTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		linesMaskTranslationYAnimation.beginTime = beginTime
		linesMaskTranslationYAnimation.fillMode = fillMode
		linesMaskTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["lines_mask__root"]?.layer.add(linesMaskTranslationYAnimation, forKey:"InputAnimation_TranslationY")

		let input5OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		input5OpacityAnimation.duration = 1.400
		input5OpacityAnimation.values = [0.000, 0.000, 1.000, 1.000] as [Float]
		input5OpacityAnimation.keyTimes = [0.000, 0.786, 0.839, 1.000] as [NSNumber]
		input5OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		input5OpacityAnimation.beginTime = beginTime
		input5OpacityAnimation.fillMode = fillMode
		input5OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Input_5__root"]?.layer.add(input5OpacityAnimation, forKey:"InputAnimation_Opacity")

		let lines2Mask2ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		lines2Mask2ScaleYAnimation.duration = 1.400
		lines2Mask2ScaleYAnimation.values = [0.135, 0.135, 0.877, 0.015, 0.015] as [Float]
		lines2Mask2ScaleYAnimation.keyTimes = [0.000, 0.786, 0.821, 0.839, 1.000] as [NSNumber]
		lines2Mask2ScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		lines2Mask2ScaleYAnimation.beginTime = beginTime
		lines2Mask2ScaleYAnimation.fillMode = fillMode
		lines2Mask2ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["lines_2_mask__yScale"]?.layer.add(lines2Mask2ScaleYAnimation, forKey:"InputAnimation_ScaleY")

		let lines2Mask2TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		lines2Mask2TranslationXAnimation.duration = 1.400
		lines2Mask2TranslationXAnimation.values = [0.000, 0.000, 29.443, 130.703, 164.916, 164.916] as [Float]
		lines2Mask2TranslationXAnimation.keyTimes = [0.000, 0.786, 0.804, 0.821, 0.839, 1.000] as [NSNumber]
		lines2Mask2TranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		lines2Mask2TranslationXAnimation.beginTime = beginTime
		lines2Mask2TranslationXAnimation.fillMode = fillMode
		lines2Mask2TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["lines_2_mask__root"]?.layer.add(lines2Mask2TranslationXAnimation, forKey:"InputAnimation_TranslationX")

		let lines2Mask2TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		lines2Mask2TranslationYAnimation.duration = 1.400
		lines2Mask2TranslationYAnimation.values = [0.000, 0.000, 61.793, 256.933, 328.738, 328.738] as [Float]
		lines2Mask2TranslationYAnimation.keyTimes = [0.000, 0.786, 0.804, 0.821, 0.839, 1.000] as [NSNumber]
		lines2Mask2TranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		lines2Mask2TranslationYAnimation.beginTime = beginTime
		lines2Mask2TranslationYAnimation.fillMode = fillMode
		lines2Mask2TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["lines_2_mask__root"]?.layer.add(lines2Mask2TranslationYAnimation, forKey:"InputAnimation_TranslationY")

		let lines2MaskScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		lines2MaskScaleXAnimation.duration = 1.400
		lines2MaskScaleXAnimation.values = [0.254, 0.254, 0.371, 0.371] as [Float]
		lines2MaskScaleXAnimation.keyTimes = [0.000, 0.696, 0.732, 1.000] as [NSNumber]
		lines2MaskScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		lines2MaskScaleXAnimation.beginTime = beginTime
		lines2MaskScaleXAnimation.fillMode = fillMode
		lines2MaskScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["lines 2_mask__xScale"]?.layer.add(lines2MaskScaleXAnimation, forKey:"InputAnimation_ScaleX")

		let lines2MaskScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		lines2MaskScaleYAnimation.duration = 1.400
		lines2MaskScaleYAnimation.values = [0.002, 0.002, 0.314, 0.507, 0.030, 0.383, 0.005, 0.005] as [Float]
		lines2MaskScaleYAnimation.keyTimes = [0.000, 0.696, 0.732, 0.821, 0.857, 0.911, 0.929, 1.000] as [NSNumber]
		lines2MaskScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		lines2MaskScaleYAnimation.beginTime = beginTime
		lines2MaskScaleYAnimation.fillMode = fillMode
		lines2MaskScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["lines 2_mask__yScale"]?.layer.add(lines2MaskScaleYAnimation, forKey:"InputAnimation_ScaleY")

		let lines2MaskTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		lines2MaskTranslationXAnimation.duration = 1.400
		lines2MaskTranslationXAnimation.values = [0.000, 0.000, -26.068, -68.970, -194.310, -248.761, -338.610, -374.348, -374.348, 538.938, 512.510, 430.662, 402.380, 402.380] as [Float]
		lines2MaskTranslationXAnimation.keyTimes = [0.000, 0.696, 0.732, 0.768, 0.786, 0.821, 0.839, 0.857, 0.875, 0.875, 0.893, 0.911, 0.929, 1.000] as [NSNumber]
		lines2MaskTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, instantTiming, instantTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		lines2MaskTranslationXAnimation.beginTime = beginTime
		lines2MaskTranslationXAnimation.fillMode = fillMode
		lines2MaskTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["lines 2_mask__root"]?.layer.add(lines2MaskTranslationXAnimation, forKey:"InputAnimation_TranslationX")

		let lines2MaskTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		lines2MaskTranslationYAnimation.duration = 1.400
		lines2MaskTranslationYAnimation.values = [0.000, 0.000, -16.302, -60.023, -168.902, -214.255, -266.713, -292.417, -292.417, -406.615, -425.623, -511.971, -532.312, -532.312] as [Float]
		lines2MaskTranslationYAnimation.keyTimes = [0.000, 0.696, 0.732, 0.768, 0.786, 0.821, 0.839, 0.857, 0.875, 0.875, 0.893, 0.911, 0.929, 1.000] as [NSNumber]
		lines2MaskTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, instantTiming, instantTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		lines2MaskTranslationYAnimation.beginTime = beginTime
		lines2MaskTranslationYAnimation.fillMode = fillMode
		lines2MaskTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["lines 2_mask__root"]?.layer.add(lines2MaskTranslationYAnimation, forKey:"InputAnimation_TranslationY")

		let infoOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		infoOpacityAnimation.duration = 1.400
		infoOpacityAnimation.values = [0.000, 0.000, 1.000] as [Float]
		infoOpacityAnimation.keyTimes = [0.000, 0.946, 1.000] as [NSNumber]
		infoOpacityAnimation.timingFunctions = [linearTiming, linearTiming]
		infoOpacityAnimation.beginTime = beginTime
		infoOpacityAnimation.fillMode = fillMode
		infoOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["info__root"]?.layer.add(infoOpacityAnimation, forKey:"InputAnimation_Opacity")

		let infoTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		infoTranslationYAnimation.duration = 1.400
		infoTranslationYAnimation.values = [1.000, 1.000] as [Float]
		infoTranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		infoTranslationYAnimation.timingFunctions = [linearTiming]
		infoTranslationYAnimation.beginTime = beginTime
		infoTranslationYAnimation.fillMode = fillMode
		infoTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["info__root"]?.layer.add(infoTranslationYAnimation, forKey:"InputAnimation_TranslationY")

		let input7OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		input7OpacityAnimation.duration = 1.400
		input7OpacityAnimation.values = [0.000, 0.000, 1.000, 1.000] as [Float]
		input7OpacityAnimation.keyTimes = [0.000, 0.893, 0.964, 1.000] as [NSNumber]
		input7OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		input7OpacityAnimation.beginTime = beginTime
		input7OpacityAnimation.fillMode = fillMode
		input7OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Input_7__root"]?.layer.add(input7OpacityAnimation, forKey:"InputAnimation_Opacity")

		let menuIcons01ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		menuIcons01ScaleXAnimation.duration = 1.400
		menuIcons01ScaleXAnimation.values = [0.239, 0.160, 0.160] as [Float]
		menuIcons01ScaleXAnimation.keyTimes = [0.000, 0.250, 1.000] as [NSNumber]
		menuIcons01ScaleXAnimation.timingFunctions = [linearTiming, linearTiming]
		menuIcons01ScaleXAnimation.beginTime = beginTime
		menuIcons01ScaleXAnimation.fillMode = fillMode
		menuIcons01ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-01__xScale"]?.layer.add(menuIcons01ScaleXAnimation, forKey:"InputAnimation_ScaleX")

		let menuIcons01ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		menuIcons01ScaleYAnimation.duration = 1.400
		menuIcons01ScaleYAnimation.values = [0.239, 0.160, 0.160] as [Float]
		menuIcons01ScaleYAnimation.keyTimes = [0.000, 0.250, 1.000] as [NSNumber]
		menuIcons01ScaleYAnimation.timingFunctions = [linearTiming, linearTiming]
		menuIcons01ScaleYAnimation.beginTime = beginTime
		menuIcons01ScaleYAnimation.fillMode = fillMode
		menuIcons01ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-01__yScale"]?.layer.add(menuIcons01ScaleYAnimation, forKey:"InputAnimation_ScaleY")

		let menuIcons01TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		menuIcons01TranslationXAnimation.duration = 1.400
		menuIcons01TranslationXAnimation.values = [0.000, -47.322, -47.322] as [Float]
		menuIcons01TranslationXAnimation.keyTimes = [0.000, 0.250, 1.000] as [NSNumber]
		menuIcons01TranslationXAnimation.timingFunctions = [linearTiming, linearTiming]
		menuIcons01TranslationXAnimation.beginTime = beginTime
		menuIcons01TranslationXAnimation.fillMode = fillMode
		menuIcons01TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-01__root"]?.layer.add(menuIcons01TranslationXAnimation, forKey:"InputAnimation_TranslationX")

		let menuIcons01TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		menuIcons01TranslationYAnimation.duration = 1.400
		menuIcons01TranslationYAnimation.values = [0.000, 224.500, 224.500] as [Float]
		menuIcons01TranslationYAnimation.keyTimes = [0.000, 0.250, 1.000] as [NSNumber]
		menuIcons01TranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
		menuIcons01TranslationYAnimation.beginTime = beginTime
		menuIcons01TranslationYAnimation.fillMode = fillMode
		menuIcons01TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-01__root"]?.layer.add(menuIcons01TranslationYAnimation, forKey:"InputAnimation_TranslationY")
	}

	func removeInputAnimation() {
		self.layer.removeAnimation(forKey: "InputAnimation")
		self.viewsByName["Input_2__root"]?.layer.removeAnimation(forKey: "InputAnimation_Opacity")
		self.viewsByName["Input_3__root"]?.layer.removeAnimation(forKey: "InputAnimation_Opacity")
		self.viewsByName["Input_1__root"]?.layer.removeAnimation(forKey: "InputAnimation_Opacity")
		self.viewsByName["lines 3_mask__xScale"]?.layer.removeAnimation(forKey: "InputAnimation_ScaleX")
		self.viewsByName["lines 3_mask__yScale"]?.layer.removeAnimation(forKey: "InputAnimation_ScaleY")
		self.viewsByName["lines 3_mask__root"]?.layer.removeAnimation(forKey: "InputAnimation_TranslationX")
		self.viewsByName["lines 3_mask__root"]?.layer.removeAnimation(forKey: "InputAnimation_TranslationY")
		self.viewsByName["frame_mask__root"]?.layer.removeAnimation(forKey: "InputAnimation_Rotation")
		self.viewsByName["frame_mask__xScale"]?.layer.removeAnimation(forKey: "InputAnimation_ScaleX")
		self.viewsByName["frame_mask__root"]?.layer.removeAnimation(forKey: "InputAnimation_TranslationX")
		self.viewsByName["frame_mask__root"]?.layer.removeAnimation(forKey: "InputAnimation_TranslationY")
		self.viewsByName["Input_8__root"]?.layer.removeAnimation(forKey: "InputAnimation_Opacity")
		self.viewsByName["Input_9__root"]?.layer.removeAnimation(forKey: "InputAnimation_Opacity")
		self.viewsByName["menu_icons-02__xScale"]?.layer.removeAnimation(forKey: "InputAnimation_ScaleX")
		self.viewsByName["menu_icons-02__yScale"]?.layer.removeAnimation(forKey: "InputAnimation_ScaleY")
		self.viewsByName["menu_icons-02__root"]?.layer.removeAnimation(forKey: "InputAnimation_TranslationX")
		self.viewsByName["menu_icons-02__root"]?.layer.removeAnimation(forKey: "InputAnimation_TranslationY")
		self.viewsByName["menu_icons-04__xScale"]?.layer.removeAnimation(forKey: "InputAnimation_ScaleX")
		self.viewsByName["menu_icons-04__yScale"]?.layer.removeAnimation(forKey: "InputAnimation_ScaleY")
		self.viewsByName["menu_icons-04__root"]?.layer.removeAnimation(forKey: "InputAnimation_TranslationX")
		self.viewsByName["menu_icons-04__root"]?.layer.removeAnimation(forKey: "InputAnimation_TranslationY")
		self.viewsByName["Input_6__root"]?.layer.removeAnimation(forKey: "InputAnimation_Opacity")
		self.viewsByName["Input_10__root"]?.layer.removeAnimation(forKey: "InputAnimation_Opacity")
		self.viewsByName["lines_1_mask__yScale"]?.layer.removeAnimation(forKey: "InputAnimation_ScaleY")
		self.viewsByName["lines_1_mask__root"]?.layer.removeAnimation(forKey: "InputAnimation_TranslationX")
		self.viewsByName["lines_1_mask__root"]?.layer.removeAnimation(forKey: "InputAnimation_TranslationY")
		self.viewsByName["icon_02_menu-01__root"]?.layer.removeAnimation(forKey: "InputAnimation_Opacity")
		self.viewsByName["circ_mask__root"]?.layer.removeAnimation(forKey: "InputAnimation_TranslationX")
		self.viewsByName["circ_mask__root"]?.layer.removeAnimation(forKey: "InputAnimation_TranslationY")
		self.viewsByName["Input_4__root"]?.layer.removeAnimation(forKey: "InputAnimation_Opacity")
		self.viewsByName["lines_mask__root"]?.layer.removeAnimation(forKey: "InputAnimation_Rotation")
		self.viewsByName["lines_mask__xScale"]?.layer.removeAnimation(forKey: "InputAnimation_ScaleX")
		self.viewsByName["lines_mask__yScale"]?.layer.removeAnimation(forKey: "InputAnimation_ScaleY")
		self.viewsByName["lines_mask__root"]?.layer.removeAnimation(forKey: "InputAnimation_TranslationX")
		self.viewsByName["lines_mask__root"]?.layer.removeAnimation(forKey: "InputAnimation_TranslationY")
		self.viewsByName["Input_5__root"]?.layer.removeAnimation(forKey: "InputAnimation_Opacity")
		self.viewsByName["lines_2_mask__yScale"]?.layer.removeAnimation(forKey: "InputAnimation_ScaleY")
		self.viewsByName["lines_2_mask__root"]?.layer.removeAnimation(forKey: "InputAnimation_TranslationX")
		self.viewsByName["lines_2_mask__root"]?.layer.removeAnimation(forKey: "InputAnimation_TranslationY")
		self.viewsByName["lines 2_mask__xScale"]?.layer.removeAnimation(forKey: "InputAnimation_ScaleX")
		self.viewsByName["lines 2_mask__yScale"]?.layer.removeAnimation(forKey: "InputAnimation_ScaleY")
		self.viewsByName["lines 2_mask__root"]?.layer.removeAnimation(forKey: "InputAnimation_TranslationX")
		self.viewsByName["lines 2_mask__root"]?.layer.removeAnimation(forKey: "InputAnimation_TranslationY")
		self.viewsByName["info__root"]?.layer.removeAnimation(forKey: "InputAnimation_Opacity")
		self.viewsByName["info__root"]?.layer.removeAnimation(forKey: "InputAnimation_TranslationY")
		self.viewsByName["Input_7__root"]?.layer.removeAnimation(forKey: "InputAnimation_Opacity")
		self.viewsByName["menu_icons-01__xScale"]?.layer.removeAnimation(forKey: "InputAnimation_ScaleX")
		self.viewsByName["menu_icons-01__yScale"]?.layer.removeAnimation(forKey: "InputAnimation_ScaleY")
		self.viewsByName["menu_icons-01__root"]?.layer.removeAnimation(forKey: "InputAnimation_TranslationX")
		self.viewsByName["menu_icons-01__root"]?.layer.removeAnimation(forKey: "InputAnimation_TranslationY")
	}

	// - MARK: InputAnimation_reversed

	func addInputAnimationReversedAnimation() {
		addInputAnimationReversedAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addInputAnimationReversedAnimation(completion: ((Bool) -> Void)?) {
		addInputAnimationReversedAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addInputAnimationReversedAnimation(removedOnCompletion: Bool) {
		addInputAnimationReversedAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addInputAnimationReversedAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addInputAnimationReversedAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addInputAnimationReversedAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let instantTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionDefault)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 1.400
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "InputAnimationReversed")
			self.animationCompletions[layer.animation(forKey: "InputAnimationReversed")!] = complete
		}

		let input2OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		input2OpacityAnimation.duration = 1.400
		input2OpacityAnimation.values = [1.000, 1.000, 0.000, 0.000] as [Float]
		input2OpacityAnimation.keyTimes = [0.000, 0.107, 0.179, 1.000] as [NSNumber]
		input2OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		input2OpacityAnimation.beginTime = beginTime
		input2OpacityAnimation.fillMode = fillMode
		input2OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Input_2__root"]?.layer.add(input2OpacityAnimation, forKey:"InputAnimation_reversed_Opacity")

		let input3OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		input3OpacityAnimation.duration = 1.400
		input3OpacityAnimation.values = [1.000, 1.000, 0.000, 0.000] as [Float]
		input3OpacityAnimation.keyTimes = [0.000, 0.214, 0.268, 1.000] as [NSNumber]
		input3OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		input3OpacityAnimation.beginTime = beginTime
		input3OpacityAnimation.fillMode = fillMode
		input3OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Input_3__root"]?.layer.add(input3OpacityAnimation, forKey:"InputAnimation_reversed_Opacity")

		let input1OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		input1OpacityAnimation.duration = 1.400
		input1OpacityAnimation.values = [0.304, 0.304, 0.000, 0.000] as [Float]
		input1OpacityAnimation.keyTimes = [0.000, 0.107, 0.161, 1.000] as [NSNumber]
		input1OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		input1OpacityAnimation.beginTime = beginTime
		input1OpacityAnimation.fillMode = fillMode
		input1OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Input_1__root"]?.layer.add(input1OpacityAnimation, forKey:"InputAnimation_reversed_Opacity")

		let lines3MaskScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		lines3MaskScaleXAnimation.duration = 1.400
		lines3MaskScaleXAnimation.values = [0.145, 0.145, 0.176, 0.181, 0.181] as [Float]
		lines3MaskScaleXAnimation.keyTimes = [0.000, 0.214, 0.268, 0.304, 1.000] as [NSNumber]
		lines3MaskScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		lines3MaskScaleXAnimation.beginTime = beginTime
		lines3MaskScaleXAnimation.fillMode = fillMode
		lines3MaskScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["lines 3_mask__xScale"]?.layer.add(lines3MaskScaleXAnimation, forKey:"InputAnimation_reversed_ScaleX")

		let lines3MaskScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		lines3MaskScaleYAnimation.duration = 1.400
		lines3MaskScaleYAnimation.values = [0.008, 0.008, -0.429, -0.048, -0.421, -0.011, -0.000] as [Float]
		lines3MaskScaleYAnimation.keyTimes = [0.000, 0.071, 0.089, 0.125, 0.268, 0.304, 1.000] as [NSNumber]
		lines3MaskScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		lines3MaskScaleYAnimation.beginTime = beginTime
		lines3MaskScaleYAnimation.fillMode = fillMode
		lines3MaskScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["lines 3_mask__yScale"]?.layer.add(lines3MaskScaleYAnimation, forKey:"InputAnimation_reversed_ScaleY")

		let lines3MaskTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		lines3MaskTranslationXAnimation.duration = 1.400
		lines3MaskTranslationXAnimation.values = [660.708, 660.708, 640.700, 552.509, 535.044, 280.241, 240.370, 206.984, 177.444, 95.753, 23.266, 0.000, 0.000] as [Float]
		lines3MaskTranslationXAnimation.keyTimes = [0.000, 0.071, 0.089, 0.107, 0.125, 0.143, 0.161, 0.179, 0.214, 0.232, 0.268, 0.304, 1.000] as [NSNumber]
		lines3MaskTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		lines3MaskTranslationXAnimation.beginTime = beginTime
		lines3MaskTranslationXAnimation.fillMode = fillMode
		lines3MaskTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["lines 3_mask__root"]?.layer.add(lines3MaskTranslationXAnimation, forKey:"InputAnimation_reversed_TranslationX")

		let lines3MaskTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		lines3MaskTranslationYAnimation.duration = 1.400
		lines3MaskTranslationYAnimation.values = [-213.615, -213.615, -248.572, -382.052, -412.567, 479.348, 405.023, 330.039, 258.863, 123.774, 29.796, 0.000, 0.000] as [Float]
		lines3MaskTranslationYAnimation.keyTimes = [0.000, 0.071, 0.089, 0.107, 0.125, 0.143, 0.161, 0.179, 0.214, 0.232, 0.268, 0.304, 1.000] as [NSNumber]
		lines3MaskTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		lines3MaskTranslationYAnimation.beginTime = beginTime
		lines3MaskTranslationYAnimation.fillMode = fillMode
		lines3MaskTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["lines 3_mask__root"]?.layer.add(lines3MaskTranslationYAnimation, forKey:"InputAnimation_reversed_TranslationY")

		let frameMaskRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		frameMaskRotationAnimation.duration = 1.400
		frameMaskRotationAnimation.values = [5.607, 5.607, 5.454] as [Float]
		frameMaskRotationAnimation.keyTimes = [0.000, 0.607, 1.000] as [NSNumber]
		frameMaskRotationAnimation.timingFunctions = [linearTiming, linearTiming]
		frameMaskRotationAnimation.beginTime = beginTime
		frameMaskRotationAnimation.fillMode = fillMode
		frameMaskRotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["frame_mask__root"]?.layer.add(frameMaskRotationAnimation, forKey:"InputAnimation_reversed_Rotation")

		let frameMaskScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		frameMaskScaleXAnimation.duration = 1.400
		frameMaskScaleXAnimation.values = [0.325, 0.325, 0.127] as [Float]
		frameMaskScaleXAnimation.keyTimes = [0.000, 0.607, 1.000] as [NSNumber]
		frameMaskScaleXAnimation.timingFunctions = [linearTiming, linearTiming]
		frameMaskScaleXAnimation.beginTime = beginTime
		frameMaskScaleXAnimation.fillMode = fillMode
		frameMaskScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["frame_mask__xScale"]?.layer.add(frameMaskScaleXAnimation, forKey:"InputAnimation_reversed_ScaleX")

		let frameMaskTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		frameMaskTranslationXAnimation.duration = 1.400
		frameMaskTranslationXAnimation.values = [345.968, 345.968, 283.171, 247.116, 0.000] as [Float]
		frameMaskTranslationXAnimation.keyTimes = [0.000, 0.393, 0.482, 0.607, 1.000] as [NSNumber]
		frameMaskTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		frameMaskTranslationXAnimation.beginTime = beginTime
		frameMaskTranslationXAnimation.fillMode = fillMode
		frameMaskTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["frame_mask__root"]?.layer.add(frameMaskTranslationXAnimation, forKey:"InputAnimation_reversed_TranslationX")

		let frameMaskTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		frameMaskTranslationYAnimation.duration = 1.400
		frameMaskTranslationYAnimation.values = [-285.705, -285.705, -234.416, -189.908, 0.000] as [Float]
		frameMaskTranslationYAnimation.keyTimes = [0.000, 0.393, 0.482, 0.607, 1.000] as [NSNumber]
		frameMaskTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		frameMaskTranslationYAnimation.beginTime = beginTime
		frameMaskTranslationYAnimation.fillMode = fillMode
		frameMaskTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["frame_mask__root"]?.layer.add(frameMaskTranslationYAnimation, forKey:"InputAnimation_reversed_TranslationY")

		let input8OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		input8OpacityAnimation.duration = 1.400
		input8OpacityAnimation.values = [1.000, 1.000, 0.000, 0.000] as [Float]
		input8OpacityAnimation.keyTimes = [0.000, 0.036, 0.089, 1.000] as [NSNumber]
		input8OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		input8OpacityAnimation.beginTime = beginTime
		input8OpacityAnimation.fillMode = fillMode
		input8OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Input_8__root"]?.layer.add(input8OpacityAnimation, forKey:"InputAnimation_reversed_Opacity")

		let input9OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		input9OpacityAnimation.duration = 1.400
		input9OpacityAnimation.values = [1.000, 1.000, 0.000, 0.000] as [Float]
		input9OpacityAnimation.keyTimes = [0.000, 0.196, 0.250, 1.000] as [NSNumber]
		input9OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		input9OpacityAnimation.beginTime = beginTime
		input9OpacityAnimation.fillMode = fillMode
		input9OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Input_9__root"]?.layer.add(input9OpacityAnimation, forKey:"InputAnimation_reversed_Opacity")

		let menuIcons02ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		menuIcons02ScaleXAnimation.duration = 1.400
		menuIcons02ScaleXAnimation.values = [0.161, 0.161, 0.239, 0.239] as [Float]
		menuIcons02ScaleXAnimation.keyTimes = [0.000, 0.482, 0.750, 1.000] as [NSNumber]
		menuIcons02ScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		menuIcons02ScaleXAnimation.beginTime = beginTime
		menuIcons02ScaleXAnimation.fillMode = fillMode
		menuIcons02ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-02__xScale"]?.layer.add(menuIcons02ScaleXAnimation, forKey:"InputAnimation_reversed_ScaleX")

		let menuIcons02ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		menuIcons02ScaleYAnimation.duration = 1.400
		menuIcons02ScaleYAnimation.values = [0.161, 0.161, 0.239, 0.239] as [Float]
		menuIcons02ScaleYAnimation.keyTimes = [0.000, 0.482, 0.750, 1.000] as [NSNumber]
		menuIcons02ScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		menuIcons02ScaleYAnimation.beginTime = beginTime
		menuIcons02ScaleYAnimation.fillMode = fillMode
		menuIcons02ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-02__yScale"]?.layer.add(menuIcons02ScaleYAnimation, forKey:"InputAnimation_reversed_ScaleY")

		let menuIcons02TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		menuIcons02TranslationXAnimation.duration = 1.400
		menuIcons02TranslationXAnimation.values = [-102.088, -102.088, 0.000, 0.000] as [Float]
		menuIcons02TranslationXAnimation.keyTimes = [0.000, 0.482, 0.750, 1.000] as [NSNumber]
		menuIcons02TranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		menuIcons02TranslationXAnimation.beginTime = beginTime
		menuIcons02TranslationXAnimation.fillMode = fillMode
		menuIcons02TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-02__root"]?.layer.add(menuIcons02TranslationXAnimation, forKey:"InputAnimation_reversed_TranslationX")

		let menuIcons02TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		menuIcons02TranslationYAnimation.duration = 1.400
		menuIcons02TranslationYAnimation.values = [171.037, 171.037, 0.000, 0.000] as [Float]
		menuIcons02TranslationYAnimation.keyTimes = [0.000, 0.482, 0.750, 1.000] as [NSNumber]
		menuIcons02TranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		menuIcons02TranslationYAnimation.beginTime = beginTime
		menuIcons02TranslationYAnimation.fillMode = fillMode
		menuIcons02TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-02__root"]?.layer.add(menuIcons02TranslationYAnimation, forKey:"InputAnimation_reversed_TranslationY")

		let menuIcons04ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		menuIcons04ScaleXAnimation.duration = 1.400
		menuIcons04ScaleXAnimation.values = [0.164, 0.164, 0.237, 0.237] as [Float]
		menuIcons04ScaleXAnimation.keyTimes = [0.000, 0.268, 0.482, 1.000] as [NSNumber]
		menuIcons04ScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		menuIcons04ScaleXAnimation.beginTime = beginTime
		menuIcons04ScaleXAnimation.fillMode = fillMode
		menuIcons04ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-04__xScale"]?.layer.add(menuIcons04ScaleXAnimation, forKey:"InputAnimation_reversed_ScaleX")

		let menuIcons04ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		menuIcons04ScaleYAnimation.duration = 1.400
		menuIcons04ScaleYAnimation.values = [0.164, 0.164, 0.237, 0.237] as [Float]
		menuIcons04ScaleYAnimation.keyTimes = [0.000, 0.268, 0.482, 1.000] as [NSNumber]
		menuIcons04ScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		menuIcons04ScaleYAnimation.beginTime = beginTime
		menuIcons04ScaleYAnimation.fillMode = fillMode
		menuIcons04ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-04__yScale"]?.layer.add(menuIcons04ScaleYAnimation, forKey:"InputAnimation_reversed_ScaleY")

		let menuIcons04TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		menuIcons04TranslationXAnimation.duration = 1.400
		menuIcons04TranslationXAnimation.values = [-240.732, -240.732, 0.000, 0.000] as [Float]
		menuIcons04TranslationXAnimation.keyTimes = [0.000, 0.268, 0.482, 1.000] as [NSNumber]
		menuIcons04TranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		menuIcons04TranslationXAnimation.beginTime = beginTime
		menuIcons04TranslationXAnimation.fillMode = fillMode
		menuIcons04TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-04__root"]?.layer.add(menuIcons04TranslationXAnimation, forKey:"InputAnimation_reversed_TranslationX")

		let menuIcons04TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		menuIcons04TranslationYAnimation.duration = 1.400
		menuIcons04TranslationYAnimation.values = [63.026, 63.026, 0.000, 0.000] as [Float]
		menuIcons04TranslationYAnimation.keyTimes = [0.000, 0.268, 0.482, 1.000] as [NSNumber]
		menuIcons04TranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		menuIcons04TranslationYAnimation.beginTime = beginTime
		menuIcons04TranslationYAnimation.fillMode = fillMode
		menuIcons04TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-04__root"]?.layer.add(menuIcons04TranslationYAnimation, forKey:"InputAnimation_reversed_TranslationY")

		let input6OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		input6OpacityAnimation.duration = 1.400
		input6OpacityAnimation.values = [1.000, 1.000, 0.000, 0.000] as [Float]
		input6OpacityAnimation.keyTimes = [0.000, 0.125, 0.179, 1.000] as [NSNumber]
		input6OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		input6OpacityAnimation.beginTime = beginTime
		input6OpacityAnimation.fillMode = fillMode
		input6OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Input_6__root"]?.layer.add(input6OpacityAnimation, forKey:"InputAnimation_reversed_Opacity")

		let input10OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		input10OpacityAnimation.duration = 1.400
		input10OpacityAnimation.values = [1.000, 1.000, 0.000, 0.000] as [Float]
		input10OpacityAnimation.keyTimes = [0.000, 0.107, 0.161, 1.000] as [NSNumber]
		input10OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		input10OpacityAnimation.beginTime = beginTime
		input10OpacityAnimation.fillMode = fillMode
		input10OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Input_10__root"]?.layer.add(input10OpacityAnimation, forKey:"InputAnimation_reversed_Opacity")

		let lines1MaskScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		lines1MaskScaleYAnimation.duration = 1.400
		lines1MaskScaleYAnimation.values = [-0.003, -0.003, 0.754, 0.107, 0.107] as [Float]
		lines1MaskScaleYAnimation.keyTimes = [0.000, 0.161, 0.179, 0.214, 1.000] as [NSNumber]
		lines1MaskScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		lines1MaskScaleYAnimation.beginTime = beginTime
		lines1MaskScaleYAnimation.fillMode = fillMode
		lines1MaskScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["lines_1_mask__yScale"]?.layer.add(lines1MaskScaleYAnimation, forKey:"InputAnimation_reversed_ScaleY")

		let lines1MaskTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		lines1MaskTranslationXAnimation.duration = 1.400
		lines1MaskTranslationXAnimation.values = [-220.776, -220.776, -182.961, -32.321, 0.000, 0.000] as [Float]
		lines1MaskTranslationXAnimation.keyTimes = [0.000, 0.161, 0.179, 0.196, 0.214, 1.000] as [NSNumber]
		lines1MaskTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		lines1MaskTranslationXAnimation.beginTime = beginTime
		lines1MaskTranslationXAnimation.fillMode = fillMode
		lines1MaskTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["lines_1_mask__root"]?.layer.add(lines1MaskTranslationXAnimation, forKey:"InputAnimation_reversed_TranslationX")

		let lines1MaskTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		lines1MaskTranslationYAnimation.duration = 1.400
		lines1MaskTranslationYAnimation.values = [-201.548, -201.548, -142.778, -50.231, 0.000, 0.000] as [Float]
		lines1MaskTranslationYAnimation.keyTimes = [0.000, 0.161, 0.179, 0.196, 0.214, 1.000] as [NSNumber]
		lines1MaskTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		lines1MaskTranslationYAnimation.beginTime = beginTime
		lines1MaskTranslationYAnimation.fillMode = fillMode
		lines1MaskTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["lines_1_mask__root"]?.layer.add(lines1MaskTranslationYAnimation, forKey:"InputAnimation_reversed_TranslationY")

		let icon02Menu01OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		icon02Menu01OpacityAnimation.duration = 1.400
		icon02Menu01OpacityAnimation.values = [0.000, 0.000, 1.000] as [Float]
		icon02Menu01OpacityAnimation.keyTimes = [0.000, 0.750, 1.000] as [NSNumber]
		icon02Menu01OpacityAnimation.timingFunctions = [linearTiming, linearTiming]
		icon02Menu01OpacityAnimation.beginTime = beginTime
		icon02Menu01OpacityAnimation.fillMode = fillMode
		icon02Menu01OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["icon_02_menu-01__root"]?.layer.add(icon02Menu01OpacityAnimation, forKey:"InputAnimation_reversed_Opacity")

		let circMaskTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		circMaskTranslationXAnimation.duration = 1.400
		circMaskTranslationXAnimation.values = [235.484, 235.484, 0.000, 0.000] as [Float]
		circMaskTranslationXAnimation.keyTimes = [0.000, 0.482, 0.750, 1.000] as [NSNumber]
		circMaskTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		circMaskTranslationXAnimation.beginTime = beginTime
		circMaskTranslationXAnimation.fillMode = fillMode
		circMaskTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["circ_mask__root"]?.layer.add(circMaskTranslationXAnimation, forKey:"InputAnimation_reversed_TranslationX")

		let circMaskTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		circMaskTranslationYAnimation.duration = 1.400
		circMaskTranslationYAnimation.values = [-113.621, -113.621, 0.000, 0.000] as [Float]
		circMaskTranslationYAnimation.keyTimes = [0.000, 0.482, 0.750, 1.000] as [NSNumber]
		circMaskTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		circMaskTranslationYAnimation.beginTime = beginTime
		circMaskTranslationYAnimation.fillMode = fillMode
		circMaskTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["circ_mask__root"]?.layer.add(circMaskTranslationYAnimation, forKey:"InputAnimation_reversed_TranslationY")

		let input4OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		input4OpacityAnimation.duration = 1.400
		input4OpacityAnimation.values = [1.000, 1.000, 0.000, 0.000] as [Float]
		input4OpacityAnimation.keyTimes = [0.000, 0.036, 0.089, 1.000] as [NSNumber]
		input4OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		input4OpacityAnimation.beginTime = beginTime
		input4OpacityAnimation.fillMode = fillMode
		input4OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Input_4__root"]?.layer.add(input4OpacityAnimation, forKey:"InputAnimation_reversed_Opacity")

		let linesMaskRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		linesMaskRotationAnimation.duration = 1.400
		linesMaskRotationAnimation.values = [5.612, 5.612, 5.713] as [Float]
		linesMaskRotationAnimation.keyTimes = [0.000, 0.143, 1.000] as [NSNumber]
		linesMaskRotationAnimation.timingFunctions = [linearTiming, linearTiming]
		linesMaskRotationAnimation.beginTime = beginTime
		linesMaskRotationAnimation.fillMode = fillMode
		linesMaskRotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["lines_mask__root"]?.layer.add(linesMaskRotationAnimation, forKey:"InputAnimation_reversed_Rotation")

		let linesMaskScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		linesMaskScaleXAnimation.duration = 1.400
		linesMaskScaleXAnimation.values = [-0.975, -0.975, -0.002, 0.991, 0.856, 0.474, 0.190, 0.190] as [Float]
		linesMaskScaleXAnimation.keyTimes = [0.000, 0.143, 0.161, 0.214, 0.304, 0.518, 0.554, 1.000] as [NSNumber]
		linesMaskScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		linesMaskScaleXAnimation.beginTime = beginTime
		linesMaskScaleXAnimation.fillMode = fillMode
		linesMaskScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["lines_mask__xScale"]?.layer.add(linesMaskScaleXAnimation, forKey:"InputAnimation_reversed_ScaleX")

		let linesMaskScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		linesMaskScaleYAnimation.duration = 1.400
		linesMaskScaleYAnimation.values = [0.040, 0.040, 0.093, 0.177, 0.579] as [Float]
		linesMaskScaleYAnimation.keyTimes = [0.000, 0.307, 0.414, 0.543, 1.000] as [NSNumber]
		linesMaskScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		linesMaskScaleYAnimation.beginTime = beginTime
		linesMaskScaleYAnimation.fillMode = fillMode
		linesMaskScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["lines_mask__yScale"]?.layer.add(linesMaskScaleYAnimation, forKey:"InputAnimation_reversed_ScaleY")

		let linesMaskTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		linesMaskTranslationXAnimation.duration = 1.400
		linesMaskTranslationXAnimation.values = [982.199, 982.199, 836.867, 716.613, 473.936, 396.637, 343.457, 223.691, 180.152, 131.590, 52.293, 32.313, 60.875, 46.867, 0.000, 0.000] as [Float]
		linesMaskTranslationXAnimation.keyTimes = [0.000, 0.071, 0.107, 0.143, 0.161, 0.214, 0.250, 0.286, 0.304, 0.321, 0.375, 0.411, 0.464, 0.518, 0.554, 1.000] as [NSNumber]
		linesMaskTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		linesMaskTranslationXAnimation.beginTime = beginTime
		linesMaskTranslationXAnimation.fillMode = fillMode
		linesMaskTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["lines_mask__root"]?.layer.add(linesMaskTranslationXAnimation, forKey:"InputAnimation_reversed_TranslationX")

		let linesMaskTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		linesMaskTranslationYAnimation.duration = 1.400
		linesMaskTranslationYAnimation.values = [-946.546, -946.546, -832.909, -737.108, -544.483, -494.931, -455.407, -367.806, -333.899, -298.657, -235.868, -165.208, -125.083, -31.169, 0.000, 0.000] as [Float]
		linesMaskTranslationYAnimation.keyTimes = [0.000, 0.071, 0.107, 0.143, 0.161, 0.214, 0.250, 0.286, 0.304, 0.321, 0.375, 0.411, 0.464, 0.518, 0.554, 1.000] as [NSNumber]
		linesMaskTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		linesMaskTranslationYAnimation.beginTime = beginTime
		linesMaskTranslationYAnimation.fillMode = fillMode
		linesMaskTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["lines_mask__root"]?.layer.add(linesMaskTranslationYAnimation, forKey:"InputAnimation_reversed_TranslationY")

		let input5OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		input5OpacityAnimation.duration = 1.400
		input5OpacityAnimation.values = [1.000, 1.000, 0.000, 0.000] as [Float]
		input5OpacityAnimation.keyTimes = [0.000, 0.161, 0.214, 1.000] as [NSNumber]
		input5OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		input5OpacityAnimation.beginTime = beginTime
		input5OpacityAnimation.fillMode = fillMode
		input5OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Input_5__root"]?.layer.add(input5OpacityAnimation, forKey:"InputAnimation_reversed_Opacity")

		let lines2Mask2ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		lines2Mask2ScaleYAnimation.duration = 1.400
		lines2Mask2ScaleYAnimation.values = [0.015, 0.015, 0.877, 0.135, 0.135] as [Float]
		lines2Mask2ScaleYAnimation.keyTimes = [0.000, 0.161, 0.179, 0.214, 1.000] as [NSNumber]
		lines2Mask2ScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		lines2Mask2ScaleYAnimation.beginTime = beginTime
		lines2Mask2ScaleYAnimation.fillMode = fillMode
		lines2Mask2ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["lines_2_mask__yScale"]?.layer.add(lines2Mask2ScaleYAnimation, forKey:"InputAnimation_reversed_ScaleY")

		let lines2Mask2TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		lines2Mask2TranslationXAnimation.duration = 1.400
		lines2Mask2TranslationXAnimation.values = [164.916, 164.916, 130.703, 29.443, 0.000, 0.000] as [Float]
		lines2Mask2TranslationXAnimation.keyTimes = [0.000, 0.161, 0.179, 0.196, 0.214, 1.000] as [NSNumber]
		lines2Mask2TranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		lines2Mask2TranslationXAnimation.beginTime = beginTime
		lines2Mask2TranslationXAnimation.fillMode = fillMode
		lines2Mask2TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["lines_2_mask__root"]?.layer.add(lines2Mask2TranslationXAnimation, forKey:"InputAnimation_reversed_TranslationX")

		let lines2Mask2TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		lines2Mask2TranslationYAnimation.duration = 1.400
		lines2Mask2TranslationYAnimation.values = [328.738, 328.738, 256.933, 61.793, 0.000, 0.000] as [Float]
		lines2Mask2TranslationYAnimation.keyTimes = [0.000, 0.161, 0.179, 0.196, 0.214, 1.000] as [NSNumber]
		lines2Mask2TranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		lines2Mask2TranslationYAnimation.beginTime = beginTime
		lines2Mask2TranslationYAnimation.fillMode = fillMode
		lines2Mask2TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["lines_2_mask__root"]?.layer.add(lines2Mask2TranslationYAnimation, forKey:"InputAnimation_reversed_TranslationY")

		let lines2MaskScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		lines2MaskScaleXAnimation.duration = 1.400
		lines2MaskScaleXAnimation.values = [0.371, 0.371, 0.254, 0.254] as [Float]
		lines2MaskScaleXAnimation.keyTimes = [0.000, 0.268, 0.304, 1.000] as [NSNumber]
		lines2MaskScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		lines2MaskScaleXAnimation.beginTime = beginTime
		lines2MaskScaleXAnimation.fillMode = fillMode
		lines2MaskScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["lines 2_mask__xScale"]?.layer.add(lines2MaskScaleXAnimation, forKey:"InputAnimation_reversed_ScaleX")

		let lines2MaskScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		lines2MaskScaleYAnimation.duration = 1.400
		lines2MaskScaleYAnimation.values = [0.005, 0.005, 0.383, 0.030, 0.507, 0.314, 0.002, 0.002] as [Float]
		lines2MaskScaleYAnimation.keyTimes = [0.000, 0.071, 0.089, 0.143, 0.179, 0.268, 0.304, 1.000] as [NSNumber]
		lines2MaskScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		lines2MaskScaleYAnimation.beginTime = beginTime
		lines2MaskScaleYAnimation.fillMode = fillMode
		lines2MaskScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["lines 2_mask__yScale"]?.layer.add(lines2MaskScaleYAnimation, forKey:"InputAnimation_reversed_ScaleY")

		let lines2MaskTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		lines2MaskTranslationXAnimation.duration = 1.400
		lines2MaskTranslationXAnimation.values = [402.380, 402.380, 430.662, 512.510, 538.938, 538.938, -374.348, -374.348, -338.610, -248.761, -194.310, -68.970, -26.068, 0.000, 0.000] as [Float]
		lines2MaskTranslationXAnimation.keyTimes = [0.000, 0.071, 0.089, 0.107, 0.125, 0.125, 0.126, 0.143, 0.161, 0.179, 0.214, 0.232, 0.268, 0.304, 1.000] as [NSNumber]
		lines2MaskTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, instantTiming, instantTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		lines2MaskTranslationXAnimation.beginTime = beginTime
		lines2MaskTranslationXAnimation.fillMode = fillMode
		lines2MaskTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["lines 2_mask__root"]?.layer.add(lines2MaskTranslationXAnimation, forKey:"InputAnimation_reversed_TranslationX")

		let lines2MaskTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		lines2MaskTranslationYAnimation.duration = 1.400
		lines2MaskTranslationYAnimation.values = [-532.312, -532.312, -511.971, -425.623, -406.615, -406.615, -292.417, -292.417, -266.713, -214.255, -168.902, -60.023, -16.302, 0.000, 0.000] as [Float]
		lines2MaskTranslationYAnimation.keyTimes = [0.000, 0.071, 0.089, 0.107, 0.125, 0.125, 0.126, 0.143, 0.161, 0.179, 0.214, 0.232, 0.268, 0.304, 1.000] as [NSNumber]
		lines2MaskTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, instantTiming, instantTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		lines2MaskTranslationYAnimation.beginTime = beginTime
		lines2MaskTranslationYAnimation.fillMode = fillMode
		lines2MaskTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["lines 2_mask__root"]?.layer.add(lines2MaskTranslationYAnimation, forKey:"InputAnimation_reversed_TranslationY")

		let infoOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		infoOpacityAnimation.duration = 1.400
		infoOpacityAnimation.values = [1.000, 0.000, 0.000] as [Float]
		infoOpacityAnimation.keyTimes = [0.000, 0.054, 1.000] as [NSNumber]
		infoOpacityAnimation.timingFunctions = [linearTiming, linearTiming]
		infoOpacityAnimation.beginTime = beginTime
		infoOpacityAnimation.fillMode = fillMode
		infoOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["info__root"]?.layer.add(infoOpacityAnimation, forKey:"InputAnimation_reversed_Opacity")

		let infoTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		infoTranslationYAnimation.duration = 1.400
		infoTranslationYAnimation.values = [1.000, 1.000] as [Float]
		infoTranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		infoTranslationYAnimation.timingFunctions = [linearTiming]
		infoTranslationYAnimation.beginTime = beginTime
		infoTranslationYAnimation.fillMode = fillMode
		infoTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["info__root"]?.layer.add(infoTranslationYAnimation, forKey:"InputAnimation_reversed_TranslationY")

		let input7OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		input7OpacityAnimation.duration = 1.400
		input7OpacityAnimation.values = [1.000, 1.000, 0.000, 0.000] as [Float]
		input7OpacityAnimation.keyTimes = [0.000, 0.036, 0.107, 1.000] as [NSNumber]
		input7OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		input7OpacityAnimation.beginTime = beginTime
		input7OpacityAnimation.fillMode = fillMode
		input7OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Input_7__root"]?.layer.add(input7OpacityAnimation, forKey:"InputAnimation_reversed_Opacity")

		let menuIcons01ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		menuIcons01ScaleXAnimation.duration = 1.400
		menuIcons01ScaleXAnimation.values = [0.160, 0.160, 0.239] as [Float]
		menuIcons01ScaleXAnimation.keyTimes = [0.000, 0.750, 1.000] as [NSNumber]
		menuIcons01ScaleXAnimation.timingFunctions = [linearTiming, linearTiming]
		menuIcons01ScaleXAnimation.beginTime = beginTime
		menuIcons01ScaleXAnimation.fillMode = fillMode
		menuIcons01ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-01__xScale"]?.layer.add(menuIcons01ScaleXAnimation, forKey:"InputAnimation_reversed_ScaleX")

		let menuIcons01ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		menuIcons01ScaleYAnimation.duration = 1.400
		menuIcons01ScaleYAnimation.values = [0.160, 0.160, 0.239] as [Float]
		menuIcons01ScaleYAnimation.keyTimes = [0.000, 0.750, 1.000] as [NSNumber]
		menuIcons01ScaleYAnimation.timingFunctions = [linearTiming, linearTiming]
		menuIcons01ScaleYAnimation.beginTime = beginTime
		menuIcons01ScaleYAnimation.fillMode = fillMode
		menuIcons01ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-01__yScale"]?.layer.add(menuIcons01ScaleYAnimation, forKey:"InputAnimation_reversed_ScaleY")

		let menuIcons01TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		menuIcons01TranslationXAnimation.duration = 1.400
		menuIcons01TranslationXAnimation.values = [-47.322, -47.322, 0.000] as [Float]
		menuIcons01TranslationXAnimation.keyTimes = [0.000, 0.750, 1.000] as [NSNumber]
		menuIcons01TranslationXAnimation.timingFunctions = [linearTiming, linearTiming]
		menuIcons01TranslationXAnimation.beginTime = beginTime
		menuIcons01TranslationXAnimation.fillMode = fillMode
		menuIcons01TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-01__root"]?.layer.add(menuIcons01TranslationXAnimation, forKey:"InputAnimation_reversed_TranslationX")

		let menuIcons01TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		menuIcons01TranslationYAnimation.duration = 1.400
		menuIcons01TranslationYAnimation.values = [224.500, 224.500, 0.000] as [Float]
		menuIcons01TranslationYAnimation.keyTimes = [0.000, 0.750, 1.000] as [NSNumber]
		menuIcons01TranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
		menuIcons01TranslationYAnimation.beginTime = beginTime
		menuIcons01TranslationYAnimation.fillMode = fillMode
		menuIcons01TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["menu_icons-01__root"]?.layer.add(menuIcons01TranslationYAnimation, forKey:"InputAnimation_reversed_TranslationY")
	}

	func removeInputAnimationReversedAnimation() {
		self.layer.removeAnimation(forKey: "InputAnimationReversed")
		self.viewsByName["Input_2__root"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_Opacity")
		self.viewsByName["Input_3__root"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_Opacity")
		self.viewsByName["Input_1__root"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_Opacity")
		self.viewsByName["lines 3_mask__xScale"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_ScaleX")
		self.viewsByName["lines 3_mask__yScale"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_ScaleY")
		self.viewsByName["lines 3_mask__root"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_TranslationX")
		self.viewsByName["lines 3_mask__root"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_TranslationY")
		self.viewsByName["frame_mask__root"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_Rotation")
		self.viewsByName["frame_mask__xScale"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_ScaleX")
		self.viewsByName["frame_mask__root"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_TranslationX")
		self.viewsByName["frame_mask__root"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_TranslationY")
		self.viewsByName["Input_8__root"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_Opacity")
		self.viewsByName["Input_9__root"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_Opacity")
		self.viewsByName["menu_icons-02__xScale"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_ScaleX")
		self.viewsByName["menu_icons-02__yScale"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_ScaleY")
		self.viewsByName["menu_icons-02__root"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_TranslationX")
		self.viewsByName["menu_icons-02__root"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_TranslationY")
		self.viewsByName["menu_icons-04__xScale"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_ScaleX")
		self.viewsByName["menu_icons-04__yScale"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_ScaleY")
		self.viewsByName["menu_icons-04__root"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_TranslationX")
		self.viewsByName["menu_icons-04__root"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_TranslationY")
		self.viewsByName["Input_6__root"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_Opacity")
		self.viewsByName["Input_10__root"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_Opacity")
		self.viewsByName["lines_1_mask__yScale"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_ScaleY")
		self.viewsByName["lines_1_mask__root"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_TranslationX")
		self.viewsByName["lines_1_mask__root"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_TranslationY")
		self.viewsByName["icon_02_menu-01__root"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_Opacity")
		self.viewsByName["circ_mask__root"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_TranslationX")
		self.viewsByName["circ_mask__root"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_TranslationY")
		self.viewsByName["Input_4__root"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_Opacity")
		self.viewsByName["lines_mask__root"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_Rotation")
		self.viewsByName["lines_mask__xScale"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_ScaleX")
		self.viewsByName["lines_mask__yScale"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_ScaleY")
		self.viewsByName["lines_mask__root"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_TranslationX")
		self.viewsByName["lines_mask__root"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_TranslationY")
		self.viewsByName["Input_5__root"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_Opacity")
		self.viewsByName["lines_2_mask__yScale"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_ScaleY")
		self.viewsByName["lines_2_mask__root"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_TranslationX")
		self.viewsByName["lines_2_mask__root"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_TranslationY")
		self.viewsByName["lines 2_mask__xScale"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_ScaleX")
		self.viewsByName["lines 2_mask__yScale"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_ScaleY")
		self.viewsByName["lines 2_mask__root"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_TranslationX")
		self.viewsByName["lines 2_mask__root"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_TranslationY")
		self.viewsByName["info__root"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_Opacity")
		self.viewsByName["info__root"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_TranslationY")
		self.viewsByName["Input_7__root"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_Opacity")
		self.viewsByName["menu_icons-01__xScale"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_ScaleX")
		self.viewsByName["menu_icons-01__yScale"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_ScaleY")
		self.viewsByName["menu_icons-01__root"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_TranslationX")
		self.viewsByName["menu_icons-01__root"]?.layer.removeAnimation(forKey: "InputAnimation_reversed_TranslationY")
	}

	// MARK: CAAnimationDelegate
	func animationDidStop(_ anim: CAAnimation, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValue(forKey: anim)
			completion(flag)
		}
	}

	func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimation(forKey: "InputAnimation")
		self.layer.removeAnimation(forKey: "InputAnimationReversed")
	}
}